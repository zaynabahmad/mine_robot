
mine_robot_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000393c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  00800060  0000393c  000039d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800098  00800098  00003a08  2**0
                  ALLOC
  3 .stab         000061d4  00000000  00000000  00003a08  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00004e8e  00000000  00000000  00009bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000ea6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000ebca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000ed59  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00010d9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00011e9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00012e24  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00012fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  00013266  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00013af4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 d1 17 	jmp	0x2fa2	; 0x2fa2 <__vector_1>
       8:	0c 94 e1 17 	jmp	0x2fc2	; 0x2fc2 <__vector_2>
       c:	0c 94 f1 17 	jmp	0x2fe2	; 0x2fe2 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 fe 13 	jmp	0x27fc	; 0x27fc <__vector_10>
      2c:	0c 94 3b 13 	jmp	0x2676	; 0x2676 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e3       	ldi	r30, 0x3C	; 60
      68:	f9 e3       	ldi	r31, 0x39	; 57
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 39       	cpi	r26, 0x98	; 152
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e9       	ldi	r26, 0x98	; 152
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3a       	cpi	r26, 0xA4	; 164
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3c 1b 	call	0x3678	; 0x3678 <main>
      8a:	0c 94 9c 1c 	jmp	0x3938	; 0x3938 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 20 1c 	jmp	0x3840	; 0x3840 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 3c 1c 	jmp	0x3878	; 0x3878 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 2c 1c 	jmp	0x3858	; 0x3858 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 48 1c 	jmp	0x3890	; 0x3890 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 2c 1c 	jmp	0x3858	; 0x3858 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 48 1c 	jmp	0x3890	; 0x3890 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 20 1c 	jmp	0x3840	; 0x3840 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 3c 1c 	jmp	0x3878	; 0x3878 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 28 1c 	jmp	0x3850	; 0x3850 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 44 1c 	jmp	0x3888	; 0x3888 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 2c 1c 	jmp	0x3858	; 0x3858 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 48 1c 	jmp	0x3890	; 0x3890 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 2c 1c 	jmp	0x3858	; 0x3858 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 48 1c 	jmp	0x3890	; 0x3890 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 2c 1c 	jmp	0x3858	; 0x3858 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 48 1c 	jmp	0x3890	; 0x3890 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 30 1c 	jmp	0x3860	; 0x3860 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 4c 1c 	jmp	0x3898	; 0x3898 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <USART_voidInit>:
#include "../../Services/STD_LIB.h"
#include "../../Services/Bit_Math.h"


void USART_voidInit(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <USART_voidInit+0x6>
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62

// baud rate
u16 baud_rate = 51;
     ca8:	83 e3       	ldi	r24, 0x33	; 51
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	9a 83       	std	Y+2, r25	; 0x02
     cae:	89 83       	std	Y+1, r24	; 0x01

UBRRH_REG = (u8) baud_rate>>8;
     cb0:	e0 e4       	ldi	r30, 0x40	; 64
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	89 81       	ldd	r24, Y+1	; 0x01
     cb6:	88 2f       	mov	r24, r24
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	89 2f       	mov	r24, r25
     cbc:	99 0f       	add	r25, r25
     cbe:	99 0b       	sbc	r25, r25
     cc0:	80 83       	st	Z, r24
UBRRL_REG = (u8) baud_rate ;
     cc2:	e9 e2       	ldi	r30, 0x29	; 41
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	89 81       	ldd	r24, Y+1	; 0x01
     cc8:	80 83       	st	Z, r24


// configration of parity bit
#if parity_mode==Disabled
	Clr_Bit(UCSRC_REG,UCSRC_UPM0);
     cca:	a0 e4       	ldi	r26, 0x40	; 64
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	e0 e4       	ldi	r30, 0x40	; 64
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	80 81       	ld	r24, Z
     cd4:	8f 7e       	andi	r24, 0xEF	; 239
     cd6:	8c 93       	st	X, r24
	Clr_Bit(UCSRC_REG,UCSRC_UPM1);
     cd8:	a0 e4       	ldi	r26, 0x40	; 64
     cda:	b0 e0       	ldi	r27, 0x00	; 0
     cdc:	e0 e4       	ldi	r30, 0x40	; 64
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	80 81       	ld	r24, Z
     ce2:	8f 7d       	andi	r24, 0xDF	; 223
     ce4:	8c 93       	st	X, r24
#elif char_size==_7bit
	Clr_Bit(UCSRC_REG,UCSRC_UCSZ0);
	Set_Bit(UCSRC_REG,UCSRC_UCSZ1);
	Clr_Bit(UCSRB_REG,UCSRB_UCSZ2);
#elif char_size==_8bit
	Set_Bit(UCSRC_REG,UCSRC_UCSZ0);
     ce6:	a0 e4       	ldi	r26, 0x40	; 64
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e0 e4       	ldi	r30, 0x40	; 64
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	82 60       	ori	r24, 0x02	; 2
     cf2:	8c 93       	st	X, r24
	Set_Bit(UCSRC_REG,UCSRC_UCSZ1);
     cf4:	a0 e4       	ldi	r26, 0x40	; 64
     cf6:	b0 e0       	ldi	r27, 0x00	; 0
     cf8:	e0 e4       	ldi	r30, 0x40	; 64
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
     cfe:	84 60       	ori	r24, 0x04	; 4
     d00:	8c 93       	st	X, r24
	Clr_Bit(UCSRB_REG,UCSRB_UCSZ2);
     d02:	aa e2       	ldi	r26, 0x2A	; 42
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	ea e2       	ldi	r30, 0x2A	; 42
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	8b 7f       	andi	r24, 0xFB	; 251
     d0e:	8c 93       	st	X, r24
#endif
//configration of synchrnazation
#if syncrnous_mode==asyncronous_mode
	Clr_Bit(UCSRC_REG,UCSRC_UMSEL);
#elif syncrnous_mode==syncrnous_mode
	Set_Bit(UCSRC_REG,UCSRC_UMSEL);
     d10:	a0 e4       	ldi	r26, 0x40	; 64
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	e0 e4       	ldi	r30, 0x40	; 64
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	80 64       	ori	r24, 0x40	; 64
     d1c:	8c 93       	st	X, r24
#endif
// configration transmitter enable or disable

    // Enable transmitter and receiver
	Set_Bit(UCSRB_REG, UCSRB_TXEN);
     d1e:	aa e2       	ldi	r26, 0x2A	; 42
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	ea e2       	ldi	r30, 0x2A	; 42
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	88 60       	ori	r24, 0x08	; 8
     d2a:	8c 93       	st	X, r24
	Set_Bit(UCSRB_REG, UCSRB_RXEN);
     d2c:	aa e2       	ldi	r26, 0x2A	; 42
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	ea e2       	ldi	r30, 0x2A	; 42
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	80 61       	ori	r24, 0x10	; 16
     d38:	8c 93       	st	X, r24

// configraiton for stop bit
#if Stop_bit==_1bit
	Clr_Bit(UCSRC_REG,UCSRC_USBS);
#elif Stop_bit==_2bit
	Set_Bit(UCSRC_REG,UCSRC_USBS);
     d3a:	a0 e4       	ldi	r26, 0x40	; 64
     d3c:	b0 e0       	ldi	r27, 0x00	; 0
     d3e:	e0 e4       	ldi	r30, 0x40	; 64
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	80 81       	ld	r24, Z
     d44:	88 60       	ori	r24, 0x08	; 8
     d46:	8c 93       	st	X, r24
#endif
}
     d48:	0f 90       	pop	r0
     d4a:	0f 90       	pop	r0
     d4c:	cf 91       	pop	r28
     d4e:	df 91       	pop	r29
     d50:	08 95       	ret

00000d52 <USART_voidSendData>:
void USART_voidSendData(u8 Copy_Data)
{
     d52:	df 93       	push	r29
     d54:	cf 93       	push	r28
     d56:	0f 92       	push	r0
     d58:	cd b7       	in	r28, 0x3d	; 61
     d5a:	de b7       	in	r29, 0x3e	; 62
     d5c:	89 83       	std	Y+1, r24	; 0x01
// polling the bit 5
	while (Get_Bit(UCSRA_REG,UCSRA_UDRE)==0);
     d5e:	eb e2       	ldi	r30, 0x2B	; 43
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	80 81       	ld	r24, Z
     d64:	82 95       	swap	r24
     d66:	86 95       	lsr	r24
     d68:	87 70       	andi	r24, 0x07	; 7
     d6a:	88 2f       	mov	r24, r24
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	81 70       	andi	r24, 0x01	; 1
     d70:	90 70       	andi	r25, 0x00	; 0
     d72:	00 97       	sbiw	r24, 0x00	; 0
     d74:	a1 f3       	breq	.-24     	; 0xd5e <USART_voidSendData+0xc>
	UDR_REG=Copy_Data;
     d76:	ec e2       	ldi	r30, 0x2C	; 44
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	89 81       	ldd	r24, Y+1	; 0x01
     d7c:	80 83       	st	Z, r24

}
     d7e:	0f 90       	pop	r0
     d80:	cf 91       	pop	r28
     d82:	df 91       	pop	r29
     d84:	08 95       	ret

00000d86 <USART_u8RreceiveData>:

u8 USART_u8RreceiveData(void)
{
     d86:	df 93       	push	r29
     d88:	cf 93       	push	r28
     d8a:	cd b7       	in	r28, 0x3d	; 61
     d8c:	de b7       	in	r29, 0x3e	; 62
	while (Get_Bit(UCSRA_REG,UCSRA_RXC)==0);
     d8e:	eb e2       	ldi	r30, 0x2B	; 43
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	88 23       	and	r24, r24
     d96:	dc f7       	brge	.-10     	; 0xd8e <USART_u8RreceiveData+0x8>
	return UDR_REG;
     d98:	ec e2       	ldi	r30, 0x2C	; 44
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	80 81       	ld	r24, Z

}
     d9e:	cf 91       	pop	r28
     da0:	df 91       	pop	r29
     da2:	08 95       	ret

00000da4 <USART_voidDisableTransmitter>:

// Function to disable the transmitter
void USART_voidDisableTransmitter(void)
{
     da4:	df 93       	push	r29
     da6:	cf 93       	push	r28
     da8:	cd b7       	in	r28, 0x3d	; 61
     daa:	de b7       	in	r29, 0x3e	; 62
    // Clear the transmitter enable bit (TXEN)
    Clr_Bit(UCSRB_REG, UCSRB_TXEN);
     dac:	aa e2       	ldi	r26, 0x2A	; 42
     dae:	b0 e0       	ldi	r27, 0x00	; 0
     db0:	ea e2       	ldi	r30, 0x2A	; 42
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	80 81       	ld	r24, Z
     db6:	87 7f       	andi	r24, 0xF7	; 247
     db8:	8c 93       	st	X, r24
}
     dba:	cf 91       	pop	r28
     dbc:	df 91       	pop	r29
     dbe:	08 95       	ret

00000dc0 <USART_voidEnableTransmitter>:

// Function to enable the transmitter
void USART_voidEnableTransmitter(void)
{
     dc0:	df 93       	push	r29
     dc2:	cf 93       	push	r28
     dc4:	cd b7       	in	r28, 0x3d	; 61
     dc6:	de b7       	in	r29, 0x3e	; 62
    // Set the transmitter enable bit (TXEN)
    Set_Bit(UCSRB_REG, UCSRB_TXEN);
     dc8:	aa e2       	ldi	r26, 0x2A	; 42
     dca:	b0 e0       	ldi	r27, 0x00	; 0
     dcc:	ea e2       	ldi	r30, 0x2A	; 42
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	80 81       	ld	r24, Z
     dd2:	88 60       	ori	r24, 0x08	; 8
     dd4:	8c 93       	st	X, r24
}
     dd6:	cf 91       	pop	r28
     dd8:	df 91       	pop	r29
     dda:	08 95       	ret

00000ddc <TIMER0_voidInit>:
#include "TIMER0_Interface.h"
#include <avr/interrupt.h>


void TIMER0_voidInit(void)
{
     ddc:	df 93       	push	r29
     dde:	cf 93       	push	r28
     de0:	cd b7       	in	r28, 0x3d	; 61
     de2:	de b7       	in	r29, 0x3e	; 62
#endif


#elif TIMER0_MODE == PWM_FAST

	Set_Bit(TCCR0_REG,TCCR0_WGM00);
     de4:	a3 e5       	ldi	r26, 0x53	; 83
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	e3 e5       	ldi	r30, 0x53	; 83
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	80 64       	ori	r24, 0x40	; 64
     df0:	8c 93       	st	X, r24
	Set_Bit(TCCR0_REG,TCCR0_WGM01);
     df2:	a3 e5       	ldi	r26, 0x53	; 83
     df4:	b0 e0       	ldi	r27, 0x00	; 0
     df6:	e3 e5       	ldi	r30, 0x53	; 83
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	88 60       	ori	r24, 0x08	; 8
     dfe:	8c 93       	st	X, r24
	Clr_Bit(TCCR0_REG,TCCR0_COM01);
#elif FAST_PWM_OC0_STATE == Clear_OC0
	Clr_Bit(TCCR0_REG,TCCR0_COM00);
	Set_Bit(TCCR0_REG,TCCR0_COM01);
#elif FAST_PWM_OC0_STATE == Set_OC0
	Set_Bit(TCCR0_REG,TCCR0_COM00);
     e00:	a3 e5       	ldi	r26, 0x53	; 83
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	e3 e5       	ldi	r30, 0x53	; 83
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	80 61       	ori	r24, 0x10	; 16
     e0c:	8c 93       	st	X, r24
	Set_Bit(TCCR0_REG,TCCR0_COM01);
     e0e:	a3 e5       	ldi	r26, 0x53	; 83
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	e3 e5       	ldi	r30, 0x53	; 83
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	80 62       	ori	r24, 0x20	; 32
     e1a:	8c 93       	st	X, r24
	Clr_Bit(TCCR0_REG,TCCR0_CS01);
	Clr_Bit(TCCR0_REG,TCCR0_CS02);


#elif Timer_prescaler == No_prescaler
	Set_Bit(TCCR0_REG,TCCR0_CS00);
     e1c:	a3 e5       	ldi	r26, 0x53	; 83
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	e3 e5       	ldi	r30, 0x53	; 83
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	81 60       	ori	r24, 0x01	; 1
     e28:	8c 93       	st	X, r24
	Clr_Bit(TCCR0_REG,TCCR0_CS01);
     e2a:	a3 e5       	ldi	r26, 0x53	; 83
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	e3 e5       	ldi	r30, 0x53	; 83
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	8d 7f       	andi	r24, 0xFD	; 253
     e36:	8c 93       	st	X, r24
	Clr_Bit(TCCR0_REG,TCCR0_CS02);
     e38:	a3 e5       	ldi	r26, 0x53	; 83
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	e3 e5       	ldi	r30, 0x53	; 83
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	8b 7f       	andi	r24, 0xFB	; 251
     e44:	8c 93       	st	X, r24





}
     e46:	cf 91       	pop	r28
     e48:	df 91       	pop	r29
     e4a:	08 95       	ret

00000e4c <PWM0_init>:



// for timer 0
void PWM0_init()
{
     e4c:	df 93       	push	r29
     e4e:	cf 93       	push	r28
     e50:	cd b7       	in	r28, 0x3d	; 61
     e52:	de b7       	in	r29, 0x3e	; 62
	/*set fast PWM mode with non-inverted output*/
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS00);
     e54:	e3 e5       	ldi	r30, 0x53	; 83
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	89 e6       	ldi	r24, 0x69	; 105
     e5a:	80 83       	st	Z, r24
	DDRB|=(1<<PB3);  /*set OC0 pin as output*/
     e5c:	a7 e3       	ldi	r26, 0x37	; 55
     e5e:	b0 e0       	ldi	r27, 0x00	; 0
     e60:	e7 e3       	ldi	r30, 0x37	; 55
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	80 81       	ld	r24, Z
     e66:	88 60       	ori	r24, 0x08	; 8
     e68:	8c 93       	st	X, r24
}
     e6a:	cf 91       	pop	r28
     e6c:	df 91       	pop	r29
     e6e:	08 95       	ret

00000e70 <PWM0_dutycycle>:
void PWM0_dutycycle(u16 duty)
{
     e70:	df 93       	push	r29
     e72:	cf 93       	push	r28
     e74:	00 d0       	rcall	.+0      	; 0xe76 <PWM0_dutycycle+0x6>
     e76:	cd b7       	in	r28, 0x3d	; 61
     e78:	de b7       	in	r29, 0x3e	; 62
     e7a:	9a 83       	std	Y+2, r25	; 0x02
     e7c:	89 83       	std	Y+1, r24	; 0x01
	OCR0=duty;
     e7e:	ec e5       	ldi	r30, 0x5C	; 92
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	89 81       	ldd	r24, Y+1	; 0x01
     e84:	80 83       	st	Z, r24
}
     e86:	0f 90       	pop	r0
     e88:	0f 90       	pop	r0
     e8a:	cf 91       	pop	r28
     e8c:	df 91       	pop	r29
     e8e:	08 95       	ret

00000e90 <PWM1_init>:


// for timer1
void PWM1_init(void)
{
     e90:	df 93       	push	r29
     e92:	cf 93       	push	r28
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62

	    // Clear TCCR1A and TCCR1B registers
	    TCCR1A = 0;
     e98:	ef e4       	ldi	r30, 0x4F	; 79
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	10 82       	st	Z, r1
	    TCCR1B = 0;
     e9e:	ee e4       	ldi	r30, 0x4E	; 78
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	10 82       	st	Z, r1

	    // Set Fast PWM mode with non-inverted output on channels A and B
	    TCCR1A |= (1 << WGM10) | (1 << WGM11) | (1 << COM1A1) | (1 << COM1B1);
     ea4:	af e4       	ldi	r26, 0x4F	; 79
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	ef e4       	ldi	r30, 0x4F	; 79
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	83 6a       	ori	r24, 0xA3	; 163
     eb0:	8c 93       	st	X, r24
	    TCCR1B |= (1 << WGM12) |  (1 << CS10);
     eb2:	ae e4       	ldi	r26, 0x4E	; 78
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	ee e4       	ldi	r30, 0x4E	; 78
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 81       	ld	r24, Z
     ebc:	89 60       	ori	r24, 0x09	; 9
     ebe:	8c 93       	st	X, r24

	    // Set PD4 and PD5 as output
	    DDRD |= (1 << PD4) | (1 << PD5);
     ec0:	a1 e3       	ldi	r26, 0x31	; 49
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	e1 e3       	ldi	r30, 0x31	; 49
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	80 63       	ori	r24, 0x30	; 48
     ecc:	8c 93       	st	X, r24



}
     ece:	cf 91       	pop	r28
     ed0:	df 91       	pop	r29
     ed2:	08 95       	ret

00000ed4 <PWM1_Adutycycle>:

void PWM1_Adutycycle(u16 duty) {
     ed4:	df 93       	push	r29
     ed6:	cf 93       	push	r28
     ed8:	00 d0       	rcall	.+0      	; 0xeda <PWM1_Adutycycle+0x6>
     eda:	cd b7       	in	r28, 0x3d	; 61
     edc:	de b7       	in	r29, 0x3e	; 62
     ede:	9a 83       	std	Y+2, r25	; 0x02
     ee0:	89 83       	std	Y+1, r24	; 0x01
    // Set duty cycle for channel A (OCR1A)
    OCR1AH = (u8)(duty >> 8); // High byte
     ee2:	eb e4       	ldi	r30, 0x4B	; 75
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	89 81       	ldd	r24, Y+1	; 0x01
     ee8:	9a 81       	ldd	r25, Y+2	; 0x02
     eea:	89 2f       	mov	r24, r25
     eec:	99 27       	eor	r25, r25
     eee:	80 83       	st	Z, r24
    OCR1AL = (u8)duty;        // Low byte
     ef0:	ea e4       	ldi	r30, 0x4A	; 74
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	89 81       	ldd	r24, Y+1	; 0x01
     ef6:	80 83       	st	Z, r24
}
     ef8:	0f 90       	pop	r0
     efa:	0f 90       	pop	r0
     efc:	cf 91       	pop	r28
     efe:	df 91       	pop	r29
     f00:	08 95       	ret

00000f02 <PWM1_Bdutycycle>:

void PWM1_Bdutycycle(u16 duty) {
     f02:	df 93       	push	r29
     f04:	cf 93       	push	r28
     f06:	00 d0       	rcall	.+0      	; 0xf08 <PWM1_Bdutycycle+0x6>
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
     f0c:	9a 83       	std	Y+2, r25	; 0x02
     f0e:	89 83       	std	Y+1, r24	; 0x01
    // Set duty cycle for channel B (OCR1B)
    OCR1BH = (u8)(duty >> 8); // High byte
     f10:	e9 e4       	ldi	r30, 0x49	; 73
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	89 81       	ldd	r24, Y+1	; 0x01
     f16:	9a 81       	ldd	r25, Y+2	; 0x02
     f18:	89 2f       	mov	r24, r25
     f1a:	99 27       	eor	r25, r25
     f1c:	80 83       	st	Z, r24
    OCR1BL = (u8)duty;        // Low byte
     f1e:	e8 e4       	ldi	r30, 0x48	; 72
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	89 81       	ldd	r24, Y+1	; 0x01
     f24:	80 83       	st	Z, r24
}
     f26:	0f 90       	pop	r0
     f28:	0f 90       	pop	r0
     f2a:	cf 91       	pop	r28
     f2c:	df 91       	pop	r29
     f2e:	08 95       	ret

00000f30 <EXT_ISR0voidInit>:
#include "../../Services/Bit_Math.h"



void EXT_ISR0voidInit(void)
{
     f30:	df 93       	push	r29
     f32:	cf 93       	push	r28
     f34:	cd b7       	in	r28, 0x3d	; 61
     f36:	de b7       	in	r29, 0x3e	; 62
#if ISR0_MODE ==ANY_CHANGE
	// isr0 is on any_change mode
	Clr_Bit(MCUCR_REG,MCUCR_ISC01); // the mcuct is for the trigger option
     f38:	a5 e5       	ldi	r26, 0x55	; 85
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	e5 e5       	ldi	r30, 0x55	; 85
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	8d 7f       	andi	r24, 0xFD	; 253
     f44:	8c 93       	st	X, r24
	Set_Bit(MCUCR_REG,MCUCR_ISC00);
     f46:	a5 e5       	ldi	r26, 0x55	; 85
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e5 e5       	ldi	r30, 0x55	; 85
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	81 60       	ori	r24, 0x01	; 1
     f52:	8c 93       	st	X, r24
	Clr_Bit(MCUCR_REG,MCUCR_ISC00);

#endif

#if ISR0_STATE==ENABLE
	Set_Bit(GICR_REG,GICR_INT0);
     f54:	ab e5       	ldi	r26, 0x5B	; 91
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	eb e5       	ldi	r30, 0x5B	; 91
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	80 64       	ori	r24, 0x40	; 64
     f60:	8c 93       	st	X, r24
#elif ISR0_STATE==DISABLE
	Clr_Bit(GICR_REG,GICR_INT0);
#endif

}
     f62:	cf 91       	pop	r28
     f64:	df 91       	pop	r29
     f66:	08 95       	ret

00000f68 <EXT_ISR1voidInit>:
void EXT_ISR1voidInit(void)
{
     f68:	df 93       	push	r29
     f6a:	cf 93       	push	r28
     f6c:	cd b7       	in	r28, 0x3d	; 61
     f6e:	de b7       	in	r29, 0x3e	; 62

#if ISR1_MODE ==ANY_CHANGE
	// isr0 is on any_change mode
	Clr_Bit(MCUCR_REG,MCUCR_ISC11);
     f70:	a5 e5       	ldi	r26, 0x55	; 85
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	e5 e5       	ldi	r30, 0x55	; 85
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	87 7f       	andi	r24, 0xF7	; 247
     f7c:	8c 93       	st	X, r24
	Set_Bit(MCUCR_REG,MCUCR_ISC10);
     f7e:	a5 e5       	ldi	r26, 0x55	; 85
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	e5 e5       	ldi	r30, 0x55	; 85
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	84 60       	ori	r24, 0x04	; 4
     f8a:	8c 93       	st	X, r24
	Clr_Bit(MCUCR_REG,MCUCR_ISC10);

#endif


}
     f8c:	cf 91       	pop	r28
     f8e:	df 91       	pop	r29
     f90:	08 95       	ret

00000f92 <EXT_ISR2voidInit>:
void EXT_ISR2voidInit(void) // is a level triggered int via isc2

{
     f92:	df 93       	push	r29
     f94:	cf 93       	push	r28
     f96:	cd b7       	in	r28, 0x3d	; 61
     f98:	de b7       	in	r29, 0x3e	; 62
#if ISR2_MODE == FALLING
	Clr_Bit(MCUCSR_REG,MCUCSR_ISC2);
     f9a:	a4 e5       	ldi	r26, 0x54	; 84
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	e4 e5       	ldi	r30, 0x54	; 84
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	8f 7b       	andi	r24, 0xBF	; 191
     fa6:	8c 93       	st	X, r24


#endif


}
     fa8:	cf 91       	pop	r28
     faa:	df 91       	pop	r29
     fac:	08 95       	ret

00000fae <EXT_GIE_STATEvoidInit>:


void EXT_GIE_STATEvoidInit(void)
{
     fae:	df 93       	push	r29
     fb0:	cf 93       	push	r28
     fb2:	cd b7       	in	r28, 0x3d	; 61
     fb4:	de b7       	in	r29, 0x3e	; 62
	#if GIE_STATE==ENABLE
		Set_Bit(SREG_REG,SREG_I);
     fb6:	af e5       	ldi	r26, 0x5F	; 95
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	ef e5       	ldi	r30, 0x5F	; 95
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	80 68       	ori	r24, 0x80	; 128
     fc2:	8c 93       	st	X, r24
	#elif GIE_STATE==DISABLE
		Clr_Bit(SREG_REG,SREG_I);
	#endif
}
     fc4:	cf 91       	pop	r28
     fc6:	df 91       	pop	r29
     fc8:	08 95       	ret

00000fca <DIO_voidSetPinDirection>:

#include "DIO_Private.h"

/**/
void DIO_voidSetPinDirection(u8 Copy_Port,u8 Copy_Pin,u8 Copy_Direction)
{
     fca:	df 93       	push	r29
     fcc:	cf 93       	push	r28
     fce:	cd b7       	in	r28, 0x3d	; 61
     fd0:	de b7       	in	r29, 0x3e	; 62
     fd2:	27 97       	sbiw	r28, 0x07	; 7
     fd4:	0f b6       	in	r0, 0x3f	; 63
     fd6:	f8 94       	cli
     fd8:	de bf       	out	0x3e, r29	; 62
     fda:	0f be       	out	0x3f, r0	; 63
     fdc:	cd bf       	out	0x3d, r28	; 61
     fde:	89 83       	std	Y+1, r24	; 0x01
     fe0:	6a 83       	std	Y+2, r22	; 0x02
     fe2:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_Direction == Output)
     fe4:	8b 81       	ldd	r24, Y+3	; 0x03
     fe6:	88 23       	and	r24, r24
     fe8:	09 f0       	breq	.+2      	; 0xfec <DIO_voidSetPinDirection+0x22>
     fea:	6f c0       	rjmp	.+222    	; 0x10ca <DIO_voidSetPinDirection+0x100>
	{
		switch(Copy_Port)
     fec:	89 81       	ldd	r24, Y+1	; 0x01
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	3f 83       	std	Y+7, r19	; 0x07
     ff4:	2e 83       	std	Y+6, r18	; 0x06
     ff6:	8e 81       	ldd	r24, Y+6	; 0x06
     ff8:	9f 81       	ldd	r25, Y+7	; 0x07
     ffa:	81 30       	cpi	r24, 0x01	; 1
     ffc:	91 05       	cpc	r25, r1
     ffe:	49 f1       	breq	.+82     	; 0x1052 <DIO_voidSetPinDirection+0x88>
    1000:	2e 81       	ldd	r18, Y+6	; 0x06
    1002:	3f 81       	ldd	r19, Y+7	; 0x07
    1004:	22 30       	cpi	r18, 0x02	; 2
    1006:	31 05       	cpc	r19, r1
    1008:	2c f4       	brge	.+10     	; 0x1014 <DIO_voidSetPinDirection+0x4a>
    100a:	8e 81       	ldd	r24, Y+6	; 0x06
    100c:	9f 81       	ldd	r25, Y+7	; 0x07
    100e:	00 97       	sbiw	r24, 0x00	; 0
    1010:	61 f0       	breq	.+24     	; 0x102a <DIO_voidSetPinDirection+0x60>
    1012:	d2 c0       	rjmp	.+420    	; 0x11b8 <DIO_voidSetPinDirection+0x1ee>
    1014:	2e 81       	ldd	r18, Y+6	; 0x06
    1016:	3f 81       	ldd	r19, Y+7	; 0x07
    1018:	22 30       	cpi	r18, 0x02	; 2
    101a:	31 05       	cpc	r19, r1
    101c:	71 f1       	breq	.+92     	; 0x107a <DIO_voidSetPinDirection+0xb0>
    101e:	8e 81       	ldd	r24, Y+6	; 0x06
    1020:	9f 81       	ldd	r25, Y+7	; 0x07
    1022:	83 30       	cpi	r24, 0x03	; 3
    1024:	91 05       	cpc	r25, r1
    1026:	e9 f1       	breq	.+122    	; 0x10a2 <DIO_voidSetPinDirection+0xd8>
    1028:	c7 c0       	rjmp	.+398    	; 0x11b8 <DIO_voidSetPinDirection+0x1ee>
		{
		case PORT_A : Set_Bit(DDRA_REG,Copy_Pin); break;
    102a:	aa e3       	ldi	r26, 0x3A	; 58
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	ea e3       	ldi	r30, 0x3A	; 58
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	48 2f       	mov	r20, r24
    1036:	8a 81       	ldd	r24, Y+2	; 0x02
    1038:	28 2f       	mov	r18, r24
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	02 2e       	mov	r0, r18
    1042:	02 c0       	rjmp	.+4      	; 0x1048 <DIO_voidSetPinDirection+0x7e>
    1044:	88 0f       	add	r24, r24
    1046:	99 1f       	adc	r25, r25
    1048:	0a 94       	dec	r0
    104a:	e2 f7       	brpl	.-8      	; 0x1044 <DIO_voidSetPinDirection+0x7a>
    104c:	84 2b       	or	r24, r20
    104e:	8c 93       	st	X, r24
    1050:	b3 c0       	rjmp	.+358    	; 0x11b8 <DIO_voidSetPinDirection+0x1ee>
		case PORT_B : Set_Bit(DDRB_REG,Copy_Pin); break;
    1052:	a7 e3       	ldi	r26, 0x37	; 55
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	e7 e3       	ldi	r30, 0x37	; 55
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	48 2f       	mov	r20, r24
    105e:	8a 81       	ldd	r24, Y+2	; 0x02
    1060:	28 2f       	mov	r18, r24
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	02 2e       	mov	r0, r18
    106a:	02 c0       	rjmp	.+4      	; 0x1070 <DIO_voidSetPinDirection+0xa6>
    106c:	88 0f       	add	r24, r24
    106e:	99 1f       	adc	r25, r25
    1070:	0a 94       	dec	r0
    1072:	e2 f7       	brpl	.-8      	; 0x106c <DIO_voidSetPinDirection+0xa2>
    1074:	84 2b       	or	r24, r20
    1076:	8c 93       	st	X, r24
    1078:	9f c0       	rjmp	.+318    	; 0x11b8 <DIO_voidSetPinDirection+0x1ee>
		case PORT_C : Set_Bit(DDRC_REG,Copy_Pin); break;
    107a:	a4 e3       	ldi	r26, 0x34	; 52
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	e4 e3       	ldi	r30, 0x34	; 52
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	48 2f       	mov	r20, r24
    1086:	8a 81       	ldd	r24, Y+2	; 0x02
    1088:	28 2f       	mov	r18, r24
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	02 2e       	mov	r0, r18
    1092:	02 c0       	rjmp	.+4      	; 0x1098 <DIO_voidSetPinDirection+0xce>
    1094:	88 0f       	add	r24, r24
    1096:	99 1f       	adc	r25, r25
    1098:	0a 94       	dec	r0
    109a:	e2 f7       	brpl	.-8      	; 0x1094 <DIO_voidSetPinDirection+0xca>
    109c:	84 2b       	or	r24, r20
    109e:	8c 93       	st	X, r24
    10a0:	8b c0       	rjmp	.+278    	; 0x11b8 <DIO_voidSetPinDirection+0x1ee>
		case PORT_D : Set_Bit(DDRD_REG,Copy_Pin); break;
    10a2:	a1 e3       	ldi	r26, 0x31	; 49
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	e1 e3       	ldi	r30, 0x31	; 49
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	48 2f       	mov	r20, r24
    10ae:	8a 81       	ldd	r24, Y+2	; 0x02
    10b0:	28 2f       	mov	r18, r24
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	02 2e       	mov	r0, r18
    10ba:	02 c0       	rjmp	.+4      	; 0x10c0 <DIO_voidSetPinDirection+0xf6>
    10bc:	88 0f       	add	r24, r24
    10be:	99 1f       	adc	r25, r25
    10c0:	0a 94       	dec	r0
    10c2:	e2 f7       	brpl	.-8      	; 0x10bc <DIO_voidSetPinDirection+0xf2>
    10c4:	84 2b       	or	r24, r20
    10c6:	8c 93       	st	X, r24
    10c8:	77 c0       	rjmp	.+238    	; 0x11b8 <DIO_voidSetPinDirection+0x1ee>
		}
	}
	else if(Copy_Direction == Input)
    10ca:	8b 81       	ldd	r24, Y+3	; 0x03
    10cc:	81 30       	cpi	r24, 0x01	; 1
    10ce:	09 f0       	breq	.+2      	; 0x10d2 <DIO_voidSetPinDirection+0x108>
    10d0:	73 c0       	rjmp	.+230    	; 0x11b8 <DIO_voidSetPinDirection+0x1ee>
	{
		switch(Copy_Port)
    10d2:	89 81       	ldd	r24, Y+1	; 0x01
    10d4:	28 2f       	mov	r18, r24
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	3d 83       	std	Y+5, r19	; 0x05
    10da:	2c 83       	std	Y+4, r18	; 0x04
    10dc:	8c 81       	ldd	r24, Y+4	; 0x04
    10de:	9d 81       	ldd	r25, Y+5	; 0x05
    10e0:	81 30       	cpi	r24, 0x01	; 1
    10e2:	91 05       	cpc	r25, r1
    10e4:	59 f1       	breq	.+86     	; 0x113c <DIO_voidSetPinDirection+0x172>
    10e6:	2c 81       	ldd	r18, Y+4	; 0x04
    10e8:	3d 81       	ldd	r19, Y+5	; 0x05
    10ea:	22 30       	cpi	r18, 0x02	; 2
    10ec:	31 05       	cpc	r19, r1
    10ee:	2c f4       	brge	.+10     	; 0x10fa <DIO_voidSetPinDirection+0x130>
    10f0:	8c 81       	ldd	r24, Y+4	; 0x04
    10f2:	9d 81       	ldd	r25, Y+5	; 0x05
    10f4:	00 97       	sbiw	r24, 0x00	; 0
    10f6:	69 f0       	breq	.+26     	; 0x1112 <DIO_voidSetPinDirection+0x148>
    10f8:	5f c0       	rjmp	.+190    	; 0x11b8 <DIO_voidSetPinDirection+0x1ee>
    10fa:	2c 81       	ldd	r18, Y+4	; 0x04
    10fc:	3d 81       	ldd	r19, Y+5	; 0x05
    10fe:	22 30       	cpi	r18, 0x02	; 2
    1100:	31 05       	cpc	r19, r1
    1102:	89 f1       	breq	.+98     	; 0x1166 <DIO_voidSetPinDirection+0x19c>
    1104:	8c 81       	ldd	r24, Y+4	; 0x04
    1106:	9d 81       	ldd	r25, Y+5	; 0x05
    1108:	83 30       	cpi	r24, 0x03	; 3
    110a:	91 05       	cpc	r25, r1
    110c:	09 f4       	brne	.+2      	; 0x1110 <DIO_voidSetPinDirection+0x146>
    110e:	40 c0       	rjmp	.+128    	; 0x1190 <DIO_voidSetPinDirection+0x1c6>
    1110:	53 c0       	rjmp	.+166    	; 0x11b8 <DIO_voidSetPinDirection+0x1ee>
		{
		case PORT_A : Clr_Bit(DDRA_REG,Copy_Pin); break;
    1112:	aa e3       	ldi	r26, 0x3A	; 58
    1114:	b0 e0       	ldi	r27, 0x00	; 0
    1116:	ea e3       	ldi	r30, 0x3A	; 58
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	48 2f       	mov	r20, r24
    111e:	8a 81       	ldd	r24, Y+2	; 0x02
    1120:	28 2f       	mov	r18, r24
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	02 2e       	mov	r0, r18
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <DIO_voidSetPinDirection+0x166>
    112c:	88 0f       	add	r24, r24
    112e:	99 1f       	adc	r25, r25
    1130:	0a 94       	dec	r0
    1132:	e2 f7       	brpl	.-8      	; 0x112c <DIO_voidSetPinDirection+0x162>
    1134:	80 95       	com	r24
    1136:	84 23       	and	r24, r20
    1138:	8c 93       	st	X, r24
    113a:	3e c0       	rjmp	.+124    	; 0x11b8 <DIO_voidSetPinDirection+0x1ee>
		case PORT_B : Clr_Bit(DDRB_REG,Copy_Pin); break;
    113c:	a7 e3       	ldi	r26, 0x37	; 55
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	e7 e3       	ldi	r30, 0x37	; 55
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	48 2f       	mov	r20, r24
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	02 2e       	mov	r0, r18
    1154:	02 c0       	rjmp	.+4      	; 0x115a <DIO_voidSetPinDirection+0x190>
    1156:	88 0f       	add	r24, r24
    1158:	99 1f       	adc	r25, r25
    115a:	0a 94       	dec	r0
    115c:	e2 f7       	brpl	.-8      	; 0x1156 <DIO_voidSetPinDirection+0x18c>
    115e:	80 95       	com	r24
    1160:	84 23       	and	r24, r20
    1162:	8c 93       	st	X, r24
    1164:	29 c0       	rjmp	.+82     	; 0x11b8 <DIO_voidSetPinDirection+0x1ee>
		case PORT_C : Clr_Bit(DDRC_REG,Copy_Pin); break;
    1166:	a4 e3       	ldi	r26, 0x34	; 52
    1168:	b0 e0       	ldi	r27, 0x00	; 0
    116a:	e4 e3       	ldi	r30, 0x34	; 52
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	48 2f       	mov	r20, r24
    1172:	8a 81       	ldd	r24, Y+2	; 0x02
    1174:	28 2f       	mov	r18, r24
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	02 2e       	mov	r0, r18
    117e:	02 c0       	rjmp	.+4      	; 0x1184 <DIO_voidSetPinDirection+0x1ba>
    1180:	88 0f       	add	r24, r24
    1182:	99 1f       	adc	r25, r25
    1184:	0a 94       	dec	r0
    1186:	e2 f7       	brpl	.-8      	; 0x1180 <DIO_voidSetPinDirection+0x1b6>
    1188:	80 95       	com	r24
    118a:	84 23       	and	r24, r20
    118c:	8c 93       	st	X, r24
    118e:	14 c0       	rjmp	.+40     	; 0x11b8 <DIO_voidSetPinDirection+0x1ee>
		case PORT_D : Clr_Bit(DDRD_REG,Copy_Pin); break;
    1190:	a1 e3       	ldi	r26, 0x31	; 49
    1192:	b0 e0       	ldi	r27, 0x00	; 0
    1194:	e1 e3       	ldi	r30, 0x31	; 49
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	80 81       	ld	r24, Z
    119a:	48 2f       	mov	r20, r24
    119c:	8a 81       	ldd	r24, Y+2	; 0x02
    119e:	28 2f       	mov	r18, r24
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	02 2e       	mov	r0, r18
    11a8:	02 c0       	rjmp	.+4      	; 0x11ae <DIO_voidSetPinDirection+0x1e4>
    11aa:	88 0f       	add	r24, r24
    11ac:	99 1f       	adc	r25, r25
    11ae:	0a 94       	dec	r0
    11b0:	e2 f7       	brpl	.-8      	; 0x11aa <DIO_voidSetPinDirection+0x1e0>
    11b2:	80 95       	com	r24
    11b4:	84 23       	and	r24, r20
    11b6:	8c 93       	st	X, r24
		}
	}
}
    11b8:	27 96       	adiw	r28, 0x07	; 7
    11ba:	0f b6       	in	r0, 0x3f	; 63
    11bc:	f8 94       	cli
    11be:	de bf       	out	0x3e, r29	; 62
    11c0:	0f be       	out	0x3f, r0	; 63
    11c2:	cd bf       	out	0x3d, r28	; 61
    11c4:	cf 91       	pop	r28
    11c6:	df 91       	pop	r29
    11c8:	08 95       	ret

000011ca <DIO_voidSetPinValue>:

/* */
void DIO_voidSetPinValue(u8 Copy_Port, u8 Copy_Pin, u8 Copy_Value)
{
    11ca:	df 93       	push	r29
    11cc:	cf 93       	push	r28
    11ce:	cd b7       	in	r28, 0x3d	; 61
    11d0:	de b7       	in	r29, 0x3e	; 62
    11d2:	27 97       	sbiw	r28, 0x07	; 7
    11d4:	0f b6       	in	r0, 0x3f	; 63
    11d6:	f8 94       	cli
    11d8:	de bf       	out	0x3e, r29	; 62
    11da:	0f be       	out	0x3f, r0	; 63
    11dc:	cd bf       	out	0x3d, r28	; 61
    11de:	89 83       	std	Y+1, r24	; 0x01
    11e0:	6a 83       	std	Y+2, r22	; 0x02
    11e2:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_Value == HIGH)
    11e4:	8b 81       	ldd	r24, Y+3	; 0x03
    11e6:	88 23       	and	r24, r24
    11e8:	09 f0       	breq	.+2      	; 0x11ec <DIO_voidSetPinValue+0x22>
    11ea:	6f c0       	rjmp	.+222    	; 0x12ca <DIO_voidSetPinValue+0x100>
	{
		switch(Copy_Port)
    11ec:	89 81       	ldd	r24, Y+1	; 0x01
    11ee:	28 2f       	mov	r18, r24
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	3f 83       	std	Y+7, r19	; 0x07
    11f4:	2e 83       	std	Y+6, r18	; 0x06
    11f6:	8e 81       	ldd	r24, Y+6	; 0x06
    11f8:	9f 81       	ldd	r25, Y+7	; 0x07
    11fa:	81 30       	cpi	r24, 0x01	; 1
    11fc:	91 05       	cpc	r25, r1
    11fe:	49 f1       	breq	.+82     	; 0x1252 <DIO_voidSetPinValue+0x88>
    1200:	2e 81       	ldd	r18, Y+6	; 0x06
    1202:	3f 81       	ldd	r19, Y+7	; 0x07
    1204:	22 30       	cpi	r18, 0x02	; 2
    1206:	31 05       	cpc	r19, r1
    1208:	2c f4       	brge	.+10     	; 0x1214 <DIO_voidSetPinValue+0x4a>
    120a:	8e 81       	ldd	r24, Y+6	; 0x06
    120c:	9f 81       	ldd	r25, Y+7	; 0x07
    120e:	00 97       	sbiw	r24, 0x00	; 0
    1210:	61 f0       	breq	.+24     	; 0x122a <DIO_voidSetPinValue+0x60>
    1212:	d2 c0       	rjmp	.+420    	; 0x13b8 <DIO_voidSetPinValue+0x1ee>
    1214:	2e 81       	ldd	r18, Y+6	; 0x06
    1216:	3f 81       	ldd	r19, Y+7	; 0x07
    1218:	22 30       	cpi	r18, 0x02	; 2
    121a:	31 05       	cpc	r19, r1
    121c:	71 f1       	breq	.+92     	; 0x127a <DIO_voidSetPinValue+0xb0>
    121e:	8e 81       	ldd	r24, Y+6	; 0x06
    1220:	9f 81       	ldd	r25, Y+7	; 0x07
    1222:	83 30       	cpi	r24, 0x03	; 3
    1224:	91 05       	cpc	r25, r1
    1226:	e9 f1       	breq	.+122    	; 0x12a2 <DIO_voidSetPinValue+0xd8>
    1228:	c7 c0       	rjmp	.+398    	; 0x13b8 <DIO_voidSetPinValue+0x1ee>
		{
		case PORT_A : Set_Bit(PORTA_REG,Copy_Pin); break;
    122a:	ab e3       	ldi	r26, 0x3B	; 59
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	eb e3       	ldi	r30, 0x3B	; 59
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	48 2f       	mov	r20, r24
    1236:	8a 81       	ldd	r24, Y+2	; 0x02
    1238:	28 2f       	mov	r18, r24
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	02 2e       	mov	r0, r18
    1242:	02 c0       	rjmp	.+4      	; 0x1248 <DIO_voidSetPinValue+0x7e>
    1244:	88 0f       	add	r24, r24
    1246:	99 1f       	adc	r25, r25
    1248:	0a 94       	dec	r0
    124a:	e2 f7       	brpl	.-8      	; 0x1244 <DIO_voidSetPinValue+0x7a>
    124c:	84 2b       	or	r24, r20
    124e:	8c 93       	st	X, r24
    1250:	b3 c0       	rjmp	.+358    	; 0x13b8 <DIO_voidSetPinValue+0x1ee>
		case PORT_B : Set_Bit(PORTB_REG,Copy_Pin); break;
    1252:	a8 e3       	ldi	r26, 0x38	; 56
    1254:	b0 e0       	ldi	r27, 0x00	; 0
    1256:	e8 e3       	ldi	r30, 0x38	; 56
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	48 2f       	mov	r20, r24
    125e:	8a 81       	ldd	r24, Y+2	; 0x02
    1260:	28 2f       	mov	r18, r24
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	02 2e       	mov	r0, r18
    126a:	02 c0       	rjmp	.+4      	; 0x1270 <DIO_voidSetPinValue+0xa6>
    126c:	88 0f       	add	r24, r24
    126e:	99 1f       	adc	r25, r25
    1270:	0a 94       	dec	r0
    1272:	e2 f7       	brpl	.-8      	; 0x126c <DIO_voidSetPinValue+0xa2>
    1274:	84 2b       	or	r24, r20
    1276:	8c 93       	st	X, r24
    1278:	9f c0       	rjmp	.+318    	; 0x13b8 <DIO_voidSetPinValue+0x1ee>
		case PORT_C : Set_Bit(PORTC_REG,Copy_Pin); break;
    127a:	a5 e3       	ldi	r26, 0x35	; 53
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	e5 e3       	ldi	r30, 0x35	; 53
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 81       	ld	r24, Z
    1284:	48 2f       	mov	r20, r24
    1286:	8a 81       	ldd	r24, Y+2	; 0x02
    1288:	28 2f       	mov	r18, r24
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	02 2e       	mov	r0, r18
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <DIO_voidSetPinValue+0xce>
    1294:	88 0f       	add	r24, r24
    1296:	99 1f       	adc	r25, r25
    1298:	0a 94       	dec	r0
    129a:	e2 f7       	brpl	.-8      	; 0x1294 <DIO_voidSetPinValue+0xca>
    129c:	84 2b       	or	r24, r20
    129e:	8c 93       	st	X, r24
    12a0:	8b c0       	rjmp	.+278    	; 0x13b8 <DIO_voidSetPinValue+0x1ee>
		case PORT_D : Set_Bit(PORTD_REG,Copy_Pin); break;
    12a2:	a2 e3       	ldi	r26, 0x32	; 50
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	e2 e3       	ldi	r30, 0x32	; 50
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	48 2f       	mov	r20, r24
    12ae:	8a 81       	ldd	r24, Y+2	; 0x02
    12b0:	28 2f       	mov	r18, r24
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	02 2e       	mov	r0, r18
    12ba:	02 c0       	rjmp	.+4      	; 0x12c0 <DIO_voidSetPinValue+0xf6>
    12bc:	88 0f       	add	r24, r24
    12be:	99 1f       	adc	r25, r25
    12c0:	0a 94       	dec	r0
    12c2:	e2 f7       	brpl	.-8      	; 0x12bc <DIO_voidSetPinValue+0xf2>
    12c4:	84 2b       	or	r24, r20
    12c6:	8c 93       	st	X, r24
    12c8:	77 c0       	rjmp	.+238    	; 0x13b8 <DIO_voidSetPinValue+0x1ee>
		}
	}
	else if(Copy_Value == LOW)
    12ca:	8b 81       	ldd	r24, Y+3	; 0x03
    12cc:	81 30       	cpi	r24, 0x01	; 1
    12ce:	09 f0       	breq	.+2      	; 0x12d2 <DIO_voidSetPinValue+0x108>
    12d0:	73 c0       	rjmp	.+230    	; 0x13b8 <DIO_voidSetPinValue+0x1ee>
	{
		switch(Copy_Port)
    12d2:	89 81       	ldd	r24, Y+1	; 0x01
    12d4:	28 2f       	mov	r18, r24
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	3d 83       	std	Y+5, r19	; 0x05
    12da:	2c 83       	std	Y+4, r18	; 0x04
    12dc:	8c 81       	ldd	r24, Y+4	; 0x04
    12de:	9d 81       	ldd	r25, Y+5	; 0x05
    12e0:	81 30       	cpi	r24, 0x01	; 1
    12e2:	91 05       	cpc	r25, r1
    12e4:	59 f1       	breq	.+86     	; 0x133c <DIO_voidSetPinValue+0x172>
    12e6:	2c 81       	ldd	r18, Y+4	; 0x04
    12e8:	3d 81       	ldd	r19, Y+5	; 0x05
    12ea:	22 30       	cpi	r18, 0x02	; 2
    12ec:	31 05       	cpc	r19, r1
    12ee:	2c f4       	brge	.+10     	; 0x12fa <DIO_voidSetPinValue+0x130>
    12f0:	8c 81       	ldd	r24, Y+4	; 0x04
    12f2:	9d 81       	ldd	r25, Y+5	; 0x05
    12f4:	00 97       	sbiw	r24, 0x00	; 0
    12f6:	69 f0       	breq	.+26     	; 0x1312 <DIO_voidSetPinValue+0x148>
    12f8:	5f c0       	rjmp	.+190    	; 0x13b8 <DIO_voidSetPinValue+0x1ee>
    12fa:	2c 81       	ldd	r18, Y+4	; 0x04
    12fc:	3d 81       	ldd	r19, Y+5	; 0x05
    12fe:	22 30       	cpi	r18, 0x02	; 2
    1300:	31 05       	cpc	r19, r1
    1302:	89 f1       	breq	.+98     	; 0x1366 <DIO_voidSetPinValue+0x19c>
    1304:	8c 81       	ldd	r24, Y+4	; 0x04
    1306:	9d 81       	ldd	r25, Y+5	; 0x05
    1308:	83 30       	cpi	r24, 0x03	; 3
    130a:	91 05       	cpc	r25, r1
    130c:	09 f4       	brne	.+2      	; 0x1310 <DIO_voidSetPinValue+0x146>
    130e:	40 c0       	rjmp	.+128    	; 0x1390 <DIO_voidSetPinValue+0x1c6>
    1310:	53 c0       	rjmp	.+166    	; 0x13b8 <DIO_voidSetPinValue+0x1ee>
		{
		case PORT_A : Clr_Bit(PORTA_REG,Copy_Pin); break;
    1312:	ab e3       	ldi	r26, 0x3B	; 59
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	eb e3       	ldi	r30, 0x3B	; 59
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	48 2f       	mov	r20, r24
    131e:	8a 81       	ldd	r24, Y+2	; 0x02
    1320:	28 2f       	mov	r18, r24
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	02 2e       	mov	r0, r18
    132a:	02 c0       	rjmp	.+4      	; 0x1330 <DIO_voidSetPinValue+0x166>
    132c:	88 0f       	add	r24, r24
    132e:	99 1f       	adc	r25, r25
    1330:	0a 94       	dec	r0
    1332:	e2 f7       	brpl	.-8      	; 0x132c <DIO_voidSetPinValue+0x162>
    1334:	80 95       	com	r24
    1336:	84 23       	and	r24, r20
    1338:	8c 93       	st	X, r24
    133a:	3e c0       	rjmp	.+124    	; 0x13b8 <DIO_voidSetPinValue+0x1ee>
		case PORT_B : Clr_Bit(PORTB_REG,Copy_Pin); break;
    133c:	a8 e3       	ldi	r26, 0x38	; 56
    133e:	b0 e0       	ldi	r27, 0x00	; 0
    1340:	e8 e3       	ldi	r30, 0x38	; 56
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	80 81       	ld	r24, Z
    1346:	48 2f       	mov	r20, r24
    1348:	8a 81       	ldd	r24, Y+2	; 0x02
    134a:	28 2f       	mov	r18, r24
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	02 2e       	mov	r0, r18
    1354:	02 c0       	rjmp	.+4      	; 0x135a <DIO_voidSetPinValue+0x190>
    1356:	88 0f       	add	r24, r24
    1358:	99 1f       	adc	r25, r25
    135a:	0a 94       	dec	r0
    135c:	e2 f7       	brpl	.-8      	; 0x1356 <DIO_voidSetPinValue+0x18c>
    135e:	80 95       	com	r24
    1360:	84 23       	and	r24, r20
    1362:	8c 93       	st	X, r24
    1364:	29 c0       	rjmp	.+82     	; 0x13b8 <DIO_voidSetPinValue+0x1ee>
		case PORT_C : Clr_Bit(PORTC_REG,Copy_Pin); break;
    1366:	a5 e3       	ldi	r26, 0x35	; 53
    1368:	b0 e0       	ldi	r27, 0x00	; 0
    136a:	e5 e3       	ldi	r30, 0x35	; 53
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	80 81       	ld	r24, Z
    1370:	48 2f       	mov	r20, r24
    1372:	8a 81       	ldd	r24, Y+2	; 0x02
    1374:	28 2f       	mov	r18, r24
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	02 2e       	mov	r0, r18
    137e:	02 c0       	rjmp	.+4      	; 0x1384 <DIO_voidSetPinValue+0x1ba>
    1380:	88 0f       	add	r24, r24
    1382:	99 1f       	adc	r25, r25
    1384:	0a 94       	dec	r0
    1386:	e2 f7       	brpl	.-8      	; 0x1380 <DIO_voidSetPinValue+0x1b6>
    1388:	80 95       	com	r24
    138a:	84 23       	and	r24, r20
    138c:	8c 93       	st	X, r24
    138e:	14 c0       	rjmp	.+40     	; 0x13b8 <DIO_voidSetPinValue+0x1ee>
		case PORT_D : Clr_Bit(PORTD_REG,Copy_Pin); break;
    1390:	a2 e3       	ldi	r26, 0x32	; 50
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	e2 e3       	ldi	r30, 0x32	; 50
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	48 2f       	mov	r20, r24
    139c:	8a 81       	ldd	r24, Y+2	; 0x02
    139e:	28 2f       	mov	r18, r24
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	02 2e       	mov	r0, r18
    13a8:	02 c0       	rjmp	.+4      	; 0x13ae <DIO_voidSetPinValue+0x1e4>
    13aa:	88 0f       	add	r24, r24
    13ac:	99 1f       	adc	r25, r25
    13ae:	0a 94       	dec	r0
    13b0:	e2 f7       	brpl	.-8      	; 0x13aa <DIO_voidSetPinValue+0x1e0>
    13b2:	80 95       	com	r24
    13b4:	84 23       	and	r24, r20
    13b6:	8c 93       	st	X, r24
		}
	}
}
    13b8:	27 96       	adiw	r28, 0x07	; 7
    13ba:	0f b6       	in	r0, 0x3f	; 63
    13bc:	f8 94       	cli
    13be:	de bf       	out	0x3e, r29	; 62
    13c0:	0f be       	out	0x3f, r0	; 63
    13c2:	cd bf       	out	0x3d, r28	; 61
    13c4:	cf 91       	pop	r28
    13c6:	df 91       	pop	r29
    13c8:	08 95       	ret

000013ca <DIO_voidPinToggle>:

void DIO_voidPinToggle(u8 Copy_Port , u8 Copy_Pin)
{
    13ca:	df 93       	push	r29
    13cc:	cf 93       	push	r28
    13ce:	00 d0       	rcall	.+0      	; 0x13d0 <DIO_voidPinToggle+0x6>
    13d0:	00 d0       	rcall	.+0      	; 0x13d2 <DIO_voidPinToggle+0x8>
    13d2:	cd b7       	in	r28, 0x3d	; 61
    13d4:	de b7       	in	r29, 0x3e	; 62
    13d6:	89 83       	std	Y+1, r24	; 0x01
    13d8:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_Port)
    13da:	89 81       	ldd	r24, Y+1	; 0x01
    13dc:	28 2f       	mov	r18, r24
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	3c 83       	std	Y+4, r19	; 0x04
    13e2:	2b 83       	std	Y+3, r18	; 0x03
    13e4:	8b 81       	ldd	r24, Y+3	; 0x03
    13e6:	9c 81       	ldd	r25, Y+4	; 0x04
    13e8:	81 30       	cpi	r24, 0x01	; 1
    13ea:	91 05       	cpc	r25, r1
    13ec:	49 f1       	breq	.+82     	; 0x1440 <DIO_voidPinToggle+0x76>
    13ee:	2b 81       	ldd	r18, Y+3	; 0x03
    13f0:	3c 81       	ldd	r19, Y+4	; 0x04
    13f2:	22 30       	cpi	r18, 0x02	; 2
    13f4:	31 05       	cpc	r19, r1
    13f6:	2c f4       	brge	.+10     	; 0x1402 <DIO_voidPinToggle+0x38>
    13f8:	8b 81       	ldd	r24, Y+3	; 0x03
    13fa:	9c 81       	ldd	r25, Y+4	; 0x04
    13fc:	00 97       	sbiw	r24, 0x00	; 0
    13fe:	61 f0       	breq	.+24     	; 0x1418 <DIO_voidPinToggle+0x4e>
    1400:	5a c0       	rjmp	.+180    	; 0x14b6 <DIO_voidPinToggle+0xec>
    1402:	2b 81       	ldd	r18, Y+3	; 0x03
    1404:	3c 81       	ldd	r19, Y+4	; 0x04
    1406:	22 30       	cpi	r18, 0x02	; 2
    1408:	31 05       	cpc	r19, r1
    140a:	71 f1       	breq	.+92     	; 0x1468 <DIO_voidPinToggle+0x9e>
    140c:	8b 81       	ldd	r24, Y+3	; 0x03
    140e:	9c 81       	ldd	r25, Y+4	; 0x04
    1410:	83 30       	cpi	r24, 0x03	; 3
    1412:	91 05       	cpc	r25, r1
    1414:	e9 f1       	breq	.+122    	; 0x1490 <DIO_voidPinToggle+0xc6>
    1416:	4f c0       	rjmp	.+158    	; 0x14b6 <DIO_voidPinToggle+0xec>
	{
	case PORT_A : Toggle_Bit(PORTA_REG,Copy_Pin); break;
    1418:	ab e3       	ldi	r26, 0x3B	; 59
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	eb e3       	ldi	r30, 0x3B	; 59
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	48 2f       	mov	r20, r24
    1424:	8a 81       	ldd	r24, Y+2	; 0x02
    1426:	28 2f       	mov	r18, r24
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	02 2e       	mov	r0, r18
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <DIO_voidPinToggle+0x6c>
    1432:	88 0f       	add	r24, r24
    1434:	99 1f       	adc	r25, r25
    1436:	0a 94       	dec	r0
    1438:	e2 f7       	brpl	.-8      	; 0x1432 <DIO_voidPinToggle+0x68>
    143a:	84 27       	eor	r24, r20
    143c:	8c 93       	st	X, r24
    143e:	3b c0       	rjmp	.+118    	; 0x14b6 <DIO_voidPinToggle+0xec>
	case PORT_B : Toggle_Bit(PORTB_REG,Copy_Pin); break;
    1440:	a8 e3       	ldi	r26, 0x38	; 56
    1442:	b0 e0       	ldi	r27, 0x00	; 0
    1444:	e8 e3       	ldi	r30, 0x38	; 56
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	48 2f       	mov	r20, r24
    144c:	8a 81       	ldd	r24, Y+2	; 0x02
    144e:	28 2f       	mov	r18, r24
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	02 2e       	mov	r0, r18
    1458:	02 c0       	rjmp	.+4      	; 0x145e <DIO_voidPinToggle+0x94>
    145a:	88 0f       	add	r24, r24
    145c:	99 1f       	adc	r25, r25
    145e:	0a 94       	dec	r0
    1460:	e2 f7       	brpl	.-8      	; 0x145a <DIO_voidPinToggle+0x90>
    1462:	84 27       	eor	r24, r20
    1464:	8c 93       	st	X, r24
    1466:	27 c0       	rjmp	.+78     	; 0x14b6 <DIO_voidPinToggle+0xec>
	case PORT_C : Toggle_Bit(PORTC_REG,Copy_Pin); break;
    1468:	a5 e3       	ldi	r26, 0x35	; 53
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	e5 e3       	ldi	r30, 0x35	; 53
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	48 2f       	mov	r20, r24
    1474:	8a 81       	ldd	r24, Y+2	; 0x02
    1476:	28 2f       	mov	r18, r24
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	02 2e       	mov	r0, r18
    1480:	02 c0       	rjmp	.+4      	; 0x1486 <DIO_voidPinToggle+0xbc>
    1482:	88 0f       	add	r24, r24
    1484:	99 1f       	adc	r25, r25
    1486:	0a 94       	dec	r0
    1488:	e2 f7       	brpl	.-8      	; 0x1482 <DIO_voidPinToggle+0xb8>
    148a:	84 27       	eor	r24, r20
    148c:	8c 93       	st	X, r24
    148e:	13 c0       	rjmp	.+38     	; 0x14b6 <DIO_voidPinToggle+0xec>
	case PORT_D : Toggle_Bit(PORTD_REG,Copy_Pin); break;
    1490:	a2 e3       	ldi	r26, 0x32	; 50
    1492:	b0 e0       	ldi	r27, 0x00	; 0
    1494:	e2 e3       	ldi	r30, 0x32	; 50
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	48 2f       	mov	r20, r24
    149c:	8a 81       	ldd	r24, Y+2	; 0x02
    149e:	28 2f       	mov	r18, r24
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	02 2e       	mov	r0, r18
    14a8:	02 c0       	rjmp	.+4      	; 0x14ae <DIO_voidPinToggle+0xe4>
    14aa:	88 0f       	add	r24, r24
    14ac:	99 1f       	adc	r25, r25
    14ae:	0a 94       	dec	r0
    14b0:	e2 f7       	brpl	.-8      	; 0x14aa <DIO_voidPinToggle+0xe0>
    14b2:	84 27       	eor	r24, r20
    14b4:	8c 93       	st	X, r24
	}
}
    14b6:	0f 90       	pop	r0
    14b8:	0f 90       	pop	r0
    14ba:	0f 90       	pop	r0
    14bc:	0f 90       	pop	r0
    14be:	cf 91       	pop	r28
    14c0:	df 91       	pop	r29
    14c2:	08 95       	ret

000014c4 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_Port,u8 Copy_Pin)
{
    14c4:	df 93       	push	r29
    14c6:	cf 93       	push	r28
    14c8:	00 d0       	rcall	.+0      	; 0x14ca <DIO_u8GetPinValue+0x6>
    14ca:	00 d0       	rcall	.+0      	; 0x14cc <DIO_u8GetPinValue+0x8>
    14cc:	0f 92       	push	r0
    14ce:	cd b7       	in	r28, 0x3d	; 61
    14d0:	de b7       	in	r29, 0x3e	; 62
    14d2:	8a 83       	std	Y+2, r24	; 0x02
    14d4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_var ;
	switch(Copy_Port)
    14d6:	8a 81       	ldd	r24, Y+2	; 0x02
    14d8:	28 2f       	mov	r18, r24
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	3d 83       	std	Y+5, r19	; 0x05
    14de:	2c 83       	std	Y+4, r18	; 0x04
    14e0:	4c 81       	ldd	r20, Y+4	; 0x04
    14e2:	5d 81       	ldd	r21, Y+5	; 0x05
    14e4:	41 30       	cpi	r20, 0x01	; 1
    14e6:	51 05       	cpc	r21, r1
    14e8:	41 f1       	breq	.+80     	; 0x153a <DIO_u8GetPinValue+0x76>
    14ea:	8c 81       	ldd	r24, Y+4	; 0x04
    14ec:	9d 81       	ldd	r25, Y+5	; 0x05
    14ee:	82 30       	cpi	r24, 0x02	; 2
    14f0:	91 05       	cpc	r25, r1
    14f2:	34 f4       	brge	.+12     	; 0x1500 <DIO_u8GetPinValue+0x3c>
    14f4:	2c 81       	ldd	r18, Y+4	; 0x04
    14f6:	3d 81       	ldd	r19, Y+5	; 0x05
    14f8:	21 15       	cp	r18, r1
    14fa:	31 05       	cpc	r19, r1
    14fc:	61 f0       	breq	.+24     	; 0x1516 <DIO_u8GetPinValue+0x52>
    14fe:	52 c0       	rjmp	.+164    	; 0x15a4 <DIO_u8GetPinValue+0xe0>
    1500:	4c 81       	ldd	r20, Y+4	; 0x04
    1502:	5d 81       	ldd	r21, Y+5	; 0x05
    1504:	42 30       	cpi	r20, 0x02	; 2
    1506:	51 05       	cpc	r21, r1
    1508:	51 f1       	breq	.+84     	; 0x155e <DIO_u8GetPinValue+0x9a>
    150a:	8c 81       	ldd	r24, Y+4	; 0x04
    150c:	9d 81       	ldd	r25, Y+5	; 0x05
    150e:	83 30       	cpi	r24, 0x03	; 3
    1510:	91 05       	cpc	r25, r1
    1512:	b9 f1       	breq	.+110    	; 0x1582 <DIO_u8GetPinValue+0xbe>
    1514:	47 c0       	rjmp	.+142    	; 0x15a4 <DIO_u8GetPinValue+0xe0>
	{
	case PORT_A: Local_var = Get_Bit(PINA_REG,Copy_Pin); break;
    1516:	e9 e3       	ldi	r30, 0x39	; 57
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	28 2f       	mov	r18, r24
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	8b 81       	ldd	r24, Y+3	; 0x03
    1522:	88 2f       	mov	r24, r24
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	a9 01       	movw	r20, r18
    1528:	02 c0       	rjmp	.+4      	; 0x152e <DIO_u8GetPinValue+0x6a>
    152a:	55 95       	asr	r21
    152c:	47 95       	ror	r20
    152e:	8a 95       	dec	r24
    1530:	e2 f7       	brpl	.-8      	; 0x152a <DIO_u8GetPinValue+0x66>
    1532:	ca 01       	movw	r24, r20
    1534:	81 70       	andi	r24, 0x01	; 1
    1536:	89 83       	std	Y+1, r24	; 0x01
    1538:	35 c0       	rjmp	.+106    	; 0x15a4 <DIO_u8GetPinValue+0xe0>
	case PORT_B: Local_var = Get_Bit(PINB_REG,Copy_Pin); break;
    153a:	e6 e3       	ldi	r30, 0x36	; 54
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	28 2f       	mov	r18, r24
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	8b 81       	ldd	r24, Y+3	; 0x03
    1546:	88 2f       	mov	r24, r24
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	a9 01       	movw	r20, r18
    154c:	02 c0       	rjmp	.+4      	; 0x1552 <DIO_u8GetPinValue+0x8e>
    154e:	55 95       	asr	r21
    1550:	47 95       	ror	r20
    1552:	8a 95       	dec	r24
    1554:	e2 f7       	brpl	.-8      	; 0x154e <DIO_u8GetPinValue+0x8a>
    1556:	ca 01       	movw	r24, r20
    1558:	81 70       	andi	r24, 0x01	; 1
    155a:	89 83       	std	Y+1, r24	; 0x01
    155c:	23 c0       	rjmp	.+70     	; 0x15a4 <DIO_u8GetPinValue+0xe0>
	case PORT_C: Local_var = Get_Bit(PINC_REG,Copy_Pin); break;
    155e:	e3 e3       	ldi	r30, 0x33	; 51
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	28 2f       	mov	r18, r24
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	8b 81       	ldd	r24, Y+3	; 0x03
    156a:	88 2f       	mov	r24, r24
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	a9 01       	movw	r20, r18
    1570:	02 c0       	rjmp	.+4      	; 0x1576 <DIO_u8GetPinValue+0xb2>
    1572:	55 95       	asr	r21
    1574:	47 95       	ror	r20
    1576:	8a 95       	dec	r24
    1578:	e2 f7       	brpl	.-8      	; 0x1572 <DIO_u8GetPinValue+0xae>
    157a:	ca 01       	movw	r24, r20
    157c:	81 70       	andi	r24, 0x01	; 1
    157e:	89 83       	std	Y+1, r24	; 0x01
    1580:	11 c0       	rjmp	.+34     	; 0x15a4 <DIO_u8GetPinValue+0xe0>
	case PORT_D: Local_var = Get_Bit(PIND_REG,Copy_Pin); break;
    1582:	e0 e3       	ldi	r30, 0x30	; 48
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	28 2f       	mov	r18, r24
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	8b 81       	ldd	r24, Y+3	; 0x03
    158e:	88 2f       	mov	r24, r24
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	a9 01       	movw	r20, r18
    1594:	02 c0       	rjmp	.+4      	; 0x159a <DIO_u8GetPinValue+0xd6>
    1596:	55 95       	asr	r21
    1598:	47 95       	ror	r20
    159a:	8a 95       	dec	r24
    159c:	e2 f7       	brpl	.-8      	; 0x1596 <DIO_u8GetPinValue+0xd2>
    159e:	ca 01       	movw	r24, r20
    15a0:	81 70       	andi	r24, 0x01	; 1
    15a2:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_var ;
    15a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    15a6:	0f 90       	pop	r0
    15a8:	0f 90       	pop	r0
    15aa:	0f 90       	pop	r0
    15ac:	0f 90       	pop	r0
    15ae:	0f 90       	pop	r0
    15b0:	cf 91       	pop	r28
    15b2:	df 91       	pop	r29
    15b4:	08 95       	ret

000015b6 <DIO_voidSetPortDirection>:




void DIO_voidSetPortDirection(u8 Copy_Port , u8 Copy_Direction)
{
    15b6:	df 93       	push	r29
    15b8:	cf 93       	push	r28
    15ba:	00 d0       	rcall	.+0      	; 0x15bc <DIO_voidSetPortDirection+0x6>
    15bc:	00 d0       	rcall	.+0      	; 0x15be <DIO_voidSetPortDirection+0x8>
    15be:	cd b7       	in	r28, 0x3d	; 61
    15c0:	de b7       	in	r29, 0x3e	; 62
    15c2:	89 83       	std	Y+1, r24	; 0x01
    15c4:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_Port)
    15c6:	89 81       	ldd	r24, Y+1	; 0x01
    15c8:	28 2f       	mov	r18, r24
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	3c 83       	std	Y+4, r19	; 0x04
    15ce:	2b 83       	std	Y+3, r18	; 0x03
    15d0:	8b 81       	ldd	r24, Y+3	; 0x03
    15d2:	9c 81       	ldd	r25, Y+4	; 0x04
    15d4:	81 30       	cpi	r24, 0x01	; 1
    15d6:	91 05       	cpc	r25, r1
    15d8:	d1 f0       	breq	.+52     	; 0x160e <DIO_voidSetPortDirection+0x58>
    15da:	2b 81       	ldd	r18, Y+3	; 0x03
    15dc:	3c 81       	ldd	r19, Y+4	; 0x04
    15de:	22 30       	cpi	r18, 0x02	; 2
    15e0:	31 05       	cpc	r19, r1
    15e2:	2c f4       	brge	.+10     	; 0x15ee <DIO_voidSetPortDirection+0x38>
    15e4:	8b 81       	ldd	r24, Y+3	; 0x03
    15e6:	9c 81       	ldd	r25, Y+4	; 0x04
    15e8:	00 97       	sbiw	r24, 0x00	; 0
    15ea:	61 f0       	breq	.+24     	; 0x1604 <DIO_voidSetPortDirection+0x4e>
    15ec:	1e c0       	rjmp	.+60     	; 0x162a <DIO_voidSetPortDirection+0x74>
    15ee:	2b 81       	ldd	r18, Y+3	; 0x03
    15f0:	3c 81       	ldd	r19, Y+4	; 0x04
    15f2:	22 30       	cpi	r18, 0x02	; 2
    15f4:	31 05       	cpc	r19, r1
    15f6:	81 f0       	breq	.+32     	; 0x1618 <DIO_voidSetPortDirection+0x62>
    15f8:	8b 81       	ldd	r24, Y+3	; 0x03
    15fa:	9c 81       	ldd	r25, Y+4	; 0x04
    15fc:	83 30       	cpi	r24, 0x03	; 3
    15fe:	91 05       	cpc	r25, r1
    1600:	81 f0       	breq	.+32     	; 0x1622 <DIO_voidSetPortDirection+0x6c>
    1602:	13 c0       	rjmp	.+38     	; 0x162a <DIO_voidSetPortDirection+0x74>
	{
	case PORT_A : DDRA_REG = Copy_Direction; break;
    1604:	ea e3       	ldi	r30, 0x3A	; 58
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	8a 81       	ldd	r24, Y+2	; 0x02
    160a:	80 83       	st	Z, r24
    160c:	0e c0       	rjmp	.+28     	; 0x162a <DIO_voidSetPortDirection+0x74>
	case PORT_B : DDRB_REG = Copy_Direction; break;
    160e:	e7 e3       	ldi	r30, 0x37	; 55
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	8a 81       	ldd	r24, Y+2	; 0x02
    1614:	80 83       	st	Z, r24
    1616:	09 c0       	rjmp	.+18     	; 0x162a <DIO_voidSetPortDirection+0x74>
	case PORT_C : DDRC_REG = Copy_Direction; break;
    1618:	e4 e3       	ldi	r30, 0x34	; 52
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	8a 81       	ldd	r24, Y+2	; 0x02
    161e:	80 83       	st	Z, r24
    1620:	04 c0       	rjmp	.+8      	; 0x162a <DIO_voidSetPortDirection+0x74>
	case PORT_D : DDRD_REG = Copy_Direction; break;
    1622:	e1 e3       	ldi	r30, 0x31	; 49
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	8a 81       	ldd	r24, Y+2	; 0x02
    1628:	80 83       	st	Z, r24
	}
}
    162a:	0f 90       	pop	r0
    162c:	0f 90       	pop	r0
    162e:	0f 90       	pop	r0
    1630:	0f 90       	pop	r0
    1632:	cf 91       	pop	r28
    1634:	df 91       	pop	r29
    1636:	08 95       	ret

00001638 <DIO_voidSetPortValue>:


void DIO_voidSetPortValue    (u8 Copy_Port , u8 Copy_Value)
{
    1638:	df 93       	push	r29
    163a:	cf 93       	push	r28
    163c:	00 d0       	rcall	.+0      	; 0x163e <DIO_voidSetPortValue+0x6>
    163e:	00 d0       	rcall	.+0      	; 0x1640 <DIO_voidSetPortValue+0x8>
    1640:	cd b7       	in	r28, 0x3d	; 61
    1642:	de b7       	in	r29, 0x3e	; 62
    1644:	89 83       	std	Y+1, r24	; 0x01
    1646:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_Port)
    1648:	89 81       	ldd	r24, Y+1	; 0x01
    164a:	28 2f       	mov	r18, r24
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	3c 83       	std	Y+4, r19	; 0x04
    1650:	2b 83       	std	Y+3, r18	; 0x03
    1652:	8b 81       	ldd	r24, Y+3	; 0x03
    1654:	9c 81       	ldd	r25, Y+4	; 0x04
    1656:	81 30       	cpi	r24, 0x01	; 1
    1658:	91 05       	cpc	r25, r1
    165a:	d1 f0       	breq	.+52     	; 0x1690 <DIO_voidSetPortValue+0x58>
    165c:	2b 81       	ldd	r18, Y+3	; 0x03
    165e:	3c 81       	ldd	r19, Y+4	; 0x04
    1660:	22 30       	cpi	r18, 0x02	; 2
    1662:	31 05       	cpc	r19, r1
    1664:	2c f4       	brge	.+10     	; 0x1670 <DIO_voidSetPortValue+0x38>
    1666:	8b 81       	ldd	r24, Y+3	; 0x03
    1668:	9c 81       	ldd	r25, Y+4	; 0x04
    166a:	00 97       	sbiw	r24, 0x00	; 0
    166c:	61 f0       	breq	.+24     	; 0x1686 <DIO_voidSetPortValue+0x4e>
    166e:	1e c0       	rjmp	.+60     	; 0x16ac <DIO_voidSetPortValue+0x74>
    1670:	2b 81       	ldd	r18, Y+3	; 0x03
    1672:	3c 81       	ldd	r19, Y+4	; 0x04
    1674:	22 30       	cpi	r18, 0x02	; 2
    1676:	31 05       	cpc	r19, r1
    1678:	81 f0       	breq	.+32     	; 0x169a <DIO_voidSetPortValue+0x62>
    167a:	8b 81       	ldd	r24, Y+3	; 0x03
    167c:	9c 81       	ldd	r25, Y+4	; 0x04
    167e:	83 30       	cpi	r24, 0x03	; 3
    1680:	91 05       	cpc	r25, r1
    1682:	81 f0       	breq	.+32     	; 0x16a4 <DIO_voidSetPortValue+0x6c>
    1684:	13 c0       	rjmp	.+38     	; 0x16ac <DIO_voidSetPortValue+0x74>
	{
	case PORT_A : PORTA_REG = Copy_Value; break;
    1686:	eb e3       	ldi	r30, 0x3B	; 59
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	8a 81       	ldd	r24, Y+2	; 0x02
    168c:	80 83       	st	Z, r24
    168e:	0e c0       	rjmp	.+28     	; 0x16ac <DIO_voidSetPortValue+0x74>
	case PORT_B : PORTB_REG = Copy_Value; break;
    1690:	e8 e3       	ldi	r30, 0x38	; 56
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	8a 81       	ldd	r24, Y+2	; 0x02
    1696:	80 83       	st	Z, r24
    1698:	09 c0       	rjmp	.+18     	; 0x16ac <DIO_voidSetPortValue+0x74>
	case PORT_C : PORTC_REG = Copy_Value; break;
    169a:	e5 e3       	ldi	r30, 0x35	; 53
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	8a 81       	ldd	r24, Y+2	; 0x02
    16a0:	80 83       	st	Z, r24
    16a2:	04 c0       	rjmp	.+8      	; 0x16ac <DIO_voidSetPortValue+0x74>
	case PORT_D : PORTD_REG = Copy_Value; break;
    16a4:	e2 e3       	ldi	r30, 0x32	; 50
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	8a 81       	ldd	r24, Y+2	; 0x02
    16aa:	80 83       	st	Z, r24
	}
}
    16ac:	0f 90       	pop	r0
    16ae:	0f 90       	pop	r0
    16b0:	0f 90       	pop	r0
    16b2:	0f 90       	pop	r0
    16b4:	cf 91       	pop	r28
    16b6:	df 91       	pop	r29
    16b8:	08 95       	ret

000016ba <_7Segment_voidInit>:
#include "_7_Interface.h"
#include "_7_Private.h"
#include "_7_Config.h"

void _7Segment_voidInit(void)
{
    16ba:	df 93       	push	r29
    16bc:	cf 93       	push	r28
    16be:	cd b7       	in	r28, 0x3d	; 61
    16c0:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortDirection(_7SEGMENT_PORT,0xFF);
    16c2:	80 e0       	ldi	r24, 0x00	; 0
    16c4:	6f ef       	ldi	r22, 0xFF	; 255
    16c6:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_voidSetPortDirection>
}
    16ca:	cf 91       	pop	r28
    16cc:	df 91       	pop	r29
    16ce:	08 95       	ret

000016d0 <_7Segment_Status>:

/*on or off the 7 segment*/
void _7Segment_Status(u8 Copy_Status)
{
    16d0:	df 93       	push	r29
    16d2:	cf 93       	push	r28
    16d4:	0f 92       	push	r0
    16d6:	cd b7       	in	r28, 0x3d	; 61
    16d8:	de b7       	in	r29, 0x3e	; 62
    16da:	89 83       	std	Y+1, r24	; 0x01
	if(_7SEGMENT_TYPE == COMMON_ANOD)
	{
		if(Copy_Status == ON)
    16dc:	89 81       	ldd	r24, Y+1	; 0x01
    16de:	88 23       	and	r24, r24
    16e0:	31 f4       	brne	.+12     	; 0x16ee <_7Segment_Status+0x1e>
		{
			DIO_voidSetPinValue(_7SEGMENT_PORT ,Pin_7,HIGH);
    16e2:	80 e0       	ldi	r24, 0x00	; 0
    16e4:	67 e0       	ldi	r22, 0x07	; 7
    16e6:	40 e0       	ldi	r20, 0x00	; 0
    16e8:	0e 94 e5 08 	call	0x11ca	; 0x11ca <DIO_voidSetPinValue>
    16ec:	08 c0       	rjmp	.+16     	; 0x16fe <_7Segment_Status+0x2e>
		}
		else if(Copy_Status == OFF)
    16ee:	89 81       	ldd	r24, Y+1	; 0x01
    16f0:	81 30       	cpi	r24, 0x01	; 1
    16f2:	29 f4       	brne	.+10     	; 0x16fe <_7Segment_Status+0x2e>
		{
			DIO_voidSetPinValue(_7SEGMENT_PORT ,Pin_7,LOW);
    16f4:	80 e0       	ldi	r24, 0x00	; 0
    16f6:	67 e0       	ldi	r22, 0x07	; 7
    16f8:	41 e0       	ldi	r20, 0x01	; 1
    16fa:	0e 94 e5 08 	call	0x11ca	; 0x11ca <DIO_voidSetPinValue>
		{
			DIO_voidSetPinValue(_7SEGMENT_PORT ,Pin_7,HIGH);
		}
	}

}
    16fe:	0f 90       	pop	r0
    1700:	cf 91       	pop	r28
    1702:	df 91       	pop	r29
    1704:	08 95       	ret

00001706 <_7Segment_SpecificNumber>:

void _7Segment_SpecificNumber(u8 Copy_Number)
{
    1706:	df 93       	push	r29
    1708:	cf 93       	push	r28
    170a:	cd b7       	in	r28, 0x3d	; 61
    170c:	de b7       	in	r29, 0x3e	; 62
    170e:	6f 97       	sbiw	r28, 0x1f	; 31
    1710:	0f b6       	in	r0, 0x3f	; 63
    1712:	f8 94       	cli
    1714:	de bf       	out	0x3e, r29	; 62
    1716:	0f be       	out	0x3f, r0	; 63
    1718:	cd bf       	out	0x3d, r28	; 61
    171a:	8d 8b       	std	Y+21, r24	; 0x15

	u8  _7SegmentCathode[10]={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F};
    171c:	ce 01       	movw	r24, r28
    171e:	01 96       	adiw	r24, 0x01	; 1
    1720:	9f 8b       	std	Y+23, r25	; 0x17
    1722:	8e 8b       	std	Y+22, r24	; 0x16
    1724:	ea e7       	ldi	r30, 0x7A	; 122
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	f9 8f       	std	Y+25, r31	; 0x19
    172a:	e8 8f       	std	Y+24, r30	; 0x18
    172c:	fa e0       	ldi	r31, 0x0A	; 10
    172e:	fa 8f       	std	Y+26, r31	; 0x1a
    1730:	e8 8d       	ldd	r30, Y+24	; 0x18
    1732:	f9 8d       	ldd	r31, Y+25	; 0x19
    1734:	00 80       	ld	r0, Z
    1736:	88 8d       	ldd	r24, Y+24	; 0x18
    1738:	99 8d       	ldd	r25, Y+25	; 0x19
    173a:	01 96       	adiw	r24, 0x01	; 1
    173c:	99 8f       	std	Y+25, r25	; 0x19
    173e:	88 8f       	std	Y+24, r24	; 0x18
    1740:	ee 89       	ldd	r30, Y+22	; 0x16
    1742:	ff 89       	ldd	r31, Y+23	; 0x17
    1744:	00 82       	st	Z, r0
    1746:	8e 89       	ldd	r24, Y+22	; 0x16
    1748:	9f 89       	ldd	r25, Y+23	; 0x17
    174a:	01 96       	adiw	r24, 0x01	; 1
    174c:	9f 8b       	std	Y+23, r25	; 0x17
    174e:	8e 8b       	std	Y+22, r24	; 0x16
    1750:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1752:	91 50       	subi	r25, 0x01	; 1
    1754:	9a 8f       	std	Y+26, r25	; 0x1a
    1756:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1758:	ee 23       	and	r30, r30
    175a:	51 f7       	brne	.-44     	; 0x1730 <_7Segment_SpecificNumber+0x2a>
	u8  _7SegmentAnode[10]={~0x3F,~0x06,~0x5B,~0x4F,~0x66,~0x6D,~0x7D,~0x07,~0x7F,~0x6F};
    175c:	ce 01       	movw	r24, r28
    175e:	0b 96       	adiw	r24, 0x0b	; 11
    1760:	9c 8f       	std	Y+28, r25	; 0x1c
    1762:	8b 8f       	std	Y+27, r24	; 0x1b
    1764:	e0 e7       	ldi	r30, 0x70	; 112
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	fe 8f       	std	Y+30, r31	; 0x1e
    176a:	ed 8f       	std	Y+29, r30	; 0x1d
    176c:	fa e0       	ldi	r31, 0x0A	; 10
    176e:	ff 8f       	std	Y+31, r31	; 0x1f
    1770:	ed 8d       	ldd	r30, Y+29	; 0x1d
    1772:	fe 8d       	ldd	r31, Y+30	; 0x1e
    1774:	00 80       	ld	r0, Z
    1776:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1778:	9e 8d       	ldd	r25, Y+30	; 0x1e
    177a:	01 96       	adiw	r24, 0x01	; 1
    177c:	9e 8f       	std	Y+30, r25	; 0x1e
    177e:	8d 8f       	std	Y+29, r24	; 0x1d
    1780:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1782:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1784:	00 82       	st	Z, r0
    1786:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1788:	9c 8d       	ldd	r25, Y+28	; 0x1c
    178a:	01 96       	adiw	r24, 0x01	; 1
    178c:	9c 8f       	std	Y+28, r25	; 0x1c
    178e:	8b 8f       	std	Y+27, r24	; 0x1b
    1790:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1792:	91 50       	subi	r25, 0x01	; 1
    1794:	9f 8f       	std	Y+31, r25	; 0x1f
    1796:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1798:	ee 23       	and	r30, r30
    179a:	51 f7       	brne	.-44     	; 0x1770 <_7Segment_SpecificNumber+0x6a>

	if(_7SEGMENT_TYPE == COMMON_ANOD)
	{
		DIO_voidSetPortValue(_7SEGMENT_PORT,_7SegmentAnode[Copy_Number]);
    179c:	8d 89       	ldd	r24, Y+21	; 0x15
    179e:	28 2f       	mov	r18, r24
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	ce 01       	movw	r24, r28
    17a4:	0b 96       	adiw	r24, 0x0b	; 11
    17a6:	fc 01       	movw	r30, r24
    17a8:	e2 0f       	add	r30, r18
    17aa:	f3 1f       	adc	r31, r19
    17ac:	90 81       	ld	r25, Z
    17ae:	80 e0       	ldi	r24, 0x00	; 0
    17b0:	69 2f       	mov	r22, r25
    17b2:	0e 94 1c 0b 	call	0x1638	; 0x1638 <DIO_voidSetPortValue>
	else if(_7SEGMENT_TYPE == COMMON_CATHOD)
	{

		DIO_voidSetPortValue(_7SEGMENT_PORT,_7SegmentCathode[Copy_Number]);
	}
}
    17b6:	6f 96       	adiw	r28, 0x1f	; 31
    17b8:	0f b6       	in	r0, 0x3f	; 63
    17ba:	f8 94       	cli
    17bc:	de bf       	out	0x3e, r29	; 62
    17be:	0f be       	out	0x3f, r0	; 63
    17c0:	cd bf       	out	0x3d, r28	; 61
    17c2:	cf 91       	pop	r28
    17c4:	df 91       	pop	r29
    17c6:	08 95       	ret

000017c8 <_7Segment0To9>:

void _7Segment0To9(void)
{
    17c8:	df 93       	push	r29
    17ca:	cf 93       	push	r28
    17cc:	cd b7       	in	r28, 0x3d	; 61
    17ce:	de b7       	in	r29, 0x3e	; 62
    17d0:	a0 97       	sbiw	r28, 0x20	; 32
    17d2:	0f b6       	in	r0, 0x3f	; 63
    17d4:	f8 94       	cli
    17d6:	de bf       	out	0x3e, r29	; 62
    17d8:	0f be       	out	0x3f, r0	; 63
    17da:	cd bf       	out	0x3d, r28	; 61
	u8  _7SegmentCathode[10]={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F};
    17dc:	ce 01       	movw	r24, r28
    17de:	03 96       	adiw	r24, 0x03	; 3
    17e0:	98 8f       	std	Y+24, r25	; 0x18
    17e2:	8f 8b       	std	Y+23, r24	; 0x17
    17e4:	ee e8       	ldi	r30, 0x8E	; 142
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	fa 8f       	std	Y+26, r31	; 0x1a
    17ea:	e9 8f       	std	Y+25, r30	; 0x19
    17ec:	fa e0       	ldi	r31, 0x0A	; 10
    17ee:	fb 8f       	std	Y+27, r31	; 0x1b
    17f0:	e9 8d       	ldd	r30, Y+25	; 0x19
    17f2:	fa 8d       	ldd	r31, Y+26	; 0x1a
    17f4:	00 80       	ld	r0, Z
    17f6:	89 8d       	ldd	r24, Y+25	; 0x19
    17f8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    17fa:	01 96       	adiw	r24, 0x01	; 1
    17fc:	9a 8f       	std	Y+26, r25	; 0x1a
    17fe:	89 8f       	std	Y+25, r24	; 0x19
    1800:	ef 89       	ldd	r30, Y+23	; 0x17
    1802:	f8 8d       	ldd	r31, Y+24	; 0x18
    1804:	00 82       	st	Z, r0
    1806:	8f 89       	ldd	r24, Y+23	; 0x17
    1808:	98 8d       	ldd	r25, Y+24	; 0x18
    180a:	01 96       	adiw	r24, 0x01	; 1
    180c:	98 8f       	std	Y+24, r25	; 0x18
    180e:	8f 8b       	std	Y+23, r24	; 0x17
    1810:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1812:	91 50       	subi	r25, 0x01	; 1
    1814:	9b 8f       	std	Y+27, r25	; 0x1b
    1816:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1818:	ee 23       	and	r30, r30
    181a:	51 f7       	brne	.-44     	; 0x17f0 <_7Segment0To9+0x28>
	u8  _7SegmentAnode[10]={~0x3F,~0x06,~0x5B,~0x4F,~0x66,~0x6D,~0x7D,~0x07,~0x7F,~0x6F};
    181c:	ce 01       	movw	r24, r28
    181e:	0d 96       	adiw	r24, 0x0d	; 13
    1820:	9d 8f       	std	Y+29, r25	; 0x1d
    1822:	8c 8f       	std	Y+28, r24	; 0x1c
    1824:	e4 e8       	ldi	r30, 0x84	; 132
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	ff 8f       	std	Y+31, r31	; 0x1f
    182a:	ee 8f       	std	Y+30, r30	; 0x1e
    182c:	fa e0       	ldi	r31, 0x0A	; 10
    182e:	f8 a3       	std	Y+32, r31	; 0x20
    1830:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1832:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1834:	00 80       	ld	r0, Z
    1836:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1838:	9f 8d       	ldd	r25, Y+31	; 0x1f
    183a:	01 96       	adiw	r24, 0x01	; 1
    183c:	9f 8f       	std	Y+31, r25	; 0x1f
    183e:	8e 8f       	std	Y+30, r24	; 0x1e
    1840:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1842:	fd 8d       	ldd	r31, Y+29	; 0x1d
    1844:	00 82       	st	Z, r0
    1846:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1848:	9d 8d       	ldd	r25, Y+29	; 0x1d
    184a:	01 96       	adiw	r24, 0x01	; 1
    184c:	9d 8f       	std	Y+29, r25	; 0x1d
    184e:	8c 8f       	std	Y+28, r24	; 0x1c
    1850:	98 a1       	ldd	r25, Y+32	; 0x20
    1852:	91 50       	subi	r25, 0x01	; 1
    1854:	98 a3       	std	Y+32, r25	; 0x20
    1856:	e8 a1       	ldd	r30, Y+32	; 0x20
    1858:	ee 23       	and	r30, r30
    185a:	51 f7       	brne	.-44     	; 0x1830 <_7Segment0To9+0x68>

	if(_7SEGMENT_TYPE == COMMON_ANOD)
	{
		for(u8 i=0 ;i<10;i++)
    185c:	1a 82       	std	Y+2, r1	; 0x02
    185e:	10 c0       	rjmp	.+32     	; 0x1880 <_7Segment0To9+0xb8>
		{
			DIO_voidSetPortValue(_7SEGMENT_PORT,_7SegmentAnode[i]);
    1860:	8a 81       	ldd	r24, Y+2	; 0x02
    1862:	28 2f       	mov	r18, r24
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	ce 01       	movw	r24, r28
    1868:	0d 96       	adiw	r24, 0x0d	; 13
    186a:	fc 01       	movw	r30, r24
    186c:	e2 0f       	add	r30, r18
    186e:	f3 1f       	adc	r31, r19
    1870:	90 81       	ld	r25, Z
    1872:	80 e0       	ldi	r24, 0x00	; 0
    1874:	69 2f       	mov	r22, r25
    1876:	0e 94 1c 0b 	call	0x1638	; 0x1638 <DIO_voidSetPortValue>
	u8  _7SegmentCathode[10]={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F};
	u8  _7SegmentAnode[10]={~0x3F,~0x06,~0x5B,~0x4F,~0x66,~0x6D,~0x7D,~0x07,~0x7F,~0x6F};

	if(_7SEGMENT_TYPE == COMMON_ANOD)
	{
		for(u8 i=0 ;i<10;i++)
    187a:	8a 81       	ldd	r24, Y+2	; 0x02
    187c:	8f 5f       	subi	r24, 0xFF	; 255
    187e:	8a 83       	std	Y+2, r24	; 0x02
    1880:	8a 81       	ldd	r24, Y+2	; 0x02
    1882:	8a 30       	cpi	r24, 0x0A	; 10
    1884:	68 f3       	brcs	.-38     	; 0x1860 <_7Segment0To9+0x98>
		for(u8 i=0 ;i<10;i++)
		{
			DIO_voidSetPortValue(_7SEGMENT_PORT,_7SegmentCathode[i]);
		}
	}
}
    1886:	a0 96       	adiw	r28, 0x20	; 32
    1888:	0f b6       	in	r0, 0x3f	; 63
    188a:	f8 94       	cli
    188c:	de bf       	out	0x3e, r29	; 62
    188e:	0f be       	out	0x3f, r0	; 63
    1890:	cd bf       	out	0x3d, r28	; 61
    1892:	cf 91       	pop	r28
    1894:	df 91       	pop	r29
    1896:	08 95       	ret

00001898 <MOTOR_voidInit>:
#include "MOTOR_Interface.h"


// a function to init the motor pins
void MOTOR_voidInit(struct MOTOR motor)
{
    1898:	df 93       	push	r29
    189a:	cf 93       	push	r28
    189c:	00 d0       	rcall	.+0      	; 0x189e <MOTOR_voidInit+0x6>
    189e:	00 d0       	rcall	.+0      	; 0x18a0 <MOTOR_voidInit+0x8>
    18a0:	cd b7       	in	r28, 0x3d	; 61
    18a2:	de b7       	in	r29, 0x3e	; 62
    18a4:	69 83       	std	Y+1, r22	; 0x01
    18a6:	7a 83       	std	Y+2, r23	; 0x02
    18a8:	8b 83       	std	Y+3, r24	; 0x03
    18aa:	9c 83       	std	Y+4, r25	; 0x04
	// create a motor
	// in the app creat a struct of motor and pass it here
// pin1 and pin2 as digital output
	DIO_voidSetPinDirection(motor._PORT,motor._PIN1,Output);
    18ac:	8b 81       	ldd	r24, Y+3	; 0x03
    18ae:	99 81       	ldd	r25, Y+1	; 0x01
    18b0:	69 2f       	mov	r22, r25
    18b2:	40 e0       	ldi	r20, 0x00	; 0
    18b4:	0e 94 e5 07 	call	0xfca	; 0xfca <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(motor._PORT,motor._PIN2,Output);
    18b8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ba:	9a 81       	ldd	r25, Y+2	; 0x02
    18bc:	69 2f       	mov	r22, r25
    18be:	40 e0       	ldi	r20, 0x00	; 0
    18c0:	0e 94 e5 07 	call	0xfca	; 0xfca <DIO_voidSetPinDirection>
// pwm pin as a pwm output
	DIO_voidSetPinDirection(motor._PORT,motor._PWMPIN,Output);
    18c4:	8b 81       	ldd	r24, Y+3	; 0x03
    18c6:	9c 81       	ldd	r25, Y+4	; 0x04
    18c8:	69 2f       	mov	r22, r25
    18ca:	40 e0       	ldi	r20, 0x00	; 0
    18cc:	0e 94 e5 07 	call	0xfca	; 0xfca <DIO_voidSetPinDirection>


}
    18d0:	0f 90       	pop	r0
    18d2:	0f 90       	pop	r0
    18d4:	0f 90       	pop	r0
    18d6:	0f 90       	pop	r0
    18d8:	cf 91       	pop	r28
    18da:	df 91       	pop	r29
    18dc:	08 95       	ret

000018de <MOTOR_voidForward>:

// forward move function
void MOTOR_voidForward(struct MOTOR motor)
{
    18de:	df 93       	push	r29
    18e0:	cf 93       	push	r28
    18e2:	00 d0       	rcall	.+0      	; 0x18e4 <MOTOR_voidForward+0x6>
    18e4:	00 d0       	rcall	.+0      	; 0x18e6 <MOTOR_voidForward+0x8>
    18e6:	cd b7       	in	r28, 0x3d	; 61
    18e8:	de b7       	in	r29, 0x3e	; 62
    18ea:	69 83       	std	Y+1, r22	; 0x01
    18ec:	7a 83       	std	Y+2, r23	; 0x02
    18ee:	8b 83       	std	Y+3, r24	; 0x03
    18f0:	9c 83       	std	Y+4, r25	; 0x04
	// 1 is high and 2 is low
	DIO_voidSetPinValue(motor._PORT,motor._PIN1,HIGH);
    18f2:	8b 81       	ldd	r24, Y+3	; 0x03
    18f4:	99 81       	ldd	r25, Y+1	; 0x01
    18f6:	69 2f       	mov	r22, r25
    18f8:	40 e0       	ldi	r20, 0x00	; 0
    18fa:	0e 94 e5 08 	call	0x11ca	; 0x11ca <DIO_voidSetPinValue>
	DIO_voidSetPinValue(motor._PORT,motor._PIN2,LOW);
    18fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1900:	9a 81       	ldd	r25, Y+2	; 0x02
    1902:	69 2f       	mov	r22, r25
    1904:	41 e0       	ldi	r20, 0x01	; 1
    1906:	0e 94 e5 08 	call	0x11ca	; 0x11ca <DIO_voidSetPinValue>

}
    190a:	0f 90       	pop	r0
    190c:	0f 90       	pop	r0
    190e:	0f 90       	pop	r0
    1910:	0f 90       	pop	r0
    1912:	cf 91       	pop	r28
    1914:	df 91       	pop	r29
    1916:	08 95       	ret

00001918 <MOTOR_voidLeft>:

// left move function
void MOTOR_voidLeft(struct MOTOR motor1 , struct MOTOR motor2)
{
    1918:	df 93       	push	r29
    191a:	cf 93       	push	r28
    191c:	cd b7       	in	r28, 0x3d	; 61
    191e:	de b7       	in	r29, 0x3e	; 62
    1920:	28 97       	sbiw	r28, 0x08	; 8
    1922:	0f b6       	in	r0, 0x3f	; 63
    1924:	f8 94       	cli
    1926:	de bf       	out	0x3e, r29	; 62
    1928:	0f be       	out	0x3f, r0	; 63
    192a:	cd bf       	out	0x3d, r28	; 61
    192c:	69 83       	std	Y+1, r22	; 0x01
    192e:	7a 83       	std	Y+2, r23	; 0x02
    1930:	8b 83       	std	Y+3, r24	; 0x03
    1932:	9c 83       	std	Y+4, r25	; 0x04
    1934:	2d 83       	std	Y+5, r18	; 0x05
    1936:	3e 83       	std	Y+6, r19	; 0x06
    1938:	4f 83       	std	Y+7, r20	; 0x07
    193a:	58 87       	std	Y+8, r21	; 0x08
	// motor 1 forward and 2 stop
	DIO_voidSetPinValue(motor1._PORT,motor1._PIN1,HIGH);
    193c:	8b 81       	ldd	r24, Y+3	; 0x03
    193e:	99 81       	ldd	r25, Y+1	; 0x01
    1940:	69 2f       	mov	r22, r25
    1942:	40 e0       	ldi	r20, 0x00	; 0
    1944:	0e 94 e5 08 	call	0x11ca	; 0x11ca <DIO_voidSetPinValue>
	DIO_voidSetPinValue(motor2._PORT,motor2._PIN2,LOW);
    1948:	8f 81       	ldd	r24, Y+7	; 0x07
    194a:	9e 81       	ldd	r25, Y+6	; 0x06
    194c:	69 2f       	mov	r22, r25
    194e:	41 e0       	ldi	r20, 0x01	; 1
    1950:	0e 94 e5 08 	call	0x11ca	; 0x11ca <DIO_voidSetPinValue>
	DIO_voidSetPinValue(motor2._PORT,motor2._PIN1,LOW);
    1954:	8f 81       	ldd	r24, Y+7	; 0x07
    1956:	9d 81       	ldd	r25, Y+5	; 0x05
    1958:	69 2f       	mov	r22, r25
    195a:	41 e0       	ldi	r20, 0x01	; 1
    195c:	0e 94 e5 08 	call	0x11ca	; 0x11ca <DIO_voidSetPinValue>


}
    1960:	28 96       	adiw	r28, 0x08	; 8
    1962:	0f b6       	in	r0, 0x3f	; 63
    1964:	f8 94       	cli
    1966:	de bf       	out	0x3e, r29	; 62
    1968:	0f be       	out	0x3f, r0	; 63
    196a:	cd bf       	out	0x3d, r28	; 61
    196c:	cf 91       	pop	r28
    196e:	df 91       	pop	r29
    1970:	08 95       	ret

00001972 <MOTOR_voidRight>:

// right move function
void MOTOR_voidRight(struct MOTOR motor1, struct MOTOR motor2)
{
    1972:	df 93       	push	r29
    1974:	cf 93       	push	r28
    1976:	cd b7       	in	r28, 0x3d	; 61
    1978:	de b7       	in	r29, 0x3e	; 62
    197a:	28 97       	sbiw	r28, 0x08	; 8
    197c:	0f b6       	in	r0, 0x3f	; 63
    197e:	f8 94       	cli
    1980:	de bf       	out	0x3e, r29	; 62
    1982:	0f be       	out	0x3f, r0	; 63
    1984:	cd bf       	out	0x3d, r28	; 61
    1986:	69 83       	std	Y+1, r22	; 0x01
    1988:	7a 83       	std	Y+2, r23	; 0x02
    198a:	8b 83       	std	Y+3, r24	; 0x03
    198c:	9c 83       	std	Y+4, r25	; 0x04
    198e:	2d 83       	std	Y+5, r18	; 0x05
    1990:	3e 83       	std	Y+6, r19	; 0x06
    1992:	4f 83       	std	Y+7, r20	; 0x07
    1994:	58 87       	std	Y+8, r21	; 0x08
	// motor 2 forward and 1 stop
	DIO_voidSetPinValue(motor2._PORT,motor2._PIN1,HIGH);
    1996:	8f 81       	ldd	r24, Y+7	; 0x07
    1998:	9d 81       	ldd	r25, Y+5	; 0x05
    199a:	69 2f       	mov	r22, r25
    199c:	40 e0       	ldi	r20, 0x00	; 0
    199e:	0e 94 e5 08 	call	0x11ca	; 0x11ca <DIO_voidSetPinValue>
	DIO_voidSetPinValue(motor1._PORT,motor1._PIN2,LOW);
    19a2:	8b 81       	ldd	r24, Y+3	; 0x03
    19a4:	9a 81       	ldd	r25, Y+2	; 0x02
    19a6:	69 2f       	mov	r22, r25
    19a8:	41 e0       	ldi	r20, 0x01	; 1
    19aa:	0e 94 e5 08 	call	0x11ca	; 0x11ca <DIO_voidSetPinValue>
	DIO_voidSetPinValue(motor1._PORT,motor1._PIN1,LOW);
    19ae:	8b 81       	ldd	r24, Y+3	; 0x03
    19b0:	99 81       	ldd	r25, Y+1	; 0x01
    19b2:	69 2f       	mov	r22, r25
    19b4:	41 e0       	ldi	r20, 0x01	; 1
    19b6:	0e 94 e5 08 	call	0x11ca	; 0x11ca <DIO_voidSetPinValue>

}
    19ba:	28 96       	adiw	r28, 0x08	; 8
    19bc:	0f b6       	in	r0, 0x3f	; 63
    19be:	f8 94       	cli
    19c0:	de bf       	out	0x3e, r29	; 62
    19c2:	0f be       	out	0x3f, r0	; 63
    19c4:	cd bf       	out	0x3d, r28	; 61
    19c6:	cf 91       	pop	r28
    19c8:	df 91       	pop	r29
    19ca:	08 95       	ret

000019cc <MOTOR_voidBackword>:

// backword move function
void MOTOR_voidBackword(struct MOTOR motor)
{
    19cc:	df 93       	push	r29
    19ce:	cf 93       	push	r28
    19d0:	00 d0       	rcall	.+0      	; 0x19d2 <MOTOR_voidBackword+0x6>
    19d2:	00 d0       	rcall	.+0      	; 0x19d4 <MOTOR_voidBackword+0x8>
    19d4:	cd b7       	in	r28, 0x3d	; 61
    19d6:	de b7       	in	r29, 0x3e	; 62
    19d8:	69 83       	std	Y+1, r22	; 0x01
    19da:	7a 83       	std	Y+2, r23	; 0x02
    19dc:	8b 83       	std	Y+3, r24	; 0x03
    19de:	9c 83       	std	Y+4, r25	; 0x04
	// 1 is low 2 is high
	DIO_voidSetPinValue(motor._PORT,motor._PIN1,LOW);
    19e0:	8b 81       	ldd	r24, Y+3	; 0x03
    19e2:	99 81       	ldd	r25, Y+1	; 0x01
    19e4:	69 2f       	mov	r22, r25
    19e6:	41 e0       	ldi	r20, 0x01	; 1
    19e8:	0e 94 e5 08 	call	0x11ca	; 0x11ca <DIO_voidSetPinValue>
	DIO_voidSetPinValue(motor._PORT,motor._PIN2,HIGH);
    19ec:	8b 81       	ldd	r24, Y+3	; 0x03
    19ee:	9a 81       	ldd	r25, Y+2	; 0x02
    19f0:	69 2f       	mov	r22, r25
    19f2:	40 e0       	ldi	r20, 0x00	; 0
    19f4:	0e 94 e5 08 	call	0x11ca	; 0x11ca <DIO_voidSetPinValue>



}
    19f8:	0f 90       	pop	r0
    19fa:	0f 90       	pop	r0
    19fc:	0f 90       	pop	r0
    19fe:	0f 90       	pop	r0
    1a00:	cf 91       	pop	r28
    1a02:	df 91       	pop	r29
    1a04:	08 95       	ret

00001a06 <MOTOR_voidStopMotor>:

// function to stop the motor speed
void MOTOR_voidStopMotor(struct MOTOR motor)
{
    1a06:	df 93       	push	r29
    1a08:	cf 93       	push	r28
    1a0a:	00 d0       	rcall	.+0      	; 0x1a0c <MOTOR_voidStopMotor+0x6>
    1a0c:	00 d0       	rcall	.+0      	; 0x1a0e <MOTOR_voidStopMotor+0x8>
    1a0e:	cd b7       	in	r28, 0x3d	; 61
    1a10:	de b7       	in	r29, 0x3e	; 62
    1a12:	69 83       	std	Y+1, r22	; 0x01
    1a14:	7a 83       	std	Y+2, r23	; 0x02
    1a16:	8b 83       	std	Y+3, r24	; 0x03
    1a18:	9c 83       	std	Y+4, r25	; 0x04
	// the two pins is low
	DIO_voidSetPinValue(motor._PORT,motor._PIN1,LOW);
    1a1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1c:	99 81       	ldd	r25, Y+1	; 0x01
    1a1e:	69 2f       	mov	r22, r25
    1a20:	41 e0       	ldi	r20, 0x01	; 1
    1a22:	0e 94 e5 08 	call	0x11ca	; 0x11ca <DIO_voidSetPinValue>
	DIO_voidSetPinValue(motor._PORT,motor._PIN2,LOW);
    1a26:	8b 81       	ldd	r24, Y+3	; 0x03
    1a28:	9a 81       	ldd	r25, Y+2	; 0x02
    1a2a:	69 2f       	mov	r22, r25
    1a2c:	41 e0       	ldi	r20, 0x01	; 1
    1a2e:	0e 94 e5 08 	call	0x11ca	; 0x11ca <DIO_voidSetPinValue>


}
    1a32:	0f 90       	pop	r0
    1a34:	0f 90       	pop	r0
    1a36:	0f 90       	pop	r0
    1a38:	0f 90       	pop	r0
    1a3a:	cf 91       	pop	r28
    1a3c:	df 91       	pop	r29
    1a3e:	08 95       	ret

00001a40 <MOTOR_voidSetSpeed>:

/**
 * change this if not work
 * */
void MOTOR_voidSetSpeed(struct MOTOR motor, u16 speed )
{
    1a40:	df 93       	push	r29
    1a42:	cf 93       	push	r28
    1a44:	00 d0       	rcall	.+0      	; 0x1a46 <MOTOR_voidSetSpeed+0x6>
    1a46:	00 d0       	rcall	.+0      	; 0x1a48 <MOTOR_voidSetSpeed+0x8>
    1a48:	00 d0       	rcall	.+0      	; 0x1a4a <MOTOR_voidSetSpeed+0xa>
    1a4a:	cd b7       	in	r28, 0x3d	; 61
    1a4c:	de b7       	in	r29, 0x3e	; 62
    1a4e:	69 83       	std	Y+1, r22	; 0x01
    1a50:	7a 83       	std	Y+2, r23	; 0x02
    1a52:	8b 83       	std	Y+3, r24	; 0x03
    1a54:	9c 83       	std	Y+4, r25	; 0x04
    1a56:	5e 83       	std	Y+6, r21	; 0x06
    1a58:	4d 83       	std	Y+5, r20	; 0x05
	if (motor._PWMPIN == 4) {
    1a5a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a5c:	84 30       	cpi	r24, 0x04	; 4
    1a5e:	39 f4       	brne	.+14     	; 0x1a6e <MOTOR_voidSetSpeed+0x2e>
		PWM1_init();
    1a60:	0e 94 48 07 	call	0xe90	; 0xe90 <PWM1_init>
		PWM1_Bdutycycle(speed);
    1a64:	8d 81       	ldd	r24, Y+5	; 0x05
    1a66:	9e 81       	ldd	r25, Y+6	; 0x06
    1a68:	0e 94 81 07 	call	0xf02	; 0xf02 <PWM1_Bdutycycle>
    1a6c:	13 c0       	rjmp	.+38     	; 0x1a94 <MOTOR_voidSetSpeed+0x54>

	 } // TIMER 1 CHANNEL B

	else if (motor._PWMPIN == 5){
    1a6e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a70:	85 30       	cpi	r24, 0x05	; 5
    1a72:	39 f4       	brne	.+14     	; 0x1a82 <MOTOR_voidSetSpeed+0x42>
		PWM1_init();
    1a74:	0e 94 48 07 	call	0xe90	; 0xe90 <PWM1_init>
		PWM1_Adutycycle(speed);
    1a78:	8d 81       	ldd	r24, Y+5	; 0x05
    1a7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a7c:	0e 94 6a 07 	call	0xed4	; 0xed4 <PWM1_Adutycycle>
    1a80:	09 c0       	rjmp	.+18     	; 0x1a94 <MOTOR_voidSetSpeed+0x54>
	} // TIMER1 CHANNEL A
	else if (motor._PWMPIN == 3){
    1a82:	8c 81       	ldd	r24, Y+4	; 0x04
    1a84:	83 30       	cpi	r24, 0x03	; 3
    1a86:	31 f4       	brne	.+12     	; 0x1a94 <MOTOR_voidSetSpeed+0x54>
		PWM0_init();
    1a88:	0e 94 26 07 	call	0xe4c	; 0xe4c <PWM0_init>
		PWM0_dutycycle(speed);
    1a8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a90:	0e 94 38 07 	call	0xe70	; 0xe70 <PWM0_dutycycle>
	} // TIMER 0
}
    1a94:	26 96       	adiw	r28, 0x06	; 6
    1a96:	0f b6       	in	r0, 0x3f	; 63
    1a98:	f8 94       	cli
    1a9a:	de bf       	out	0x3e, r29	; 62
    1a9c:	0f be       	out	0x3f, r0	; 63
    1a9e:	cd bf       	out	0x3d, r28	; 61
    1aa0:	cf 91       	pop	r28
    1aa2:	df 91       	pop	r29
    1aa4:	08 95       	ret

00001aa6 <LED_voidInit>:
#include "../../Services/Bit_Math.h"
#include "../../Services/STD_LIB.h"


void LED_voidInit(u8 Copy_u8Port , u8 Copy_u8Pin)
{
    1aa6:	df 93       	push	r29
    1aa8:	cf 93       	push	r28
    1aaa:	00 d0       	rcall	.+0      	; 0x1aac <LED_voidInit+0x6>
    1aac:	cd b7       	in	r28, 0x3d	; 61
    1aae:	de b7       	in	r29, 0x3e	; 62
    1ab0:	89 83       	std	Y+1, r24	; 0x01
    1ab2:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPinDirection(Copy_u8Port,Copy_u8Pin,Output);
    1ab4:	89 81       	ldd	r24, Y+1	; 0x01
    1ab6:	6a 81       	ldd	r22, Y+2	; 0x02
    1ab8:	40 e0       	ldi	r20, 0x00	; 0
    1aba:	0e 94 e5 07 	call	0xfca	; 0xfca <DIO_voidSetPinDirection>
}
    1abe:	0f 90       	pop	r0
    1ac0:	0f 90       	pop	r0
    1ac2:	cf 91       	pop	r28
    1ac4:	df 91       	pop	r29
    1ac6:	08 95       	ret

00001ac8 <LED_voidOn>:

void LED_voidOn(u8 Copy_u8Port , u8 Copy_u8Pin)
{
    1ac8:	df 93       	push	r29
    1aca:	cf 93       	push	r28
    1acc:	00 d0       	rcall	.+0      	; 0x1ace <LED_voidOn+0x6>
    1ace:	cd b7       	in	r28, 0x3d	; 61
    1ad0:	de b7       	in	r29, 0x3e	; 62
    1ad2:	89 83       	std	Y+1, r24	; 0x01
    1ad4:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPinValue(Copy_u8Port,Copy_u8Pin,HIGH);
    1ad6:	89 81       	ldd	r24, Y+1	; 0x01
    1ad8:	6a 81       	ldd	r22, Y+2	; 0x02
    1ada:	40 e0       	ldi	r20, 0x00	; 0
    1adc:	0e 94 e5 08 	call	0x11ca	; 0x11ca <DIO_voidSetPinValue>
}
    1ae0:	0f 90       	pop	r0
    1ae2:	0f 90       	pop	r0
    1ae4:	cf 91       	pop	r28
    1ae6:	df 91       	pop	r29
    1ae8:	08 95       	ret

00001aea <LED_voidOff>:

void LED_voidOff(u8 Copy_u8Port , u8 Copy_u8Pin)
{
    1aea:	df 93       	push	r29
    1aec:	cf 93       	push	r28
    1aee:	00 d0       	rcall	.+0      	; 0x1af0 <LED_voidOff+0x6>
    1af0:	cd b7       	in	r28, 0x3d	; 61
    1af2:	de b7       	in	r29, 0x3e	; 62
    1af4:	89 83       	std	Y+1, r24	; 0x01
    1af6:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPinValue(Copy_u8Port,Copy_u8Pin,LOW);
    1af8:	89 81       	ldd	r24, Y+1	; 0x01
    1afa:	6a 81       	ldd	r22, Y+2	; 0x02
    1afc:	41 e0       	ldi	r20, 0x01	; 1
    1afe:	0e 94 e5 08 	call	0x11ca	; 0x11ca <DIO_voidSetPinValue>
}
    1b02:	0f 90       	pop	r0
    1b04:	0f 90       	pop	r0
    1b06:	cf 91       	pop	r28
    1b08:	df 91       	pop	r29
    1b0a:	08 95       	ret

00001b0c <LED_voidToggle>:
void LED_voidToggle(u8 Copy_u8Port , u8 Copy_u8Pin)
{
    1b0c:	df 93       	push	r29
    1b0e:	cf 93       	push	r28
    1b10:	00 d0       	rcall	.+0      	; 0x1b12 <LED_voidToggle+0x6>
    1b12:	cd b7       	in	r28, 0x3d	; 61
    1b14:	de b7       	in	r29, 0x3e	; 62
    1b16:	89 83       	std	Y+1, r24	; 0x01
    1b18:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidPinToggle(Copy_u8Port,Copy_u8Pin);
    1b1a:	89 81       	ldd	r24, Y+1	; 0x01
    1b1c:	6a 81       	ldd	r22, Y+2	; 0x02
    1b1e:	0e 94 e5 09 	call	0x13ca	; 0x13ca <DIO_voidPinToggle>
}
    1b22:	0f 90       	pop	r0
    1b24:	0f 90       	pop	r0
    1b26:	cf 91       	pop	r28
    1b28:	df 91       	pop	r29
    1b2a:	08 95       	ret

00001b2c <LCD_voidSendCommand>:

#include "../../MCAL/DIO/DIO_Interface.h"
#include "../../Services/STD_LIB.h"

void LCD_voidSendCommand(u8 Copy_u8Command)
{
    1b2c:	df 93       	push	r29
    1b2e:	cf 93       	push	r28
    1b30:	cd b7       	in	r28, 0x3d	; 61
    1b32:	de b7       	in	r29, 0x3e	; 62
    1b34:	2f 97       	sbiw	r28, 0x0f	; 15
    1b36:	0f b6       	in	r0, 0x3f	; 63
    1b38:	f8 94       	cli
    1b3a:	de bf       	out	0x3e, r29	; 62
    1b3c:	0f be       	out	0x3f, r0	; 63
    1b3e:	cd bf       	out	0x3d, r28	; 61
    1b40:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(CONTROL_PIN,Pin_0,LOW); 		     // RS
    1b42:	80 e0       	ldi	r24, 0x00	; 0
    1b44:	60 e0       	ldi	r22, 0x00	; 0
    1b46:	41 e0       	ldi	r20, 0x01	; 1
    1b48:	0e 94 e5 08 	call	0x11ca	; 0x11ca <DIO_voidSetPinValue>
	DIO_voidSetPinValue(CONTROL_PIN,Pin_1,LOW);             // RW
    1b4c:	80 e0       	ldi	r24, 0x00	; 0
    1b4e:	61 e0       	ldi	r22, 0x01	; 1
    1b50:	41 e0       	ldi	r20, 0x01	; 1
    1b52:	0e 94 e5 08 	call	0x11ca	; 0x11ca <DIO_voidSetPinValue>
	DIO_voidSetPortValue(DATA_PIN,Copy_u8Command);          // COMMAND
    1b56:	83 e0       	ldi	r24, 0x03	; 3
    1b58:	6f 85       	ldd	r22, Y+15	; 0x0f
    1b5a:	0e 94 1c 0b 	call	0x1638	; 0x1638 <DIO_voidSetPortValue>

	DIO_voidSetPinValue(CONTROL_PIN,Pin_2,HIGH);            // Enable
    1b5e:	80 e0       	ldi	r24, 0x00	; 0
    1b60:	62 e0       	ldi	r22, 0x02	; 2
    1b62:	40 e0       	ldi	r20, 0x00	; 0
    1b64:	0e 94 e5 08 	call	0x11ca	; 0x11ca <DIO_voidSetPinValue>
    1b68:	80 e0       	ldi	r24, 0x00	; 0
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	a0 e0       	ldi	r26, 0x00	; 0
    1b6e:	b0 e4       	ldi	r27, 0x40	; 64
    1b70:	8b 87       	std	Y+11, r24	; 0x0b
    1b72:	9c 87       	std	Y+12, r25	; 0x0c
    1b74:	ad 87       	std	Y+13, r26	; 0x0d
    1b76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b78:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b80:	20 e0       	ldi	r18, 0x00	; 0
    1b82:	30 e8       	ldi	r19, 0x80	; 128
    1b84:	4b e3       	ldi	r20, 0x3B	; 59
    1b86:	55 e4       	ldi	r21, 0x45	; 69
    1b88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b8c:	dc 01       	movw	r26, r24
    1b8e:	cb 01       	movw	r24, r22
    1b90:	8f 83       	std	Y+7, r24	; 0x07
    1b92:	98 87       	std	Y+8, r25	; 0x08
    1b94:	a9 87       	std	Y+9, r26	; 0x09
    1b96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b98:	6f 81       	ldd	r22, Y+7	; 0x07
    1b9a:	78 85       	ldd	r23, Y+8	; 0x08
    1b9c:	89 85       	ldd	r24, Y+9	; 0x09
    1b9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ba0:	20 e0       	ldi	r18, 0x00	; 0
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	40 e8       	ldi	r20, 0x80	; 128
    1ba6:	5f e3       	ldi	r21, 0x3F	; 63
    1ba8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bac:	88 23       	and	r24, r24
    1bae:	2c f4       	brge	.+10     	; 0x1bba <LCD_voidSendCommand+0x8e>
		__ticks = 1;
    1bb0:	81 e0       	ldi	r24, 0x01	; 1
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	9e 83       	std	Y+6, r25	; 0x06
    1bb6:	8d 83       	std	Y+5, r24	; 0x05
    1bb8:	3f c0       	rjmp	.+126    	; 0x1c38 <LCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    1bba:	6f 81       	ldd	r22, Y+7	; 0x07
    1bbc:	78 85       	ldd	r23, Y+8	; 0x08
    1bbe:	89 85       	ldd	r24, Y+9	; 0x09
    1bc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bc2:	20 e0       	ldi	r18, 0x00	; 0
    1bc4:	3f ef       	ldi	r19, 0xFF	; 255
    1bc6:	4f e7       	ldi	r20, 0x7F	; 127
    1bc8:	57 e4       	ldi	r21, 0x47	; 71
    1bca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bce:	18 16       	cp	r1, r24
    1bd0:	4c f5       	brge	.+82     	; 0x1c24 <LCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bd2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bd4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bda:	20 e0       	ldi	r18, 0x00	; 0
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	40 e2       	ldi	r20, 0x20	; 32
    1be0:	51 e4       	ldi	r21, 0x41	; 65
    1be2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1be6:	dc 01       	movw	r26, r24
    1be8:	cb 01       	movw	r24, r22
    1bea:	bc 01       	movw	r22, r24
    1bec:	cd 01       	movw	r24, r26
    1bee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf2:	dc 01       	movw	r26, r24
    1bf4:	cb 01       	movw	r24, r22
    1bf6:	9e 83       	std	Y+6, r25	; 0x06
    1bf8:	8d 83       	std	Y+5, r24	; 0x05
    1bfa:	0f c0       	rjmp	.+30     	; 0x1c1a <LCD_voidSendCommand+0xee>
    1bfc:	8c e2       	ldi	r24, 0x2C	; 44
    1bfe:	91 e0       	ldi	r25, 0x01	; 1
    1c00:	9c 83       	std	Y+4, r25	; 0x04
    1c02:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c04:	8b 81       	ldd	r24, Y+3	; 0x03
    1c06:	9c 81       	ldd	r25, Y+4	; 0x04
    1c08:	01 97       	sbiw	r24, 0x01	; 1
    1c0a:	f1 f7       	brne	.-4      	; 0x1c08 <LCD_voidSendCommand+0xdc>
    1c0c:	9c 83       	std	Y+4, r25	; 0x04
    1c0e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c10:	8d 81       	ldd	r24, Y+5	; 0x05
    1c12:	9e 81       	ldd	r25, Y+6	; 0x06
    1c14:	01 97       	sbiw	r24, 0x01	; 1
    1c16:	9e 83       	std	Y+6, r25	; 0x06
    1c18:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c1e:	00 97       	sbiw	r24, 0x00	; 0
    1c20:	69 f7       	brne	.-38     	; 0x1bfc <LCD_voidSendCommand+0xd0>
    1c22:	14 c0       	rjmp	.+40     	; 0x1c4c <LCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c24:	6f 81       	ldd	r22, Y+7	; 0x07
    1c26:	78 85       	ldd	r23, Y+8	; 0x08
    1c28:	89 85       	ldd	r24, Y+9	; 0x09
    1c2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c30:	dc 01       	movw	r26, r24
    1c32:	cb 01       	movw	r24, r22
    1c34:	9e 83       	std	Y+6, r25	; 0x06
    1c36:	8d 83       	std	Y+5, r24	; 0x05
    1c38:	8d 81       	ldd	r24, Y+5	; 0x05
    1c3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c3c:	9a 83       	std	Y+2, r25	; 0x02
    1c3e:	89 83       	std	Y+1, r24	; 0x01
    1c40:	89 81       	ldd	r24, Y+1	; 0x01
    1c42:	9a 81       	ldd	r25, Y+2	; 0x02
    1c44:	01 97       	sbiw	r24, 0x01	; 1
    1c46:	f1 f7       	brne	.-4      	; 0x1c44 <LCD_voidSendCommand+0x118>
    1c48:	9a 83       	std	Y+2, r25	; 0x02
    1c4a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_voidSetPinValue(CONTROL_PIN,Pin_2,LOW);             // Disable
    1c4c:	80 e0       	ldi	r24, 0x00	; 0
    1c4e:	62 e0       	ldi	r22, 0x02	; 2
    1c50:	41 e0       	ldi	r20, 0x01	; 1
    1c52:	0e 94 e5 08 	call	0x11ca	; 0x11ca <DIO_voidSetPinValue>

}
    1c56:	2f 96       	adiw	r28, 0x0f	; 15
    1c58:	0f b6       	in	r0, 0x3f	; 63
    1c5a:	f8 94       	cli
    1c5c:	de bf       	out	0x3e, r29	; 62
    1c5e:	0f be       	out	0x3f, r0	; 63
    1c60:	cd bf       	out	0x3d, r28	; 61
    1c62:	cf 91       	pop	r28
    1c64:	df 91       	pop	r29
    1c66:	08 95       	ret

00001c68 <LCD_voidSendData>:
void LCD_voidSendData(u8 Copy_u8Data)
{
    1c68:	df 93       	push	r29
    1c6a:	cf 93       	push	r28
    1c6c:	cd b7       	in	r28, 0x3d	; 61
    1c6e:	de b7       	in	r29, 0x3e	; 62
    1c70:	2f 97       	sbiw	r28, 0x0f	; 15
    1c72:	0f b6       	in	r0, 0x3f	; 63
    1c74:	f8 94       	cli
    1c76:	de bf       	out	0x3e, r29	; 62
    1c78:	0f be       	out	0x3f, r0	; 63
    1c7a:	cd bf       	out	0x3d, r28	; 61
    1c7c:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(CONTROL_PIN,Pin_0,HIGH); 			  // RS
    1c7e:	80 e0       	ldi	r24, 0x00	; 0
    1c80:	60 e0       	ldi	r22, 0x00	; 0
    1c82:	40 e0       	ldi	r20, 0x00	; 0
    1c84:	0e 94 e5 08 	call	0x11ca	; 0x11ca <DIO_voidSetPinValue>
	DIO_voidSetPinValue(CONTROL_PIN,Pin_1,LOW);              // RW
    1c88:	80 e0       	ldi	r24, 0x00	; 0
    1c8a:	61 e0       	ldi	r22, 0x01	; 1
    1c8c:	41 e0       	ldi	r20, 0x01	; 1
    1c8e:	0e 94 e5 08 	call	0x11ca	; 0x11ca <DIO_voidSetPinValue>
	DIO_voidSetPortValue(DATA_PIN,Copy_u8Data);              // DATA
    1c92:	83 e0       	ldi	r24, 0x03	; 3
    1c94:	6f 85       	ldd	r22, Y+15	; 0x0f
    1c96:	0e 94 1c 0b 	call	0x1638	; 0x1638 <DIO_voidSetPortValue>

	DIO_voidSetPinValue(CONTROL_PIN,Pin_2,HIGH);             // Enable
    1c9a:	80 e0       	ldi	r24, 0x00	; 0
    1c9c:	62 e0       	ldi	r22, 0x02	; 2
    1c9e:	40 e0       	ldi	r20, 0x00	; 0
    1ca0:	0e 94 e5 08 	call	0x11ca	; 0x11ca <DIO_voidSetPinValue>
    1ca4:	80 e0       	ldi	r24, 0x00	; 0
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	a0 e0       	ldi	r26, 0x00	; 0
    1caa:	b0 e4       	ldi	r27, 0x40	; 64
    1cac:	8b 87       	std	Y+11, r24	; 0x0b
    1cae:	9c 87       	std	Y+12, r25	; 0x0c
    1cb0:	ad 87       	std	Y+13, r26	; 0x0d
    1cb2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cb4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cb6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cb8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cba:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cbc:	20 e0       	ldi	r18, 0x00	; 0
    1cbe:	30 e8       	ldi	r19, 0x80	; 128
    1cc0:	4b e3       	ldi	r20, 0x3B	; 59
    1cc2:	55 e4       	ldi	r21, 0x45	; 69
    1cc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc8:	dc 01       	movw	r26, r24
    1cca:	cb 01       	movw	r24, r22
    1ccc:	8f 83       	std	Y+7, r24	; 0x07
    1cce:	98 87       	std	Y+8, r25	; 0x08
    1cd0:	a9 87       	std	Y+9, r26	; 0x09
    1cd2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cd4:	6f 81       	ldd	r22, Y+7	; 0x07
    1cd6:	78 85       	ldd	r23, Y+8	; 0x08
    1cd8:	89 85       	ldd	r24, Y+9	; 0x09
    1cda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cdc:	20 e0       	ldi	r18, 0x00	; 0
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	40 e8       	ldi	r20, 0x80	; 128
    1ce2:	5f e3       	ldi	r21, 0x3F	; 63
    1ce4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ce8:	88 23       	and	r24, r24
    1cea:	2c f4       	brge	.+10     	; 0x1cf6 <LCD_voidSendData+0x8e>
		__ticks = 1;
    1cec:	81 e0       	ldi	r24, 0x01	; 1
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	9e 83       	std	Y+6, r25	; 0x06
    1cf2:	8d 83       	std	Y+5, r24	; 0x05
    1cf4:	3f c0       	rjmp	.+126    	; 0x1d74 <LCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    1cf6:	6f 81       	ldd	r22, Y+7	; 0x07
    1cf8:	78 85       	ldd	r23, Y+8	; 0x08
    1cfa:	89 85       	ldd	r24, Y+9	; 0x09
    1cfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cfe:	20 e0       	ldi	r18, 0x00	; 0
    1d00:	3f ef       	ldi	r19, 0xFF	; 255
    1d02:	4f e7       	ldi	r20, 0x7F	; 127
    1d04:	57 e4       	ldi	r21, 0x47	; 71
    1d06:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d0a:	18 16       	cp	r1, r24
    1d0c:	4c f5       	brge	.+82     	; 0x1d60 <LCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d10:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d12:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d14:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d16:	20 e0       	ldi	r18, 0x00	; 0
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	40 e2       	ldi	r20, 0x20	; 32
    1d1c:	51 e4       	ldi	r21, 0x41	; 65
    1d1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d22:	dc 01       	movw	r26, r24
    1d24:	cb 01       	movw	r24, r22
    1d26:	bc 01       	movw	r22, r24
    1d28:	cd 01       	movw	r24, r26
    1d2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d2e:	dc 01       	movw	r26, r24
    1d30:	cb 01       	movw	r24, r22
    1d32:	9e 83       	std	Y+6, r25	; 0x06
    1d34:	8d 83       	std	Y+5, r24	; 0x05
    1d36:	0f c0       	rjmp	.+30     	; 0x1d56 <LCD_voidSendData+0xee>
    1d38:	8c e2       	ldi	r24, 0x2C	; 44
    1d3a:	91 e0       	ldi	r25, 0x01	; 1
    1d3c:	9c 83       	std	Y+4, r25	; 0x04
    1d3e:	8b 83       	std	Y+3, r24	; 0x03
    1d40:	8b 81       	ldd	r24, Y+3	; 0x03
    1d42:	9c 81       	ldd	r25, Y+4	; 0x04
    1d44:	01 97       	sbiw	r24, 0x01	; 1
    1d46:	f1 f7       	brne	.-4      	; 0x1d44 <LCD_voidSendData+0xdc>
    1d48:	9c 83       	std	Y+4, r25	; 0x04
    1d4a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d50:	01 97       	sbiw	r24, 0x01	; 1
    1d52:	9e 83       	std	Y+6, r25	; 0x06
    1d54:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d56:	8d 81       	ldd	r24, Y+5	; 0x05
    1d58:	9e 81       	ldd	r25, Y+6	; 0x06
    1d5a:	00 97       	sbiw	r24, 0x00	; 0
    1d5c:	69 f7       	brne	.-38     	; 0x1d38 <LCD_voidSendData+0xd0>
    1d5e:	14 c0       	rjmp	.+40     	; 0x1d88 <LCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d60:	6f 81       	ldd	r22, Y+7	; 0x07
    1d62:	78 85       	ldd	r23, Y+8	; 0x08
    1d64:	89 85       	ldd	r24, Y+9	; 0x09
    1d66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d6c:	dc 01       	movw	r26, r24
    1d6e:	cb 01       	movw	r24, r22
    1d70:	9e 83       	std	Y+6, r25	; 0x06
    1d72:	8d 83       	std	Y+5, r24	; 0x05
    1d74:	8d 81       	ldd	r24, Y+5	; 0x05
    1d76:	9e 81       	ldd	r25, Y+6	; 0x06
    1d78:	9a 83       	std	Y+2, r25	; 0x02
    1d7a:	89 83       	std	Y+1, r24	; 0x01
    1d7c:	89 81       	ldd	r24, Y+1	; 0x01
    1d7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d80:	01 97       	sbiw	r24, 0x01	; 1
    1d82:	f1 f7       	brne	.-4      	; 0x1d80 <LCD_voidSendData+0x118>
    1d84:	9a 83       	std	Y+2, r25	; 0x02
    1d86:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_voidSetPinValue(CONTROL_PIN,Pin_2,LOW);              // Disable
    1d88:	80 e0       	ldi	r24, 0x00	; 0
    1d8a:	62 e0       	ldi	r22, 0x02	; 2
    1d8c:	41 e0       	ldi	r20, 0x01	; 1
    1d8e:	0e 94 e5 08 	call	0x11ca	; 0x11ca <DIO_voidSetPinValue>
}
    1d92:	2f 96       	adiw	r28, 0x0f	; 15
    1d94:	0f b6       	in	r0, 0x3f	; 63
    1d96:	f8 94       	cli
    1d98:	de bf       	out	0x3e, r29	; 62
    1d9a:	0f be       	out	0x3f, r0	; 63
    1d9c:	cd bf       	out	0x3d, r28	; 61
    1d9e:	cf 91       	pop	r28
    1da0:	df 91       	pop	r29
    1da2:	08 95       	ret

00001da4 <LCD_voidHWInit>:

void LCD_voidHWInit(void)
{
    1da4:	df 93       	push	r29
    1da6:	cf 93       	push	r28
    1da8:	cd b7       	in	r28, 0x3d	; 61
    1daa:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(CONTROL_PIN,Pin_0,Output); 	  // RS
    1dac:	80 e0       	ldi	r24, 0x00	; 0
    1dae:	60 e0       	ldi	r22, 0x00	; 0
    1db0:	40 e0       	ldi	r20, 0x00	; 0
    1db2:	0e 94 e5 07 	call	0xfca	; 0xfca <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(CONTROL_PIN,Pin_1,Output); 	  // RW
    1db6:	80 e0       	ldi	r24, 0x00	; 0
    1db8:	61 e0       	ldi	r22, 0x01	; 1
    1dba:	40 e0       	ldi	r20, 0x00	; 0
    1dbc:	0e 94 e5 07 	call	0xfca	; 0xfca <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(CONTROL_PIN,Pin_2,Output); 	  // E
    1dc0:	80 e0       	ldi	r24, 0x00	; 0
    1dc2:	62 e0       	ldi	r22, 0x02	; 2
    1dc4:	40 e0       	ldi	r20, 0x00	; 0
    1dc6:	0e 94 e5 07 	call	0xfca	; 0xfca <DIO_voidSetPinDirection>

	DIO_voidSetPortDirection(DATA_PIN,0xFF);           	  // DATA
    1dca:	83 e0       	ldi	r24, 0x03	; 3
    1dcc:	6f ef       	ldi	r22, 0xFF	; 255
    1dce:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_voidSetPortDirection>
}
    1dd2:	cf 91       	pop	r28
    1dd4:	df 91       	pop	r29
    1dd6:	08 95       	ret

00001dd8 <LCD_voidSWInit>:


void LCD_voidSWInit(void)
{
    1dd8:	df 93       	push	r29
    1dda:	cf 93       	push	r28
    1ddc:	cd b7       	in	r28, 0x3d	; 61
    1dde:	de b7       	in	r29, 0x3e	; 62
    1de0:	ee 97       	sbiw	r28, 0x3e	; 62
    1de2:	0f b6       	in	r0, 0x3f	; 63
    1de4:	f8 94       	cli
    1de6:	de bf       	out	0x3e, r29	; 62
    1de8:	0f be       	out	0x3f, r0	; 63
    1dea:	cd bf       	out	0x3d, r28	; 61
    1dec:	80 e0       	ldi	r24, 0x00	; 0
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	a0 e2       	ldi	r26, 0x20	; 32
    1df2:	b2 e4       	ldi	r27, 0x42	; 66
    1df4:	8b af       	std	Y+59, r24	; 0x3b
    1df6:	9c af       	std	Y+60, r25	; 0x3c
    1df8:	ad af       	std	Y+61, r26	; 0x3d
    1dfa:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dfc:	6b ad       	ldd	r22, Y+59	; 0x3b
    1dfe:	7c ad       	ldd	r23, Y+60	; 0x3c
    1e00:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e02:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e04:	20 e0       	ldi	r18, 0x00	; 0
    1e06:	30 e8       	ldi	r19, 0x80	; 128
    1e08:	4b e3       	ldi	r20, 0x3B	; 59
    1e0a:	55 e4       	ldi	r21, 0x45	; 69
    1e0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e10:	dc 01       	movw	r26, r24
    1e12:	cb 01       	movw	r24, r22
    1e14:	8f ab       	std	Y+55, r24	; 0x37
    1e16:	98 af       	std	Y+56, r25	; 0x38
    1e18:	a9 af       	std	Y+57, r26	; 0x39
    1e1a:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1e1c:	6f a9       	ldd	r22, Y+55	; 0x37
    1e1e:	78 ad       	ldd	r23, Y+56	; 0x38
    1e20:	89 ad       	ldd	r24, Y+57	; 0x39
    1e22:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e24:	20 e0       	ldi	r18, 0x00	; 0
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	40 e8       	ldi	r20, 0x80	; 128
    1e2a:	5f e3       	ldi	r21, 0x3F	; 63
    1e2c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e30:	88 23       	and	r24, r24
    1e32:	2c f4       	brge	.+10     	; 0x1e3e <LCD_voidSWInit+0x66>
		__ticks = 1;
    1e34:	81 e0       	ldi	r24, 0x01	; 1
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	9e ab       	std	Y+54, r25	; 0x36
    1e3a:	8d ab       	std	Y+53, r24	; 0x35
    1e3c:	3f c0       	rjmp	.+126    	; 0x1ebc <LCD_voidSWInit+0xe4>
	else if (__tmp > 65535)
    1e3e:	6f a9       	ldd	r22, Y+55	; 0x37
    1e40:	78 ad       	ldd	r23, Y+56	; 0x38
    1e42:	89 ad       	ldd	r24, Y+57	; 0x39
    1e44:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e46:	20 e0       	ldi	r18, 0x00	; 0
    1e48:	3f ef       	ldi	r19, 0xFF	; 255
    1e4a:	4f e7       	ldi	r20, 0x7F	; 127
    1e4c:	57 e4       	ldi	r21, 0x47	; 71
    1e4e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e52:	18 16       	cp	r1, r24
    1e54:	4c f5       	brge	.+82     	; 0x1ea8 <LCD_voidSWInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e56:	6b ad       	ldd	r22, Y+59	; 0x3b
    1e58:	7c ad       	ldd	r23, Y+60	; 0x3c
    1e5a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e5c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e5e:	20 e0       	ldi	r18, 0x00	; 0
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	40 e2       	ldi	r20, 0x20	; 32
    1e64:	51 e4       	ldi	r21, 0x41	; 65
    1e66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e6a:	dc 01       	movw	r26, r24
    1e6c:	cb 01       	movw	r24, r22
    1e6e:	bc 01       	movw	r22, r24
    1e70:	cd 01       	movw	r24, r26
    1e72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e76:	dc 01       	movw	r26, r24
    1e78:	cb 01       	movw	r24, r22
    1e7a:	9e ab       	std	Y+54, r25	; 0x36
    1e7c:	8d ab       	std	Y+53, r24	; 0x35
    1e7e:	0f c0       	rjmp	.+30     	; 0x1e9e <LCD_voidSWInit+0xc6>
    1e80:	8c e2       	ldi	r24, 0x2C	; 44
    1e82:	91 e0       	ldi	r25, 0x01	; 1
    1e84:	9c ab       	std	Y+52, r25	; 0x34
    1e86:	8b ab       	std	Y+51, r24	; 0x33
    1e88:	8b a9       	ldd	r24, Y+51	; 0x33
    1e8a:	9c a9       	ldd	r25, Y+52	; 0x34
    1e8c:	01 97       	sbiw	r24, 0x01	; 1
    1e8e:	f1 f7       	brne	.-4      	; 0x1e8c <LCD_voidSWInit+0xb4>
    1e90:	9c ab       	std	Y+52, r25	; 0x34
    1e92:	8b ab       	std	Y+51, r24	; 0x33
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e94:	8d a9       	ldd	r24, Y+53	; 0x35
    1e96:	9e a9       	ldd	r25, Y+54	; 0x36
    1e98:	01 97       	sbiw	r24, 0x01	; 1
    1e9a:	9e ab       	std	Y+54, r25	; 0x36
    1e9c:	8d ab       	std	Y+53, r24	; 0x35
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e9e:	8d a9       	ldd	r24, Y+53	; 0x35
    1ea0:	9e a9       	ldd	r25, Y+54	; 0x36
    1ea2:	00 97       	sbiw	r24, 0x00	; 0
    1ea4:	69 f7       	brne	.-38     	; 0x1e80 <LCD_voidSWInit+0xa8>
    1ea6:	14 c0       	rjmp	.+40     	; 0x1ed0 <LCD_voidSWInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ea8:	6f a9       	ldd	r22, Y+55	; 0x37
    1eaa:	78 ad       	ldd	r23, Y+56	; 0x38
    1eac:	89 ad       	ldd	r24, Y+57	; 0x39
    1eae:	9a ad       	ldd	r25, Y+58	; 0x3a
    1eb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb4:	dc 01       	movw	r26, r24
    1eb6:	cb 01       	movw	r24, r22
    1eb8:	9e ab       	std	Y+54, r25	; 0x36
    1eba:	8d ab       	std	Y+53, r24	; 0x35
    1ebc:	8d a9       	ldd	r24, Y+53	; 0x35
    1ebe:	9e a9       	ldd	r25, Y+54	; 0x36
    1ec0:	9a ab       	std	Y+50, r25	; 0x32
    1ec2:	89 ab       	std	Y+49, r24	; 0x31
    1ec4:	89 a9       	ldd	r24, Y+49	; 0x31
    1ec6:	9a a9       	ldd	r25, Y+50	; 0x32
    1ec8:	01 97       	sbiw	r24, 0x01	; 1
    1eca:	f1 f7       	brne	.-4      	; 0x1ec8 <LCD_voidSWInit+0xf0>
    1ecc:	9a ab       	std	Y+50, r25	; 0x32
    1ece:	89 ab       	std	Y+49, r24	; 0x31
	_delay_ms(40);
	LCD_voidSendCommand(0X38);
    1ed0:	88 e3       	ldi	r24, 0x38	; 56
    1ed2:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <LCD_voidSendCommand>
    1ed6:	80 e0       	ldi	r24, 0x00	; 0
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	a0 e2       	ldi	r26, 0x20	; 32
    1edc:	b2 e4       	ldi	r27, 0x42	; 66
    1ede:	8d a7       	std	Y+45, r24	; 0x2d
    1ee0:	9e a7       	std	Y+46, r25	; 0x2e
    1ee2:	af a7       	std	Y+47, r26	; 0x2f
    1ee4:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ee6:	6d a5       	ldd	r22, Y+45	; 0x2d
    1ee8:	7e a5       	ldd	r23, Y+46	; 0x2e
    1eea:	8f a5       	ldd	r24, Y+47	; 0x2f
    1eec:	98 a9       	ldd	r25, Y+48	; 0x30
    1eee:	20 e0       	ldi	r18, 0x00	; 0
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	40 e8       	ldi	r20, 0x80	; 128
    1ef4:	50 e4       	ldi	r21, 0x40	; 64
    1ef6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1efa:	dc 01       	movw	r26, r24
    1efc:	cb 01       	movw	r24, r22
    1efe:	89 a7       	std	Y+41, r24	; 0x29
    1f00:	9a a7       	std	Y+42, r25	; 0x2a
    1f02:	ab a7       	std	Y+43, r26	; 0x2b
    1f04:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1f06:	69 a5       	ldd	r22, Y+41	; 0x29
    1f08:	7a a5       	ldd	r23, Y+42	; 0x2a
    1f0a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f0c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f0e:	20 e0       	ldi	r18, 0x00	; 0
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	40 e8       	ldi	r20, 0x80	; 128
    1f14:	5f e3       	ldi	r21, 0x3F	; 63
    1f16:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f1a:	88 23       	and	r24, r24
    1f1c:	1c f4       	brge	.+6      	; 0x1f24 <LCD_voidSWInit+0x14c>
		__ticks = 1;
    1f1e:	81 e0       	ldi	r24, 0x01	; 1
    1f20:	88 a7       	std	Y+40, r24	; 0x28
    1f22:	91 c0       	rjmp	.+290    	; 0x2046 <LCD_voidSWInit+0x26e>
	else if (__tmp > 255)
    1f24:	69 a5       	ldd	r22, Y+41	; 0x29
    1f26:	7a a5       	ldd	r23, Y+42	; 0x2a
    1f28:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f2a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f2c:	20 e0       	ldi	r18, 0x00	; 0
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	4f e7       	ldi	r20, 0x7F	; 127
    1f32:	53 e4       	ldi	r21, 0x43	; 67
    1f34:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f38:	18 16       	cp	r1, r24
    1f3a:	0c f0       	brlt	.+2      	; 0x1f3e <LCD_voidSWInit+0x166>
    1f3c:	7b c0       	rjmp	.+246    	; 0x2034 <LCD_voidSWInit+0x25c>
	{
		_delay_ms(__us / 1000.0);
    1f3e:	6d a5       	ldd	r22, Y+45	; 0x2d
    1f40:	7e a5       	ldd	r23, Y+46	; 0x2e
    1f42:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f44:	98 a9       	ldd	r25, Y+48	; 0x30
    1f46:	20 e0       	ldi	r18, 0x00	; 0
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	4a e7       	ldi	r20, 0x7A	; 122
    1f4c:	54 e4       	ldi	r21, 0x44	; 68
    1f4e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f52:	dc 01       	movw	r26, r24
    1f54:	cb 01       	movw	r24, r22
    1f56:	8c a3       	std	Y+36, r24	; 0x24
    1f58:	9d a3       	std	Y+37, r25	; 0x25
    1f5a:	ae a3       	std	Y+38, r26	; 0x26
    1f5c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f5e:	6c a1       	ldd	r22, Y+36	; 0x24
    1f60:	7d a1       	ldd	r23, Y+37	; 0x25
    1f62:	8e a1       	ldd	r24, Y+38	; 0x26
    1f64:	9f a1       	ldd	r25, Y+39	; 0x27
    1f66:	20 e0       	ldi	r18, 0x00	; 0
    1f68:	30 e8       	ldi	r19, 0x80	; 128
    1f6a:	4b e3       	ldi	r20, 0x3B	; 59
    1f6c:	55 e4       	ldi	r21, 0x45	; 69
    1f6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f72:	dc 01       	movw	r26, r24
    1f74:	cb 01       	movw	r24, r22
    1f76:	88 a3       	std	Y+32, r24	; 0x20
    1f78:	99 a3       	std	Y+33, r25	; 0x21
    1f7a:	aa a3       	std	Y+34, r26	; 0x22
    1f7c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1f7e:	68 a1       	ldd	r22, Y+32	; 0x20
    1f80:	79 a1       	ldd	r23, Y+33	; 0x21
    1f82:	8a a1       	ldd	r24, Y+34	; 0x22
    1f84:	9b a1       	ldd	r25, Y+35	; 0x23
    1f86:	20 e0       	ldi	r18, 0x00	; 0
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	40 e8       	ldi	r20, 0x80	; 128
    1f8c:	5f e3       	ldi	r21, 0x3F	; 63
    1f8e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f92:	88 23       	and	r24, r24
    1f94:	2c f4       	brge	.+10     	; 0x1fa0 <LCD_voidSWInit+0x1c8>
		__ticks = 1;
    1f96:	81 e0       	ldi	r24, 0x01	; 1
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	9f 8f       	std	Y+31, r25	; 0x1f
    1f9c:	8e 8f       	std	Y+30, r24	; 0x1e
    1f9e:	3f c0       	rjmp	.+126    	; 0x201e <LCD_voidSWInit+0x246>
	else if (__tmp > 65535)
    1fa0:	68 a1       	ldd	r22, Y+32	; 0x20
    1fa2:	79 a1       	ldd	r23, Y+33	; 0x21
    1fa4:	8a a1       	ldd	r24, Y+34	; 0x22
    1fa6:	9b a1       	ldd	r25, Y+35	; 0x23
    1fa8:	20 e0       	ldi	r18, 0x00	; 0
    1faa:	3f ef       	ldi	r19, 0xFF	; 255
    1fac:	4f e7       	ldi	r20, 0x7F	; 127
    1fae:	57 e4       	ldi	r21, 0x47	; 71
    1fb0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fb4:	18 16       	cp	r1, r24
    1fb6:	4c f5       	brge	.+82     	; 0x200a <LCD_voidSWInit+0x232>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fb8:	6c a1       	ldd	r22, Y+36	; 0x24
    1fba:	7d a1       	ldd	r23, Y+37	; 0x25
    1fbc:	8e a1       	ldd	r24, Y+38	; 0x26
    1fbe:	9f a1       	ldd	r25, Y+39	; 0x27
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	40 e2       	ldi	r20, 0x20	; 32
    1fc6:	51 e4       	ldi	r21, 0x41	; 65
    1fc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fcc:	dc 01       	movw	r26, r24
    1fce:	cb 01       	movw	r24, r22
    1fd0:	bc 01       	movw	r22, r24
    1fd2:	cd 01       	movw	r24, r26
    1fd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd8:	dc 01       	movw	r26, r24
    1fda:	cb 01       	movw	r24, r22
    1fdc:	9f 8f       	std	Y+31, r25	; 0x1f
    1fde:	8e 8f       	std	Y+30, r24	; 0x1e
    1fe0:	0f c0       	rjmp	.+30     	; 0x2000 <LCD_voidSWInit+0x228>
    1fe2:	8c e2       	ldi	r24, 0x2C	; 44
    1fe4:	91 e0       	ldi	r25, 0x01	; 1
    1fe6:	9d 8f       	std	Y+29, r25	; 0x1d
    1fe8:	8c 8f       	std	Y+28, r24	; 0x1c
    1fea:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1fec:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1fee:	01 97       	sbiw	r24, 0x01	; 1
    1ff0:	f1 f7       	brne	.-4      	; 0x1fee <LCD_voidSWInit+0x216>
    1ff2:	9d 8f       	std	Y+29, r25	; 0x1d
    1ff4:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ff6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ff8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1ffa:	01 97       	sbiw	r24, 0x01	; 1
    1ffc:	9f 8f       	std	Y+31, r25	; 0x1f
    1ffe:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2000:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2002:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2004:	00 97       	sbiw	r24, 0x00	; 0
    2006:	69 f7       	brne	.-38     	; 0x1fe2 <LCD_voidSWInit+0x20a>
    2008:	24 c0       	rjmp	.+72     	; 0x2052 <LCD_voidSWInit+0x27a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    200a:	68 a1       	ldd	r22, Y+32	; 0x20
    200c:	79 a1       	ldd	r23, Y+33	; 0x21
    200e:	8a a1       	ldd	r24, Y+34	; 0x22
    2010:	9b a1       	ldd	r25, Y+35	; 0x23
    2012:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2016:	dc 01       	movw	r26, r24
    2018:	cb 01       	movw	r24, r22
    201a:	9f 8f       	std	Y+31, r25	; 0x1f
    201c:	8e 8f       	std	Y+30, r24	; 0x1e
    201e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2020:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2022:	9b 8f       	std	Y+27, r25	; 0x1b
    2024:	8a 8f       	std	Y+26, r24	; 0x1a
    2026:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2028:	9b 8d       	ldd	r25, Y+27	; 0x1b
    202a:	01 97       	sbiw	r24, 0x01	; 1
    202c:	f1 f7       	brne	.-4      	; 0x202a <LCD_voidSWInit+0x252>
    202e:	9b 8f       	std	Y+27, r25	; 0x1b
    2030:	8a 8f       	std	Y+26, r24	; 0x1a
    2032:	0f c0       	rjmp	.+30     	; 0x2052 <LCD_voidSWInit+0x27a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2034:	69 a5       	ldd	r22, Y+41	; 0x29
    2036:	7a a5       	ldd	r23, Y+42	; 0x2a
    2038:	8b a5       	ldd	r24, Y+43	; 0x2b
    203a:	9c a5       	ldd	r25, Y+44	; 0x2c
    203c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2040:	dc 01       	movw	r26, r24
    2042:	cb 01       	movw	r24, r22
    2044:	88 a7       	std	Y+40, r24	; 0x28
    2046:	88 a5       	ldd	r24, Y+40	; 0x28
    2048:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    204a:	89 8d       	ldd	r24, Y+25	; 0x19
    204c:	8a 95       	dec	r24
    204e:	f1 f7       	brne	.-4      	; 0x204c <LCD_voidSWInit+0x274>
    2050:	89 8f       	std	Y+25, r24	; 0x19

	_delay_us(40);
	LCD_voidSendCommand(DISPALY_OFF);
    2052:	8c e0       	ldi	r24, 0x0C	; 12
    2054:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <LCD_voidSendCommand>
    2058:	80 e0       	ldi	r24, 0x00	; 0
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	a0 e2       	ldi	r26, 0x20	; 32
    205e:	b2 e4       	ldi	r27, 0x42	; 66
    2060:	8d 8b       	std	Y+21, r24	; 0x15
    2062:	9e 8b       	std	Y+22, r25	; 0x16
    2064:	af 8b       	std	Y+23, r26	; 0x17
    2066:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2068:	6d 89       	ldd	r22, Y+21	; 0x15
    206a:	7e 89       	ldd	r23, Y+22	; 0x16
    206c:	8f 89       	ldd	r24, Y+23	; 0x17
    206e:	98 8d       	ldd	r25, Y+24	; 0x18
    2070:	20 e0       	ldi	r18, 0x00	; 0
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	40 e8       	ldi	r20, 0x80	; 128
    2076:	50 e4       	ldi	r21, 0x40	; 64
    2078:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    207c:	dc 01       	movw	r26, r24
    207e:	cb 01       	movw	r24, r22
    2080:	89 8b       	std	Y+17, r24	; 0x11
    2082:	9a 8b       	std	Y+18, r25	; 0x12
    2084:	ab 8b       	std	Y+19, r26	; 0x13
    2086:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2088:	69 89       	ldd	r22, Y+17	; 0x11
    208a:	7a 89       	ldd	r23, Y+18	; 0x12
    208c:	8b 89       	ldd	r24, Y+19	; 0x13
    208e:	9c 89       	ldd	r25, Y+20	; 0x14
    2090:	20 e0       	ldi	r18, 0x00	; 0
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	40 e8       	ldi	r20, 0x80	; 128
    2096:	5f e3       	ldi	r21, 0x3F	; 63
    2098:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    209c:	88 23       	and	r24, r24
    209e:	1c f4       	brge	.+6      	; 0x20a6 <LCD_voidSWInit+0x2ce>
		__ticks = 1;
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	88 8b       	std	Y+16, r24	; 0x10
    20a4:	91 c0       	rjmp	.+290    	; 0x21c8 <LCD_voidSWInit+0x3f0>
	else if (__tmp > 255)
    20a6:	69 89       	ldd	r22, Y+17	; 0x11
    20a8:	7a 89       	ldd	r23, Y+18	; 0x12
    20aa:	8b 89       	ldd	r24, Y+19	; 0x13
    20ac:	9c 89       	ldd	r25, Y+20	; 0x14
    20ae:	20 e0       	ldi	r18, 0x00	; 0
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	4f e7       	ldi	r20, 0x7F	; 127
    20b4:	53 e4       	ldi	r21, 0x43	; 67
    20b6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20ba:	18 16       	cp	r1, r24
    20bc:	0c f0       	brlt	.+2      	; 0x20c0 <LCD_voidSWInit+0x2e8>
    20be:	7b c0       	rjmp	.+246    	; 0x21b6 <LCD_voidSWInit+0x3de>
	{
		_delay_ms(__us / 1000.0);
    20c0:	6d 89       	ldd	r22, Y+21	; 0x15
    20c2:	7e 89       	ldd	r23, Y+22	; 0x16
    20c4:	8f 89       	ldd	r24, Y+23	; 0x17
    20c6:	98 8d       	ldd	r25, Y+24	; 0x18
    20c8:	20 e0       	ldi	r18, 0x00	; 0
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	4a e7       	ldi	r20, 0x7A	; 122
    20ce:	54 e4       	ldi	r21, 0x44	; 68
    20d0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    20d4:	dc 01       	movw	r26, r24
    20d6:	cb 01       	movw	r24, r22
    20d8:	8c 87       	std	Y+12, r24	; 0x0c
    20da:	9d 87       	std	Y+13, r25	; 0x0d
    20dc:	ae 87       	std	Y+14, r26	; 0x0e
    20de:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20e0:	6c 85       	ldd	r22, Y+12	; 0x0c
    20e2:	7d 85       	ldd	r23, Y+13	; 0x0d
    20e4:	8e 85       	ldd	r24, Y+14	; 0x0e
    20e6:	9f 85       	ldd	r25, Y+15	; 0x0f
    20e8:	20 e0       	ldi	r18, 0x00	; 0
    20ea:	30 e8       	ldi	r19, 0x80	; 128
    20ec:	4b e3       	ldi	r20, 0x3B	; 59
    20ee:	55 e4       	ldi	r21, 0x45	; 69
    20f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f4:	dc 01       	movw	r26, r24
    20f6:	cb 01       	movw	r24, r22
    20f8:	88 87       	std	Y+8, r24	; 0x08
    20fa:	99 87       	std	Y+9, r25	; 0x09
    20fc:	aa 87       	std	Y+10, r26	; 0x0a
    20fe:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2100:	68 85       	ldd	r22, Y+8	; 0x08
    2102:	79 85       	ldd	r23, Y+9	; 0x09
    2104:	8a 85       	ldd	r24, Y+10	; 0x0a
    2106:	9b 85       	ldd	r25, Y+11	; 0x0b
    2108:	20 e0       	ldi	r18, 0x00	; 0
    210a:	30 e0       	ldi	r19, 0x00	; 0
    210c:	40 e8       	ldi	r20, 0x80	; 128
    210e:	5f e3       	ldi	r21, 0x3F	; 63
    2110:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2114:	88 23       	and	r24, r24
    2116:	2c f4       	brge	.+10     	; 0x2122 <LCD_voidSWInit+0x34a>
		__ticks = 1;
    2118:	81 e0       	ldi	r24, 0x01	; 1
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	9f 83       	std	Y+7, r25	; 0x07
    211e:	8e 83       	std	Y+6, r24	; 0x06
    2120:	3f c0       	rjmp	.+126    	; 0x21a0 <LCD_voidSWInit+0x3c8>
	else if (__tmp > 65535)
    2122:	68 85       	ldd	r22, Y+8	; 0x08
    2124:	79 85       	ldd	r23, Y+9	; 0x09
    2126:	8a 85       	ldd	r24, Y+10	; 0x0a
    2128:	9b 85       	ldd	r25, Y+11	; 0x0b
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	3f ef       	ldi	r19, 0xFF	; 255
    212e:	4f e7       	ldi	r20, 0x7F	; 127
    2130:	57 e4       	ldi	r21, 0x47	; 71
    2132:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2136:	18 16       	cp	r1, r24
    2138:	4c f5       	brge	.+82     	; 0x218c <LCD_voidSWInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    213a:	6c 85       	ldd	r22, Y+12	; 0x0c
    213c:	7d 85       	ldd	r23, Y+13	; 0x0d
    213e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2140:	9f 85       	ldd	r25, Y+15	; 0x0f
    2142:	20 e0       	ldi	r18, 0x00	; 0
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	40 e2       	ldi	r20, 0x20	; 32
    2148:	51 e4       	ldi	r21, 0x41	; 65
    214a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    214e:	dc 01       	movw	r26, r24
    2150:	cb 01       	movw	r24, r22
    2152:	bc 01       	movw	r22, r24
    2154:	cd 01       	movw	r24, r26
    2156:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    215a:	dc 01       	movw	r26, r24
    215c:	cb 01       	movw	r24, r22
    215e:	9f 83       	std	Y+7, r25	; 0x07
    2160:	8e 83       	std	Y+6, r24	; 0x06
    2162:	0f c0       	rjmp	.+30     	; 0x2182 <LCD_voidSWInit+0x3aa>
    2164:	8c e2       	ldi	r24, 0x2C	; 44
    2166:	91 e0       	ldi	r25, 0x01	; 1
    2168:	9d 83       	std	Y+5, r25	; 0x05
    216a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    216c:	8c 81       	ldd	r24, Y+4	; 0x04
    216e:	9d 81       	ldd	r25, Y+5	; 0x05
    2170:	01 97       	sbiw	r24, 0x01	; 1
    2172:	f1 f7       	brne	.-4      	; 0x2170 <LCD_voidSWInit+0x398>
    2174:	9d 83       	std	Y+5, r25	; 0x05
    2176:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2178:	8e 81       	ldd	r24, Y+6	; 0x06
    217a:	9f 81       	ldd	r25, Y+7	; 0x07
    217c:	01 97       	sbiw	r24, 0x01	; 1
    217e:	9f 83       	std	Y+7, r25	; 0x07
    2180:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2182:	8e 81       	ldd	r24, Y+6	; 0x06
    2184:	9f 81       	ldd	r25, Y+7	; 0x07
    2186:	00 97       	sbiw	r24, 0x00	; 0
    2188:	69 f7       	brne	.-38     	; 0x2164 <LCD_voidSWInit+0x38c>
    218a:	24 c0       	rjmp	.+72     	; 0x21d4 <LCD_voidSWInit+0x3fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    218c:	68 85       	ldd	r22, Y+8	; 0x08
    218e:	79 85       	ldd	r23, Y+9	; 0x09
    2190:	8a 85       	ldd	r24, Y+10	; 0x0a
    2192:	9b 85       	ldd	r25, Y+11	; 0x0b
    2194:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2198:	dc 01       	movw	r26, r24
    219a:	cb 01       	movw	r24, r22
    219c:	9f 83       	std	Y+7, r25	; 0x07
    219e:	8e 83       	std	Y+6, r24	; 0x06
    21a0:	8e 81       	ldd	r24, Y+6	; 0x06
    21a2:	9f 81       	ldd	r25, Y+7	; 0x07
    21a4:	9b 83       	std	Y+3, r25	; 0x03
    21a6:	8a 83       	std	Y+2, r24	; 0x02
    21a8:	8a 81       	ldd	r24, Y+2	; 0x02
    21aa:	9b 81       	ldd	r25, Y+3	; 0x03
    21ac:	01 97       	sbiw	r24, 0x01	; 1
    21ae:	f1 f7       	brne	.-4      	; 0x21ac <LCD_voidSWInit+0x3d4>
    21b0:	9b 83       	std	Y+3, r25	; 0x03
    21b2:	8a 83       	std	Y+2, r24	; 0x02
    21b4:	0f c0       	rjmp	.+30     	; 0x21d4 <LCD_voidSWInit+0x3fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    21b6:	69 89       	ldd	r22, Y+17	; 0x11
    21b8:	7a 89       	ldd	r23, Y+18	; 0x12
    21ba:	8b 89       	ldd	r24, Y+19	; 0x13
    21bc:	9c 89       	ldd	r25, Y+20	; 0x14
    21be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c2:	dc 01       	movw	r26, r24
    21c4:	cb 01       	movw	r24, r22
    21c6:	88 8b       	std	Y+16, r24	; 0x10
    21c8:	88 89       	ldd	r24, Y+16	; 0x10
    21ca:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    21cc:	89 81       	ldd	r24, Y+1	; 0x01
    21ce:	8a 95       	dec	r24
    21d0:	f1 f7       	brne	.-4      	; 0x21ce <LCD_voidSWInit+0x3f6>
    21d2:	89 83       	std	Y+1, r24	; 0x01

	_delay_us(40);
	LCD_voidSendCommand(CLEAR);
    21d4:	81 e0       	ldi	r24, 0x01	; 1
    21d6:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <LCD_voidSendCommand>
}
    21da:	ee 96       	adiw	r28, 0x3e	; 62
    21dc:	0f b6       	in	r0, 0x3f	; 63
    21de:	f8 94       	cli
    21e0:	de bf       	out	0x3e, r29	; 62
    21e2:	0f be       	out	0x3f, r0	; 63
    21e4:	cd bf       	out	0x3d, r28	; 61
    21e6:	cf 91       	pop	r28
    21e8:	df 91       	pop	r29
    21ea:	08 95       	ret

000021ec <LCD_voidSendString>:



void LCD_voidSendString(u8 *Copy_u8String)
{
    21ec:	df 93       	push	r29
    21ee:	cf 93       	push	r28
    21f0:	00 d0       	rcall	.+0      	; 0x21f2 <LCD_voidSendString+0x6>
    21f2:	0f 92       	push	r0
    21f4:	cd b7       	in	r28, 0x3d	; 61
    21f6:	de b7       	in	r29, 0x3e	; 62
    21f8:	9b 83       	std	Y+3, r25	; 0x03
    21fa:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Couter = 0 ;
    21fc:	19 82       	std	Y+1, r1	; 0x01
    21fe:	0e c0       	rjmp	.+28     	; 0x221c <LCD_voidSendString+0x30>
	while(Copy_u8String[Local_u8Couter] != '\0')
	{
		LCD_voidSendData(Copy_u8String[Local_u8Couter]);
    2200:	89 81       	ldd	r24, Y+1	; 0x01
    2202:	28 2f       	mov	r18, r24
    2204:	30 e0       	ldi	r19, 0x00	; 0
    2206:	8a 81       	ldd	r24, Y+2	; 0x02
    2208:	9b 81       	ldd	r25, Y+3	; 0x03
    220a:	fc 01       	movw	r30, r24
    220c:	e2 0f       	add	r30, r18
    220e:	f3 1f       	adc	r31, r19
    2210:	80 81       	ld	r24, Z
    2212:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <LCD_voidSendData>
		Local_u8Couter++;
    2216:	89 81       	ldd	r24, Y+1	; 0x01
    2218:	8f 5f       	subi	r24, 0xFF	; 255
    221a:	89 83       	std	Y+1, r24	; 0x01


void LCD_voidSendString(u8 *Copy_u8String)
{
	u8 Local_u8Couter = 0 ;
	while(Copy_u8String[Local_u8Couter] != '\0')
    221c:	89 81       	ldd	r24, Y+1	; 0x01
    221e:	28 2f       	mov	r18, r24
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	8a 81       	ldd	r24, Y+2	; 0x02
    2224:	9b 81       	ldd	r25, Y+3	; 0x03
    2226:	fc 01       	movw	r30, r24
    2228:	e2 0f       	add	r30, r18
    222a:	f3 1f       	adc	r31, r19
    222c:	80 81       	ld	r24, Z
    222e:	88 23       	and	r24, r24
    2230:	39 f7       	brne	.-50     	; 0x2200 <LCD_voidSendString+0x14>
	{
		LCD_voidSendData(Copy_u8String[Local_u8Couter]);
		Local_u8Couter++;
	}
}
    2232:	0f 90       	pop	r0
    2234:	0f 90       	pop	r0
    2236:	0f 90       	pop	r0
    2238:	cf 91       	pop	r28
    223a:	df 91       	pop	r29
    223c:	08 95       	ret

0000223e <LCD_voidSendNumber>:

void LCD_voidSendNumber(u16 Copy_u8Number)
{
    223e:	df 93       	push	r29
    2240:	cf 93       	push	r28
    2242:	cd b7       	in	r28, 0x3d	; 61
    2244:	de b7       	in	r29, 0x3e	; 62
    2246:	2c 97       	sbiw	r28, 0x0c	; 12
    2248:	0f b6       	in	r0, 0x3f	; 63
    224a:	f8 94       	cli
    224c:	de bf       	out	0x3e, r29	; 62
    224e:	0f be       	out	0x3f, r0	; 63
    2250:	cd bf       	out	0x3d, r28	; 61
    2252:	9c 87       	std	Y+12, r25	; 0x0c
    2254:	8b 87       	std	Y+11, r24	; 0x0b
    u16 str[5]; // Assuming the maximum number is 4 digits
    itoa(Copy_u8Number, str, 10); // Convert the number to a string
    2256:	8b 85       	ldd	r24, Y+11	; 0x0b
    2258:	9c 85       	ldd	r25, Y+12	; 0x0c
    225a:	9e 01       	movw	r18, r28
    225c:	2f 5f       	subi	r18, 0xFF	; 255
    225e:	3f 4f       	sbci	r19, 0xFF	; 255
    2260:	b9 01       	movw	r22, r18
    2262:	4a e0       	ldi	r20, 0x0A	; 10
    2264:	50 e0       	ldi	r21, 0x00	; 0
    2266:	0e 94 57 1c 	call	0x38ae	; 0x38ae <itoa>
    LCD_voidSendString(str);
    226a:	ce 01       	movw	r24, r28
    226c:	01 96       	adiw	r24, 0x01	; 1
    226e:	0e 94 f6 10 	call	0x21ec	; 0x21ec <LCD_voidSendString>

}
    2272:	2c 96       	adiw	r28, 0x0c	; 12
    2274:	0f b6       	in	r0, 0x3f	; 63
    2276:	f8 94       	cli
    2278:	de bf       	out	0x3e, r29	; 62
    227a:	0f be       	out	0x3f, r0	; 63
    227c:	cd bf       	out	0x3d, r28	; 61
    227e:	cf 91       	pop	r28
    2280:	df 91       	pop	r29
    2282:	08 95       	ret

00002284 <Keybad_u8Value>:
#include <avr/delay.h>
#include "../../MCAL/DIO/DIO_Interface.h"


static u8 Keybad_u8Value(u8 Copy_Number)
{
    2284:	df 93       	push	r29
    2286:	cf 93       	push	r28
    2288:	00 d0       	rcall	.+0      	; 0x228a <Keybad_u8Value+0x6>
    228a:	00 d0       	rcall	.+0      	; 0x228c <Keybad_u8Value+0x8>
    228c:	cd b7       	in	r28, 0x3d	; 61
    228e:	de b7       	in	r29, 0x3e	; 62
    2290:	89 83       	std	Y+1, r24	; 0x01
    switch(Copy_Number)
    2292:	89 81       	ldd	r24, Y+1	; 0x01
    2294:	28 2f       	mov	r18, r24
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	3c 83       	std	Y+4, r19	; 0x04
    229a:	2b 83       	std	Y+3, r18	; 0x03
    229c:	8b 81       	ldd	r24, Y+3	; 0x03
    229e:	9c 81       	ldd	r25, Y+4	; 0x04
    22a0:	88 30       	cpi	r24, 0x08	; 8
    22a2:	91 05       	cpc	r25, r1
    22a4:	09 f4       	brne	.+2      	; 0x22a8 <Keybad_u8Value+0x24>
    22a6:	70 c0       	rjmp	.+224    	; 0x2388 <Keybad_u8Value+0x104>
    22a8:	2b 81       	ldd	r18, Y+3	; 0x03
    22aa:	3c 81       	ldd	r19, Y+4	; 0x04
    22ac:	29 30       	cpi	r18, 0x09	; 9
    22ae:	31 05       	cpc	r19, r1
    22b0:	5c f5       	brge	.+86     	; 0x2308 <Keybad_u8Value+0x84>
    22b2:	8b 81       	ldd	r24, Y+3	; 0x03
    22b4:	9c 81       	ldd	r25, Y+4	; 0x04
    22b6:	84 30       	cpi	r24, 0x04	; 4
    22b8:	91 05       	cpc	r25, r1
    22ba:	09 f4       	brne	.+2      	; 0x22be <Keybad_u8Value+0x3a>
    22bc:	59 c0       	rjmp	.+178    	; 0x2370 <Keybad_u8Value+0xec>
    22be:	2b 81       	ldd	r18, Y+3	; 0x03
    22c0:	3c 81       	ldd	r19, Y+4	; 0x04
    22c2:	25 30       	cpi	r18, 0x05	; 5
    22c4:	31 05       	cpc	r19, r1
    22c6:	9c f4       	brge	.+38     	; 0x22ee <Keybad_u8Value+0x6a>
    22c8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ca:	9c 81       	ldd	r25, Y+4	; 0x04
    22cc:	82 30       	cpi	r24, 0x02	; 2
    22ce:	91 05       	cpc	r25, r1
    22d0:	09 f4       	brne	.+2      	; 0x22d4 <Keybad_u8Value+0x50>
    22d2:	48 c0       	rjmp	.+144    	; 0x2364 <Keybad_u8Value+0xe0>
    22d4:	2b 81       	ldd	r18, Y+3	; 0x03
    22d6:	3c 81       	ldd	r19, Y+4	; 0x04
    22d8:	23 30       	cpi	r18, 0x03	; 3
    22da:	31 05       	cpc	r19, r1
    22dc:	0c f0       	brlt	.+2      	; 0x22e0 <Keybad_u8Value+0x5c>
    22de:	45 c0       	rjmp	.+138    	; 0x236a <Keybad_u8Value+0xe6>
    22e0:	8b 81       	ldd	r24, Y+3	; 0x03
    22e2:	9c 81       	ldd	r25, Y+4	; 0x04
    22e4:	81 30       	cpi	r24, 0x01	; 1
    22e6:	91 05       	cpc	r25, r1
    22e8:	09 f4       	brne	.+2      	; 0x22ec <Keybad_u8Value+0x68>
    22ea:	39 c0       	rjmp	.+114    	; 0x235e <Keybad_u8Value+0xda>
    22ec:	68 c0       	rjmp	.+208    	; 0x23be <Keybad_u8Value+0x13a>
    22ee:	2b 81       	ldd	r18, Y+3	; 0x03
    22f0:	3c 81       	ldd	r19, Y+4	; 0x04
    22f2:	26 30       	cpi	r18, 0x06	; 6
    22f4:	31 05       	cpc	r19, r1
    22f6:	09 f4       	brne	.+2      	; 0x22fa <Keybad_u8Value+0x76>
    22f8:	41 c0       	rjmp	.+130    	; 0x237c <Keybad_u8Value+0xf8>
    22fa:	8b 81       	ldd	r24, Y+3	; 0x03
    22fc:	9c 81       	ldd	r25, Y+4	; 0x04
    22fe:	87 30       	cpi	r24, 0x07	; 7
    2300:	91 05       	cpc	r25, r1
    2302:	0c f0       	brlt	.+2      	; 0x2306 <Keybad_u8Value+0x82>
    2304:	3e c0       	rjmp	.+124    	; 0x2382 <Keybad_u8Value+0xfe>
    2306:	37 c0       	rjmp	.+110    	; 0x2376 <Keybad_u8Value+0xf2>
    2308:	2b 81       	ldd	r18, Y+3	; 0x03
    230a:	3c 81       	ldd	r19, Y+4	; 0x04
    230c:	2c 30       	cpi	r18, 0x0C	; 12
    230e:	31 05       	cpc	r19, r1
    2310:	09 f4       	brne	.+2      	; 0x2314 <Keybad_u8Value+0x90>
    2312:	46 c0       	rjmp	.+140    	; 0x23a0 <Keybad_u8Value+0x11c>
    2314:	8b 81       	ldd	r24, Y+3	; 0x03
    2316:	9c 81       	ldd	r25, Y+4	; 0x04
    2318:	8d 30       	cpi	r24, 0x0D	; 13
    231a:	91 05       	cpc	r25, r1
    231c:	5c f4       	brge	.+22     	; 0x2334 <Keybad_u8Value+0xb0>
    231e:	2b 81       	ldd	r18, Y+3	; 0x03
    2320:	3c 81       	ldd	r19, Y+4	; 0x04
    2322:	2a 30       	cpi	r18, 0x0A	; 10
    2324:	31 05       	cpc	r19, r1
    2326:	b1 f1       	breq	.+108    	; 0x2394 <Keybad_u8Value+0x110>
    2328:	8b 81       	ldd	r24, Y+3	; 0x03
    232a:	9c 81       	ldd	r25, Y+4	; 0x04
    232c:	8b 30       	cpi	r24, 0x0B	; 11
    232e:	91 05       	cpc	r25, r1
    2330:	a4 f5       	brge	.+104    	; 0x239a <Keybad_u8Value+0x116>
    2332:	2d c0       	rjmp	.+90     	; 0x238e <Keybad_u8Value+0x10a>
    2334:	2b 81       	ldd	r18, Y+3	; 0x03
    2336:	3c 81       	ldd	r19, Y+4	; 0x04
    2338:	2e 30       	cpi	r18, 0x0E	; 14
    233a:	31 05       	cpc	r19, r1
    233c:	b9 f1       	breq	.+110    	; 0x23ac <Keybad_u8Value+0x128>
    233e:	8b 81       	ldd	r24, Y+3	; 0x03
    2340:	9c 81       	ldd	r25, Y+4	; 0x04
    2342:	8e 30       	cpi	r24, 0x0E	; 14
    2344:	91 05       	cpc	r25, r1
    2346:	7c f1       	brlt	.+94     	; 0x23a6 <Keybad_u8Value+0x122>
    2348:	2b 81       	ldd	r18, Y+3	; 0x03
    234a:	3c 81       	ldd	r19, Y+4	; 0x04
    234c:	2f 30       	cpi	r18, 0x0F	; 15
    234e:	31 05       	cpc	r19, r1
    2350:	81 f1       	breq	.+96     	; 0x23b2 <Keybad_u8Value+0x12e>
    2352:	8b 81       	ldd	r24, Y+3	; 0x03
    2354:	9c 81       	ldd	r25, Y+4	; 0x04
    2356:	80 31       	cpi	r24, 0x10	; 16
    2358:	91 05       	cpc	r25, r1
    235a:	71 f1       	breq	.+92     	; 0x23b8 <Keybad_u8Value+0x134>
    235c:	30 c0       	rjmp	.+96     	; 0x23be <Keybad_u8Value+0x13a>
    {
    case 1 :   return  '1'  ; break ;
    235e:	91 e3       	ldi	r25, 0x31	; 49
    2360:	9a 83       	std	Y+2, r25	; 0x02
    2362:	2f c0       	rjmp	.+94     	; 0x23c2 <Keybad_u8Value+0x13e>
    case 2 :   return  '2'  ; break ;
    2364:	22 e3       	ldi	r18, 0x32	; 50
    2366:	2a 83       	std	Y+2, r18	; 0x02
    2368:	2c c0       	rjmp	.+88     	; 0x23c2 <Keybad_u8Value+0x13e>
    case 3 :   return  '3'  ; break ;
    236a:	33 e3       	ldi	r19, 0x33	; 51
    236c:	3a 83       	std	Y+2, r19	; 0x02
    236e:	29 c0       	rjmp	.+82     	; 0x23c2 <Keybad_u8Value+0x13e>
    case 4 :   return 'A' ; break ;
    2370:	81 e4       	ldi	r24, 0x41	; 65
    2372:	8a 83       	std	Y+2, r24	; 0x02
    2374:	26 c0       	rjmp	.+76     	; 0x23c2 <Keybad_u8Value+0x13e>
    case 5 :   return  '4'  ; break ;
    2376:	94 e3       	ldi	r25, 0x34	; 52
    2378:	9a 83       	std	Y+2, r25	; 0x02
    237a:	23 c0       	rjmp	.+70     	; 0x23c2 <Keybad_u8Value+0x13e>
    case 6 :   return  '5'  ; break ;
    237c:	25 e3       	ldi	r18, 0x35	; 53
    237e:	2a 83       	std	Y+2, r18	; 0x02
    2380:	20 c0       	rjmp	.+64     	; 0x23c2 <Keybad_u8Value+0x13e>
    case 7 :   return  '6'  ; break ;
    2382:	36 e3       	ldi	r19, 0x36	; 54
    2384:	3a 83       	std	Y+2, r19	; 0x02
    2386:	1d c0       	rjmp	.+58     	; 0x23c2 <Keybad_u8Value+0x13e>
    case 8 :   return 'B' ; break ;
    2388:	82 e4       	ldi	r24, 0x42	; 66
    238a:	8a 83       	std	Y+2, r24	; 0x02
    238c:	1a c0       	rjmp	.+52     	; 0x23c2 <Keybad_u8Value+0x13e>
    case 9 :   return  '7'  ; break ;
    238e:	97 e3       	ldi	r25, 0x37	; 55
    2390:	9a 83       	std	Y+2, r25	; 0x02
    2392:	17 c0       	rjmp	.+46     	; 0x23c2 <Keybad_u8Value+0x13e>
    case 10 :  return  '8'  ; break ;
    2394:	28 e3       	ldi	r18, 0x38	; 56
    2396:	2a 83       	std	Y+2, r18	; 0x02
    2398:	14 c0       	rjmp	.+40     	; 0x23c2 <Keybad_u8Value+0x13e>
    case 11 :  return  '9'  ; break ;
    239a:	39 e3       	ldi	r19, 0x39	; 57
    239c:	3a 83       	std	Y+2, r19	; 0x02
    239e:	11 c0       	rjmp	.+34     	; 0x23c2 <Keybad_u8Value+0x13e>
    case 12 :  return 'C' ; break ;
    23a0:	83 e4       	ldi	r24, 0x43	; 67
    23a2:	8a 83       	std	Y+2, r24	; 0x02
    23a4:	0e c0       	rjmp	.+28     	; 0x23c2 <Keybad_u8Value+0x13e>
    case 13 :  return '*' ; break ;
    23a6:	9a e2       	ldi	r25, 0x2A	; 42
    23a8:	9a 83       	std	Y+2, r25	; 0x02
    23aa:	0b c0       	rjmp	.+22     	; 0x23c2 <Keybad_u8Value+0x13e>
    case 14 :  return  '0'  ; break ;
    23ac:	20 e3       	ldi	r18, 0x30	; 48
    23ae:	2a 83       	std	Y+2, r18	; 0x02
    23b0:	08 c0       	rjmp	.+16     	; 0x23c2 <Keybad_u8Value+0x13e>
    case 15 :  return '#' ; break ;
    23b2:	33 e2       	ldi	r19, 0x23	; 35
    23b4:	3a 83       	std	Y+2, r19	; 0x02
    23b6:	05 c0       	rjmp	.+10     	; 0x23c2 <Keybad_u8Value+0x13e>
    case 16 :  return 'D' ; break ;
    23b8:	84 e4       	ldi	r24, 0x44	; 68
    23ba:	8a 83       	std	Y+2, r24	; 0x02
    23bc:	02 c0       	rjmp	.+4      	; 0x23c2 <Keybad_u8Value+0x13e>
    default :  return '%'         ;
    23be:	95 e2       	ldi	r25, 0x25	; 37
    23c0:	9a 83       	std	Y+2, r25	; 0x02
    23c2:	8a 81       	ldd	r24, Y+2	; 0x02
    }
}
    23c4:	0f 90       	pop	r0
    23c6:	0f 90       	pop	r0
    23c8:	0f 90       	pop	r0
    23ca:	0f 90       	pop	r0
    23cc:	cf 91       	pop	r28
    23ce:	df 91       	pop	r29
    23d0:	08 95       	ret

000023d2 <Keybad_voidInit>:

//0x0F
void Keybad_voidInit(u8 Copy_Port)
{
    23d2:	df 93       	push	r29
    23d4:	cf 93       	push	r28
    23d6:	0f 92       	push	r0
    23d8:	cd b7       	in	r28, 0x3d	; 61
    23da:	de b7       	in	r29, 0x3e	; 62
    23dc:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPortDirection(Copy_Port,0x0F);
    23de:	89 81       	ldd	r24, Y+1	; 0x01
    23e0:	6f e0       	ldi	r22, 0x0F	; 15
    23e2:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_voidSetPortDirection>
	DIO_voidSetPortValue(Copy_Port,0xF0); // input pull up
    23e6:	89 81       	ldd	r24, Y+1	; 0x01
    23e8:	60 ef       	ldi	r22, 0xF0	; 240
    23ea:	0e 94 1c 0b 	call	0x1638	; 0x1638 <DIO_voidSetPortValue>
}
    23ee:	0f 90       	pop	r0
    23f0:	cf 91       	pop	r28
    23f2:	df 91       	pop	r29
    23f4:	08 95       	ret

000023f6 <Keybad_u8ReturnData>:

u8 Keybad_u8ReturnData(u8 Copy_Port)
{
    23f6:	df 93       	push	r29
    23f8:	cf 93       	push	r28
    23fa:	cd b7       	in	r28, 0x3d	; 61
    23fc:	de b7       	in	r29, 0x3e	; 62
    23fe:	62 97       	sbiw	r28, 0x12	; 18
    2400:	0f b6       	in	r0, 0x3f	; 63
    2402:	f8 94       	cli
    2404:	de bf       	out	0x3e, r29	; 62
    2406:	0f be       	out	0x3f, r0	; 63
    2408:	cd bf       	out	0x3d, r28	; 61
    240a:	89 8b       	std	Y+17, r24	; 0x11
	for(u8 Colume = 0 ; Colume < 4 ; Colume++)
    240c:	18 8a       	std	Y+16, r1	; 0x10
    240e:	a8 c0       	rjmp	.+336    	; 0x2560 <Keybad_u8ReturnData+0x16a>
	{

		DIO_voidSetPortValue(Copy_Port,(~(0b00000001<< Colume)) ); // colume 0
    2410:	88 89       	ldd	r24, Y+16	; 0x10
    2412:	28 2f       	mov	r18, r24
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	81 e0       	ldi	r24, 0x01	; 1
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	02 c0       	rjmp	.+4      	; 0x2420 <Keybad_u8ReturnData+0x2a>
    241c:	88 0f       	add	r24, r24
    241e:	99 1f       	adc	r25, r25
    2420:	2a 95       	dec	r18
    2422:	e2 f7       	brpl	.-8      	; 0x241c <Keybad_u8ReturnData+0x26>
    2424:	98 2f       	mov	r25, r24
    2426:	90 95       	com	r25
    2428:	89 89       	ldd	r24, Y+17	; 0x11
    242a:	69 2f       	mov	r22, r25
    242c:	0e 94 1c 0b 	call	0x1638	; 0x1638 <DIO_voidSetPortValue>

		for(u8 Row = 0 ; Row < 4 ; Row++)
    2430:	1f 86       	std	Y+15, r1	; 0x0f
    2432:	8f c0       	rjmp	.+286    	; 0x2552 <Keybad_u8ReturnData+0x15c>
		{
			if(DIO_u8GetPinValue(Copy_Port , Row+4) == 0 ) // row 0
    2434:	8f 85       	ldd	r24, Y+15	; 0x0f
    2436:	98 2f       	mov	r25, r24
    2438:	9c 5f       	subi	r25, 0xFC	; 252
    243a:	89 89       	ldd	r24, Y+17	; 0x11
    243c:	69 2f       	mov	r22, r25
    243e:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <DIO_u8GetPinValue>
    2442:	88 23       	and	r24, r24
    2444:	09 f0       	breq	.+2      	; 0x2448 <Keybad_u8ReturnData+0x52>
    2446:	82 c0       	rjmp	.+260    	; 0x254c <Keybad_u8ReturnData+0x156>
    2448:	80 e0       	ldi	r24, 0x00	; 0
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	a0 ef       	ldi	r26, 0xF0	; 240
    244e:	b1 e4       	ldi	r27, 0x41	; 65
    2450:	8b 87       	std	Y+11, r24	; 0x0b
    2452:	9c 87       	std	Y+12, r25	; 0x0c
    2454:	ad 87       	std	Y+13, r26	; 0x0d
    2456:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2458:	6b 85       	ldd	r22, Y+11	; 0x0b
    245a:	7c 85       	ldd	r23, Y+12	; 0x0c
    245c:	8d 85       	ldd	r24, Y+13	; 0x0d
    245e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2460:	20 e0       	ldi	r18, 0x00	; 0
    2462:	30 e8       	ldi	r19, 0x80	; 128
    2464:	4b e3       	ldi	r20, 0x3B	; 59
    2466:	55 e4       	ldi	r21, 0x45	; 69
    2468:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    246c:	dc 01       	movw	r26, r24
    246e:	cb 01       	movw	r24, r22
    2470:	8f 83       	std	Y+7, r24	; 0x07
    2472:	98 87       	std	Y+8, r25	; 0x08
    2474:	a9 87       	std	Y+9, r26	; 0x09
    2476:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2478:	6f 81       	ldd	r22, Y+7	; 0x07
    247a:	78 85       	ldd	r23, Y+8	; 0x08
    247c:	89 85       	ldd	r24, Y+9	; 0x09
    247e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2480:	20 e0       	ldi	r18, 0x00	; 0
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	40 e8       	ldi	r20, 0x80	; 128
    2486:	5f e3       	ldi	r21, 0x3F	; 63
    2488:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    248c:	88 23       	and	r24, r24
    248e:	2c f4       	brge	.+10     	; 0x249a <Keybad_u8ReturnData+0xa4>
		__ticks = 1;
    2490:	81 e0       	ldi	r24, 0x01	; 1
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	9e 83       	std	Y+6, r25	; 0x06
    2496:	8d 83       	std	Y+5, r24	; 0x05
    2498:	3f c0       	rjmp	.+126    	; 0x2518 <Keybad_u8ReturnData+0x122>
	else if (__tmp > 65535)
    249a:	6f 81       	ldd	r22, Y+7	; 0x07
    249c:	78 85       	ldd	r23, Y+8	; 0x08
    249e:	89 85       	ldd	r24, Y+9	; 0x09
    24a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24a2:	20 e0       	ldi	r18, 0x00	; 0
    24a4:	3f ef       	ldi	r19, 0xFF	; 255
    24a6:	4f e7       	ldi	r20, 0x7F	; 127
    24a8:	57 e4       	ldi	r21, 0x47	; 71
    24aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24ae:	18 16       	cp	r1, r24
    24b0:	4c f5       	brge	.+82     	; 0x2504 <Keybad_u8ReturnData+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    24b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    24b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    24b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    24ba:	20 e0       	ldi	r18, 0x00	; 0
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	40 e2       	ldi	r20, 0x20	; 32
    24c0:	51 e4       	ldi	r21, 0x41	; 65
    24c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c6:	dc 01       	movw	r26, r24
    24c8:	cb 01       	movw	r24, r22
    24ca:	bc 01       	movw	r22, r24
    24cc:	cd 01       	movw	r24, r26
    24ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d2:	dc 01       	movw	r26, r24
    24d4:	cb 01       	movw	r24, r22
    24d6:	9e 83       	std	Y+6, r25	; 0x06
    24d8:	8d 83       	std	Y+5, r24	; 0x05
    24da:	0f c0       	rjmp	.+30     	; 0x24fa <Keybad_u8ReturnData+0x104>
    24dc:	8c e2       	ldi	r24, 0x2C	; 44
    24de:	91 e0       	ldi	r25, 0x01	; 1
    24e0:	9c 83       	std	Y+4, r25	; 0x04
    24e2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    24e4:	8b 81       	ldd	r24, Y+3	; 0x03
    24e6:	9c 81       	ldd	r25, Y+4	; 0x04
    24e8:	01 97       	sbiw	r24, 0x01	; 1
    24ea:	f1 f7       	brne	.-4      	; 0x24e8 <Keybad_u8ReturnData+0xf2>
    24ec:	9c 83       	std	Y+4, r25	; 0x04
    24ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24f0:	8d 81       	ldd	r24, Y+5	; 0x05
    24f2:	9e 81       	ldd	r25, Y+6	; 0x06
    24f4:	01 97       	sbiw	r24, 0x01	; 1
    24f6:	9e 83       	std	Y+6, r25	; 0x06
    24f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24fa:	8d 81       	ldd	r24, Y+5	; 0x05
    24fc:	9e 81       	ldd	r25, Y+6	; 0x06
    24fe:	00 97       	sbiw	r24, 0x00	; 0
    2500:	69 f7       	brne	.-38     	; 0x24dc <Keybad_u8ReturnData+0xe6>
    2502:	14 c0       	rjmp	.+40     	; 0x252c <Keybad_u8ReturnData+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2504:	6f 81       	ldd	r22, Y+7	; 0x07
    2506:	78 85       	ldd	r23, Y+8	; 0x08
    2508:	89 85       	ldd	r24, Y+9	; 0x09
    250a:	9a 85       	ldd	r25, Y+10	; 0x0a
    250c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2510:	dc 01       	movw	r26, r24
    2512:	cb 01       	movw	r24, r22
    2514:	9e 83       	std	Y+6, r25	; 0x06
    2516:	8d 83       	std	Y+5, r24	; 0x05
    2518:	8d 81       	ldd	r24, Y+5	; 0x05
    251a:	9e 81       	ldd	r25, Y+6	; 0x06
    251c:	9a 83       	std	Y+2, r25	; 0x02
    251e:	89 83       	std	Y+1, r24	; 0x01
    2520:	89 81       	ldd	r24, Y+1	; 0x01
    2522:	9a 81       	ldd	r25, Y+2	; 0x02
    2524:	01 97       	sbiw	r24, 0x01	; 1
    2526:	f1 f7       	brne	.-4      	; 0x2524 <Keybad_u8ReturnData+0x12e>
    2528:	9a 83       	std	Y+2, r25	; 0x02
    252a:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(30);
				return Keybad_u8Value((Row*4)+Colume+1) ;
    252c:	8f 85       	ldd	r24, Y+15	; 0x0f
    252e:	88 2f       	mov	r24, r24
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	88 0f       	add	r24, r24
    2534:	99 1f       	adc	r25, r25
    2536:	88 0f       	add	r24, r24
    2538:	99 1f       	adc	r25, r25
    253a:	98 2f       	mov	r25, r24
    253c:	88 89       	ldd	r24, Y+16	; 0x10
    253e:	89 0f       	add	r24, r25
    2540:	8f 5f       	subi	r24, 0xFF	; 255
    2542:	0e 94 42 11 	call	0x2284	; 0x2284 <Keybad_u8Value>
    2546:	8a 8b       	std	Y+18, r24	; 0x12
			}
		}
	}
}
    2548:	8a 89       	ldd	r24, Y+18	; 0x12
    254a:	0e c0       	rjmp	.+28     	; 0x2568 <Keybad_u8ReturnData+0x172>
	for(u8 Colume = 0 ; Colume < 4 ; Colume++)
	{

		DIO_voidSetPortValue(Copy_Port,(~(0b00000001<< Colume)) ); // colume 0

		for(u8 Row = 0 ; Row < 4 ; Row++)
    254c:	8f 85       	ldd	r24, Y+15	; 0x0f
    254e:	8f 5f       	subi	r24, 0xFF	; 255
    2550:	8f 87       	std	Y+15, r24	; 0x0f
    2552:	8f 85       	ldd	r24, Y+15	; 0x0f
    2554:	84 30       	cpi	r24, 0x04	; 4
    2556:	08 f4       	brcc	.+2      	; 0x255a <Keybad_u8ReturnData+0x164>
    2558:	6d cf       	rjmp	.-294    	; 0x2434 <Keybad_u8ReturnData+0x3e>
	DIO_voidSetPortValue(Copy_Port,0xF0); // input pull up
}

u8 Keybad_u8ReturnData(u8 Copy_Port)
{
	for(u8 Colume = 0 ; Colume < 4 ; Colume++)
    255a:	88 89       	ldd	r24, Y+16	; 0x10
    255c:	8f 5f       	subi	r24, 0xFF	; 255
    255e:	88 8b       	std	Y+16, r24	; 0x10
    2560:	88 89       	ldd	r24, Y+16	; 0x10
    2562:	84 30       	cpi	r24, 0x04	; 4
    2564:	08 f4       	brcc	.+2      	; 0x2568 <Keybad_u8ReturnData+0x172>
    2566:	54 cf       	rjmp	.-344    	; 0x2410 <Keybad_u8ReturnData+0x1a>
				_delay_ms(30);
				return Keybad_u8Value((Row*4)+Colume+1) ;
			}
		}
	}
}
    2568:	62 96       	adiw	r28, 0x12	; 18
    256a:	0f b6       	in	r0, 0x3f	; 63
    256c:	f8 94       	cli
    256e:	de bf       	out	0x3e, r29	; 62
    2570:	0f be       	out	0x3f, r0	; 63
    2572:	cd bf       	out	0x3d, r28	; 61
    2574:	cf 91       	pop	r28
    2576:	df 91       	pop	r29
    2578:	08 95       	ret

0000257a <IR_voidInit>:

/*
 * initialize the pin to use it with the ir
 * */
void IR_voidInit(u8 PORT_NAME, u8 PIN_NUM)
{
    257a:	df 93       	push	r29
    257c:	cf 93       	push	r28
    257e:	00 d0       	rcall	.+0      	; 0x2580 <IR_voidInit+0x6>
    2580:	cd b7       	in	r28, 0x3d	; 61
    2582:	de b7       	in	r29, 0x3e	; 62
    2584:	89 83       	std	Y+1, r24	; 0x01
    2586:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPinDirection(PORT_NAME,PIN_NUM,Input);
    2588:	89 81       	ldd	r24, Y+1	; 0x01
    258a:	6a 81       	ldd	r22, Y+2	; 0x02
    258c:	41 e0       	ldi	r20, 0x01	; 1
    258e:	0e 94 e5 07 	call	0xfca	; 0xfca <DIO_voidSetPinDirection>

}
    2592:	0f 90       	pop	r0
    2594:	0f 90       	pop	r0
    2596:	cf 91       	pop	r28
    2598:	df 91       	pop	r29
    259a:	08 95       	ret

0000259c <IR_boolCheckObstical>:

/*
 * check if there is an obstical
 * return true if there is obstical (output = 0)
 * */
bool IR_boolCheckObstical(u8 PORT_NAME, u8 PIN_NUM){
    259c:	df 93       	push	r29
    259e:	cf 93       	push	r28
    25a0:	00 d0       	rcall	.+0      	; 0x25a2 <IR_boolCheckObstical+0x6>
    25a2:	00 d0       	rcall	.+0      	; 0x25a4 <IR_boolCheckObstical+0x8>
    25a4:	cd b7       	in	r28, 0x3d	; 61
    25a6:	de b7       	in	r29, 0x3e	; 62
    25a8:	8a 83       	std	Y+2, r24	; 0x02
    25aa:	6b 83       	std	Y+3, r22	; 0x03
	u8 out= DIO_u8GetPinValue(PORT_NAME,PIN_NUM);
    25ac:	8a 81       	ldd	r24, Y+2	; 0x02
    25ae:	6b 81       	ldd	r22, Y+3	; 0x03
    25b0:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <DIO_u8GetPinValue>
    25b4:	89 83       	std	Y+1, r24	; 0x01
	if (out==0){return true;}
    25b6:	89 81       	ldd	r24, Y+1	; 0x01
    25b8:	88 23       	and	r24, r24
    25ba:	19 f4       	brne	.+6      	; 0x25c2 <IR_boolCheckObstical+0x26>
    25bc:	81 e0       	ldi	r24, 0x01	; 1
    25be:	8c 83       	std	Y+4, r24	; 0x04
    25c0:	01 c0       	rjmp	.+2      	; 0x25c4 <IR_boolCheckObstical+0x28>
	else {return false; }
    25c2:	1c 82       	std	Y+4, r1	; 0x04
    25c4:	8c 81       	ldd	r24, Y+4	; 0x04
}
    25c6:	0f 90       	pop	r0
    25c8:	0f 90       	pop	r0
    25ca:	0f 90       	pop	r0
    25cc:	0f 90       	pop	r0
    25ce:	cf 91       	pop	r28
    25d0:	df 91       	pop	r29
    25d2:	08 95       	ret

000025d4 <Button_voidInit>:
#include "Button_Interface.h"



void Button_voidInit(u8 Copy_Port , u8 Copy_Pin)
{
    25d4:	df 93       	push	r29
    25d6:	cf 93       	push	r28
    25d8:	00 d0       	rcall	.+0      	; 0x25da <Button_voidInit+0x6>
    25da:	cd b7       	in	r28, 0x3d	; 61
    25dc:	de b7       	in	r29, 0x3e	; 62
    25de:	89 83       	std	Y+1, r24	; 0x01
    25e0:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPinDirection(Copy_Port,Copy_Pin,Input);
    25e2:	89 81       	ldd	r24, Y+1	; 0x01
    25e4:	6a 81       	ldd	r22, Y+2	; 0x02
    25e6:	41 e0       	ldi	r20, 0x01	; 1
    25e8:	0e 94 e5 07 	call	0xfca	; 0xfca <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(Copy_Port,Copy_Pin,HIGH); // input pull up
    25ec:	89 81       	ldd	r24, Y+1	; 0x01
    25ee:	6a 81       	ldd	r22, Y+2	; 0x02
    25f0:	40 e0       	ldi	r20, 0x00	; 0
    25f2:	0e 94 e5 08 	call	0x11ca	; 0x11ca <DIO_voidSetPinValue>
}
    25f6:	0f 90       	pop	r0
    25f8:	0f 90       	pop	r0
    25fa:	cf 91       	pop	r28
    25fc:	df 91       	pop	r29
    25fe:	08 95       	ret

00002600 <Button_voidPullUp>:
u8 Button_voidPullUp(u8 Copy_Port , u8 Copy_Pin)
{
    2600:	df 93       	push	r29
    2602:	cf 93       	push	r28
    2604:	00 d0       	rcall	.+0      	; 0x2606 <Button_voidPullUp+0x6>
    2606:	cd b7       	in	r28, 0x3d	; 61
    2608:	de b7       	in	r29, 0x3e	; 62
    260a:	89 83       	std	Y+1, r24	; 0x01
    260c:	6a 83       	std	Y+2, r22	; 0x02
	return DIO_u8GetPinValue(Copy_Port,Copy_Pin);
    260e:	89 81       	ldd	r24, Y+1	; 0x01
    2610:	6a 81       	ldd	r22, Y+2	; 0x02
    2612:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <DIO_u8GetPinValue>
}
    2616:	0f 90       	pop	r0
    2618:	0f 90       	pop	r0
    261a:	cf 91       	pop	r28
    261c:	df 91       	pop	r29
    261e:	08 95       	ret

00002620 <Button_voidPullDown>:
u8 Button_voidPullDown(u8 Copy_Port , u8 Copy_Pin)
{
    2620:	df 93       	push	r29
    2622:	cf 93       	push	r28
    2624:	00 d0       	rcall	.+0      	; 0x2626 <Button_voidPullDown+0x6>
    2626:	cd b7       	in	r28, 0x3d	; 61
    2628:	de b7       	in	r29, 0x3e	; 62
    262a:	89 83       	std	Y+1, r24	; 0x01
    262c:	6a 83       	std	Y+2, r22	; 0x02
	return DIO_u8GetPinValue(Copy_Port,Copy_Pin);
    262e:	89 81       	ldd	r24, Y+1	; 0x01
    2630:	6a 81       	ldd	r22, Y+2	; 0x02
    2632:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <DIO_u8GetPinValue>
}
    2636:	0f 90       	pop	r0
    2638:	0f 90       	pop	r0
    263a:	cf 91       	pop	r28
    263c:	df 91       	pop	r29
    263e:	08 95       	ret

00002640 <_01_TIEMR0_APP>:
#include <avr/delay.h>


// THIS APP MAKE THE LED TURNED OFF EVERY 5 SEC
// IF WE WANT TO USE IT WE HAVE TO PUT IT IN THE MAIN FILE
void _01_TIEMR0_APP(void ){
    2640:	df 93       	push	r29
    2642:	cf 93       	push	r28
    2644:	cd b7       	in	r28, 0x3d	; 61
    2646:	de b7       	in	r29, 0x3e	; 62
	EXT_GIE_STATEvoidInit();  // here to enable the global interrupt
    2648:	0e 94 d7 07 	call	0xfae	; 0xfae <EXT_GIE_STATEvoidInit>
	TIMER0_voidInit();
    264c:	0e 94 ee 06 	call	0xddc	; 0xddc <TIMER0_voidInit>
	LED_voidInit(PORTA_REG, PINA_REG);
    2650:	eb e3       	ldi	r30, 0x3B	; 59
    2652:	f0 e0       	ldi	r31, 0x00	; 0
    2654:	80 81       	ld	r24, Z
    2656:	e9 e3       	ldi	r30, 0x39	; 57
    2658:	f0 e0       	ldi	r31, 0x00	; 0
    265a:	90 81       	ld	r25, Z
    265c:	69 2f       	mov	r22, r25
    265e:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <LED_voidInit>


	while (1)
	{

		LED_voidOn(PORTA_REG,PINA_REG);
    2662:	eb e3       	ldi	r30, 0x3B	; 59
    2664:	f0 e0       	ldi	r31, 0x00	; 0
    2666:	80 81       	ld	r24, Z
    2668:	e9 e3       	ldi	r30, 0x39	; 57
    266a:	f0 e0       	ldi	r31, 0x00	; 0
    266c:	90 81       	ld	r25, Z
    266e:	69 2f       	mov	r22, r25
    2670:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <LED_voidOn>
    2674:	f6 cf       	rjmp	.-20     	; 0x2662 <_01_TIEMR0_APP+0x22>

00002676 <__vector_11>:

// timer 8 bit = 0 to 255  , resolution = 256 ;
// prescaller = 8          , required time = 5sec
// system clock = 5 MHZ

ISR(TIMER0_OVF_vect){ // if we use this kind of difintiion we have use avr/interrrupt.h
    2676:	1f 92       	push	r1
    2678:	0f 92       	push	r0
    267a:	0f b6       	in	r0, 0x3f	; 63
    267c:	0f 92       	push	r0
    267e:	11 24       	eor	r1, r1
    2680:	2f 93       	push	r18
    2682:	3f 93       	push	r19
    2684:	4f 93       	push	r20
    2686:	5f 93       	push	r21
    2688:	6f 93       	push	r22
    268a:	7f 93       	push	r23
    268c:	8f 93       	push	r24
    268e:	9f 93       	push	r25
    2690:	af 93       	push	r26
    2692:	bf 93       	push	r27
    2694:	ef 93       	push	r30
    2696:	ff 93       	push	r31
    2698:	df 93       	push	r29
    269a:	cf 93       	push	r28
    269c:	cd b7       	in	r28, 0x3d	; 61
    269e:	de b7       	in	r29, 0x3e	; 62
    26a0:	2e 97       	sbiw	r28, 0x0e	; 14
    26a2:	de bf       	out	0x3e, r29	; 62
    26a4:	cd bf       	out	0x3d, r28	; 61

	static u16 Counter =0 ;
	Counter ++;
    26a6:	80 91 98 00 	lds	r24, 0x0098
    26aa:	90 91 99 00 	lds	r25, 0x0099
    26ae:	01 96       	adiw	r24, 0x01	; 1
    26b0:	90 93 99 00 	sts	0x0099, r25
    26b4:	80 93 98 00 	sts	0x0098, r24
	if (Counter == 19532 ) // HERE THE OVER FLOW COUNT (this the important thing )
    26b8:	80 91 98 00 	lds	r24, 0x0098
    26bc:	90 91 99 00 	lds	r25, 0x0099
    26c0:	2c e4       	ldi	r18, 0x4C	; 76
    26c2:	8c 34       	cpi	r24, 0x4C	; 76
    26c4:	92 07       	cpc	r25, r18
    26c6:	09 f0       	breq	.+2      	; 0x26ca <__vector_11+0x54>
    26c8:	83 c0       	rjmp	.+262    	; 0x27d0 <__vector_11+0x15a>
	{
		TCNT0=192; // THE PRELOAD VALUE
    26ca:	e2 e5       	ldi	r30, 0x52	; 82
    26cc:	f0 e0       	ldi	r31, 0x00	; 0
    26ce:	80 ec       	ldi	r24, 0xC0	; 192
    26d0:	80 83       	st	Z, r24
		// here the app after the delay ends
		LED_voidOff(PORTA_REG, PINA_REG);
    26d2:	eb e3       	ldi	r30, 0x3B	; 59
    26d4:	f0 e0       	ldi	r31, 0x00	; 0
    26d6:	80 81       	ld	r24, Z
    26d8:	e9 e3       	ldi	r30, 0x39	; 57
    26da:	f0 e0       	ldi	r31, 0x00	; 0
    26dc:	90 81       	ld	r25, Z
    26de:	69 2f       	mov	r22, r25
    26e0:	0e 94 75 0d 	call	0x1aea	; 0x1aea <LED_voidOff>
    26e4:	80 e0       	ldi	r24, 0x00	; 0
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	aa ef       	ldi	r26, 0xFA	; 250
    26ea:	b3 e4       	ldi	r27, 0x43	; 67
    26ec:	8b 87       	std	Y+11, r24	; 0x0b
    26ee:	9c 87       	std	Y+12, r25	; 0x0c
    26f0:	ad 87       	std	Y+13, r26	; 0x0d
    26f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    26f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    26f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    26fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    26fc:	20 e0       	ldi	r18, 0x00	; 0
    26fe:	30 e8       	ldi	r19, 0x80	; 128
    2700:	4b e3       	ldi	r20, 0x3B	; 59
    2702:	55 e4       	ldi	r21, 0x45	; 69
    2704:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2708:	dc 01       	movw	r26, r24
    270a:	cb 01       	movw	r24, r22
    270c:	8f 83       	std	Y+7, r24	; 0x07
    270e:	98 87       	std	Y+8, r25	; 0x08
    2710:	a9 87       	std	Y+9, r26	; 0x09
    2712:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2714:	6f 81       	ldd	r22, Y+7	; 0x07
    2716:	78 85       	ldd	r23, Y+8	; 0x08
    2718:	89 85       	ldd	r24, Y+9	; 0x09
    271a:	9a 85       	ldd	r25, Y+10	; 0x0a
    271c:	20 e0       	ldi	r18, 0x00	; 0
    271e:	30 e0       	ldi	r19, 0x00	; 0
    2720:	40 e8       	ldi	r20, 0x80	; 128
    2722:	5f e3       	ldi	r21, 0x3F	; 63
    2724:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2728:	88 23       	and	r24, r24
    272a:	2c f4       	brge	.+10     	; 0x2736 <__vector_11+0xc0>
		__ticks = 1;
    272c:	81 e0       	ldi	r24, 0x01	; 1
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	9e 83       	std	Y+6, r25	; 0x06
    2732:	8d 83       	std	Y+5, r24	; 0x05
    2734:	3f c0       	rjmp	.+126    	; 0x27b4 <__vector_11+0x13e>
	else if (__tmp > 65535)
    2736:	6f 81       	ldd	r22, Y+7	; 0x07
    2738:	78 85       	ldd	r23, Y+8	; 0x08
    273a:	89 85       	ldd	r24, Y+9	; 0x09
    273c:	9a 85       	ldd	r25, Y+10	; 0x0a
    273e:	20 e0       	ldi	r18, 0x00	; 0
    2740:	3f ef       	ldi	r19, 0xFF	; 255
    2742:	4f e7       	ldi	r20, 0x7F	; 127
    2744:	57 e4       	ldi	r21, 0x47	; 71
    2746:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    274a:	18 16       	cp	r1, r24
    274c:	4c f5       	brge	.+82     	; 0x27a0 <__vector_11+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    274e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2750:	7c 85       	ldd	r23, Y+12	; 0x0c
    2752:	8d 85       	ldd	r24, Y+13	; 0x0d
    2754:	9e 85       	ldd	r25, Y+14	; 0x0e
    2756:	20 e0       	ldi	r18, 0x00	; 0
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	40 e2       	ldi	r20, 0x20	; 32
    275c:	51 e4       	ldi	r21, 0x41	; 65
    275e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2762:	dc 01       	movw	r26, r24
    2764:	cb 01       	movw	r24, r22
    2766:	bc 01       	movw	r22, r24
    2768:	cd 01       	movw	r24, r26
    276a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    276e:	dc 01       	movw	r26, r24
    2770:	cb 01       	movw	r24, r22
    2772:	9e 83       	std	Y+6, r25	; 0x06
    2774:	8d 83       	std	Y+5, r24	; 0x05
    2776:	0f c0       	rjmp	.+30     	; 0x2796 <__vector_11+0x120>
    2778:	8c e2       	ldi	r24, 0x2C	; 44
    277a:	91 e0       	ldi	r25, 0x01	; 1
    277c:	9c 83       	std	Y+4, r25	; 0x04
    277e:	8b 83       	std	Y+3, r24	; 0x03
    2780:	8b 81       	ldd	r24, Y+3	; 0x03
    2782:	9c 81       	ldd	r25, Y+4	; 0x04
    2784:	01 97       	sbiw	r24, 0x01	; 1
    2786:	f1 f7       	brne	.-4      	; 0x2784 <__vector_11+0x10e>
    2788:	9c 83       	std	Y+4, r25	; 0x04
    278a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    278c:	8d 81       	ldd	r24, Y+5	; 0x05
    278e:	9e 81       	ldd	r25, Y+6	; 0x06
    2790:	01 97       	sbiw	r24, 0x01	; 1
    2792:	9e 83       	std	Y+6, r25	; 0x06
    2794:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2796:	8d 81       	ldd	r24, Y+5	; 0x05
    2798:	9e 81       	ldd	r25, Y+6	; 0x06
    279a:	00 97       	sbiw	r24, 0x00	; 0
    279c:	69 f7       	brne	.-38     	; 0x2778 <__vector_11+0x102>
    279e:	14 c0       	rjmp	.+40     	; 0x27c8 <__vector_11+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27a0:	6f 81       	ldd	r22, Y+7	; 0x07
    27a2:	78 85       	ldd	r23, Y+8	; 0x08
    27a4:	89 85       	ldd	r24, Y+9	; 0x09
    27a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ac:	dc 01       	movw	r26, r24
    27ae:	cb 01       	movw	r24, r22
    27b0:	9e 83       	std	Y+6, r25	; 0x06
    27b2:	8d 83       	std	Y+5, r24	; 0x05
    27b4:	8d 81       	ldd	r24, Y+5	; 0x05
    27b6:	9e 81       	ldd	r25, Y+6	; 0x06
    27b8:	9a 83       	std	Y+2, r25	; 0x02
    27ba:	89 83       	std	Y+1, r24	; 0x01
    27bc:	89 81       	ldd	r24, Y+1	; 0x01
    27be:	9a 81       	ldd	r25, Y+2	; 0x02
    27c0:	01 97       	sbiw	r24, 0x01	; 1
    27c2:	f1 f7       	brne	.-4      	; 0x27c0 <__vector_11+0x14a>
    27c4:	9a 83       	std	Y+2, r25	; 0x02
    27c6:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500); // here just to notice the change
		Counter =0 ;
    27c8:	10 92 99 00 	sts	0x0099, r1
    27cc:	10 92 98 00 	sts	0x0098, r1
	}


}
    27d0:	2e 96       	adiw	r28, 0x0e	; 14
    27d2:	de bf       	out	0x3e, r29	; 62
    27d4:	cd bf       	out	0x3d, r28	; 61
    27d6:	cf 91       	pop	r28
    27d8:	df 91       	pop	r29
    27da:	ff 91       	pop	r31
    27dc:	ef 91       	pop	r30
    27de:	bf 91       	pop	r27
    27e0:	af 91       	pop	r26
    27e2:	9f 91       	pop	r25
    27e4:	8f 91       	pop	r24
    27e6:	7f 91       	pop	r23
    27e8:	6f 91       	pop	r22
    27ea:	5f 91       	pop	r21
    27ec:	4f 91       	pop	r20
    27ee:	3f 91       	pop	r19
    27f0:	2f 91       	pop	r18
    27f2:	0f 90       	pop	r0
    27f4:	0f be       	out	0x3f, r0	; 63
    27f6:	0f 90       	pop	r0
    27f8:	1f 90       	pop	r1
    27fa:	18 95       	reti

000027fc <__vector_10>:
// system clock = 5 MHZ
// COMPARING MATCH VALUE = 250 ;

void __vector_10(void)__attribute__((signal));
void __vector_10(void)
{
    27fc:	1f 92       	push	r1
    27fe:	0f 92       	push	r0
    2800:	0f b6       	in	r0, 0x3f	; 63
    2802:	0f 92       	push	r0
    2804:	11 24       	eor	r1, r1
    2806:	2f 93       	push	r18
    2808:	3f 93       	push	r19
    280a:	4f 93       	push	r20
    280c:	5f 93       	push	r21
    280e:	6f 93       	push	r22
    2810:	7f 93       	push	r23
    2812:	8f 93       	push	r24
    2814:	9f 93       	push	r25
    2816:	af 93       	push	r26
    2818:	bf 93       	push	r27
    281a:	ef 93       	push	r30
    281c:	ff 93       	push	r31
    281e:	df 93       	push	r29
    2820:	cf 93       	push	r28
    2822:	cd b7       	in	r28, 0x3d	; 61
    2824:	de b7       	in	r29, 0x3e	; 62
    2826:	2e 97       	sbiw	r28, 0x0e	; 14
    2828:	de bf       	out	0x3e, r29	; 62
    282a:	cd bf       	out	0x3d, r28	; 61
	static u16 Counter =0 ;
	Counter ++;
    282c:	80 91 9a 00 	lds	r24, 0x009A
    2830:	90 91 9b 00 	lds	r25, 0x009B
    2834:	01 96       	adiw	r24, 0x01	; 1
    2836:	90 93 9b 00 	sts	0x009B, r25
    283a:	80 93 9a 00 	sts	0x009A, r24
	if (Counter == 4000 ) // HERE THE OVER FLOW COUNT (this the important thing )
    283e:	80 91 9a 00 	lds	r24, 0x009A
    2842:	90 91 9b 00 	lds	r25, 0x009B
    2846:	2f e0       	ldi	r18, 0x0F	; 15
    2848:	80 3a       	cpi	r24, 0xA0	; 160
    284a:	92 07       	cpc	r25, r18
    284c:	09 f0       	breq	.+2      	; 0x2850 <__vector_10+0x54>
    284e:	82 c0       	rjmp	.+260    	; 0x2954 <__vector_10+0x158>
	{
		TCNT0=0; // THE PRELOAD VALUE
    2850:	e2 e5       	ldi	r30, 0x52	; 82
    2852:	f0 e0       	ldi	r31, 0x00	; 0
    2854:	10 82       	st	Z, r1
		// here the app after the delay ends
		LED_voidOff(PORTA_REG, PINA_REG);
    2856:	eb e3       	ldi	r30, 0x3B	; 59
    2858:	f0 e0       	ldi	r31, 0x00	; 0
    285a:	80 81       	ld	r24, Z
    285c:	e9 e3       	ldi	r30, 0x39	; 57
    285e:	f0 e0       	ldi	r31, 0x00	; 0
    2860:	90 81       	ld	r25, Z
    2862:	69 2f       	mov	r22, r25
    2864:	0e 94 75 0d 	call	0x1aea	; 0x1aea <LED_voidOff>
    2868:	80 e0       	ldi	r24, 0x00	; 0
    286a:	90 e0       	ldi	r25, 0x00	; 0
    286c:	aa ef       	ldi	r26, 0xFA	; 250
    286e:	b3 e4       	ldi	r27, 0x43	; 67
    2870:	8b 87       	std	Y+11, r24	; 0x0b
    2872:	9c 87       	std	Y+12, r25	; 0x0c
    2874:	ad 87       	std	Y+13, r26	; 0x0d
    2876:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2878:	6b 85       	ldd	r22, Y+11	; 0x0b
    287a:	7c 85       	ldd	r23, Y+12	; 0x0c
    287c:	8d 85       	ldd	r24, Y+13	; 0x0d
    287e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2880:	20 e0       	ldi	r18, 0x00	; 0
    2882:	30 e8       	ldi	r19, 0x80	; 128
    2884:	4b e3       	ldi	r20, 0x3B	; 59
    2886:	55 e4       	ldi	r21, 0x45	; 69
    2888:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    288c:	dc 01       	movw	r26, r24
    288e:	cb 01       	movw	r24, r22
    2890:	8f 83       	std	Y+7, r24	; 0x07
    2892:	98 87       	std	Y+8, r25	; 0x08
    2894:	a9 87       	std	Y+9, r26	; 0x09
    2896:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2898:	6f 81       	ldd	r22, Y+7	; 0x07
    289a:	78 85       	ldd	r23, Y+8	; 0x08
    289c:	89 85       	ldd	r24, Y+9	; 0x09
    289e:	9a 85       	ldd	r25, Y+10	; 0x0a
    28a0:	20 e0       	ldi	r18, 0x00	; 0
    28a2:	30 e0       	ldi	r19, 0x00	; 0
    28a4:	40 e8       	ldi	r20, 0x80	; 128
    28a6:	5f e3       	ldi	r21, 0x3F	; 63
    28a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28ac:	88 23       	and	r24, r24
    28ae:	2c f4       	brge	.+10     	; 0x28ba <__vector_10+0xbe>
		__ticks = 1;
    28b0:	81 e0       	ldi	r24, 0x01	; 1
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	9e 83       	std	Y+6, r25	; 0x06
    28b6:	8d 83       	std	Y+5, r24	; 0x05
    28b8:	3f c0       	rjmp	.+126    	; 0x2938 <__vector_10+0x13c>
	else if (__tmp > 65535)
    28ba:	6f 81       	ldd	r22, Y+7	; 0x07
    28bc:	78 85       	ldd	r23, Y+8	; 0x08
    28be:	89 85       	ldd	r24, Y+9	; 0x09
    28c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    28c2:	20 e0       	ldi	r18, 0x00	; 0
    28c4:	3f ef       	ldi	r19, 0xFF	; 255
    28c6:	4f e7       	ldi	r20, 0x7F	; 127
    28c8:	57 e4       	ldi	r21, 0x47	; 71
    28ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28ce:	18 16       	cp	r1, r24
    28d0:	4c f5       	brge	.+82     	; 0x2924 <__vector_10+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    28d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    28d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    28d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    28da:	20 e0       	ldi	r18, 0x00	; 0
    28dc:	30 e0       	ldi	r19, 0x00	; 0
    28de:	40 e2       	ldi	r20, 0x20	; 32
    28e0:	51 e4       	ldi	r21, 0x41	; 65
    28e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28e6:	dc 01       	movw	r26, r24
    28e8:	cb 01       	movw	r24, r22
    28ea:	bc 01       	movw	r22, r24
    28ec:	cd 01       	movw	r24, r26
    28ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f2:	dc 01       	movw	r26, r24
    28f4:	cb 01       	movw	r24, r22
    28f6:	9e 83       	std	Y+6, r25	; 0x06
    28f8:	8d 83       	std	Y+5, r24	; 0x05
    28fa:	0f c0       	rjmp	.+30     	; 0x291a <__vector_10+0x11e>
    28fc:	8c e2       	ldi	r24, 0x2C	; 44
    28fe:	91 e0       	ldi	r25, 0x01	; 1
    2900:	9c 83       	std	Y+4, r25	; 0x04
    2902:	8b 83       	std	Y+3, r24	; 0x03
    2904:	8b 81       	ldd	r24, Y+3	; 0x03
    2906:	9c 81       	ldd	r25, Y+4	; 0x04
    2908:	01 97       	sbiw	r24, 0x01	; 1
    290a:	f1 f7       	brne	.-4      	; 0x2908 <__vector_10+0x10c>
    290c:	9c 83       	std	Y+4, r25	; 0x04
    290e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2910:	8d 81       	ldd	r24, Y+5	; 0x05
    2912:	9e 81       	ldd	r25, Y+6	; 0x06
    2914:	01 97       	sbiw	r24, 0x01	; 1
    2916:	9e 83       	std	Y+6, r25	; 0x06
    2918:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    291a:	8d 81       	ldd	r24, Y+5	; 0x05
    291c:	9e 81       	ldd	r25, Y+6	; 0x06
    291e:	00 97       	sbiw	r24, 0x00	; 0
    2920:	69 f7       	brne	.-38     	; 0x28fc <__vector_10+0x100>
    2922:	14 c0       	rjmp	.+40     	; 0x294c <__vector_10+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2924:	6f 81       	ldd	r22, Y+7	; 0x07
    2926:	78 85       	ldd	r23, Y+8	; 0x08
    2928:	89 85       	ldd	r24, Y+9	; 0x09
    292a:	9a 85       	ldd	r25, Y+10	; 0x0a
    292c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2930:	dc 01       	movw	r26, r24
    2932:	cb 01       	movw	r24, r22
    2934:	9e 83       	std	Y+6, r25	; 0x06
    2936:	8d 83       	std	Y+5, r24	; 0x05
    2938:	8d 81       	ldd	r24, Y+5	; 0x05
    293a:	9e 81       	ldd	r25, Y+6	; 0x06
    293c:	9a 83       	std	Y+2, r25	; 0x02
    293e:	89 83       	std	Y+1, r24	; 0x01
    2940:	89 81       	ldd	r24, Y+1	; 0x01
    2942:	9a 81       	ldd	r25, Y+2	; 0x02
    2944:	01 97       	sbiw	r24, 0x01	; 1
    2946:	f1 f7       	brne	.-4      	; 0x2944 <__vector_10+0x148>
    2948:	9a 83       	std	Y+2, r25	; 0x02
    294a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500); // here just to notice the change
		Counter =0 ;
    294c:	10 92 9b 00 	sts	0x009B, r1
    2950:	10 92 9a 00 	sts	0x009A, r1
	}

}
    2954:	2e 96       	adiw	r28, 0x0e	; 14
    2956:	de bf       	out	0x3e, r29	; 62
    2958:	cd bf       	out	0x3d, r28	; 61
    295a:	cf 91       	pop	r28
    295c:	df 91       	pop	r29
    295e:	ff 91       	pop	r31
    2960:	ef 91       	pop	r30
    2962:	bf 91       	pop	r27
    2964:	af 91       	pop	r26
    2966:	9f 91       	pop	r25
    2968:	8f 91       	pop	r24
    296a:	7f 91       	pop	r23
    296c:	6f 91       	pop	r22
    296e:	5f 91       	pop	r21
    2970:	4f 91       	pop	r20
    2972:	3f 91       	pop	r19
    2974:	2f 91       	pop	r18
    2976:	0f 90       	pop	r0
    2978:	0f be       	out	0x3f, r0	; 63
    297a:	0f 90       	pop	r0
    297c:	1f 90       	pop	r1
    297e:	18 95       	reti

00002980 <_02_TIEMR0_APP>:
#include "../../MCAL/EXT_ISR/EXT_ISR_Interface.h"
#include <avr/delay.h>

// THIS APP MAKE THE LED TURNED OFF EVERY 5 SEC
// IF WE WANT TO USE IT WE HAVE TO PUT IT IN THE MAIN FILE
void _02_TIEMR0_APP(void ){
    2980:	df 93       	push	r29
    2982:	cf 93       	push	r28
    2984:	cd b7       	in	r28, 0x3d	; 61
    2986:	de b7       	in	r29, 0x3e	; 62
    2988:	2f 97       	sbiw	r28, 0x0f	; 15
    298a:	0f b6       	in	r0, 0x3f	; 63
    298c:	f8 94       	cli
    298e:	de bf       	out	0x3e, r29	; 62
    2990:	0f be       	out	0x3f, r0	; 63
    2992:	cd bf       	out	0x3d, r28	; 61

	TIMER0_voidInit();
    2994:	0e 94 ee 06 	call	0xddc	; 0xddc <TIMER0_voidInit>
	DIO_voidSetPortDirection(PORTB_REG, Output);
    2998:	e8 e3       	ldi	r30, 0x38	; 56
    299a:	f0 e0       	ldi	r31, 0x00	; 0
    299c:	80 81       	ld	r24, Z
    299e:	60 e0       	ldi	r22, 0x00	; 0
    29a0:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_voidSetPortDirection>


	while (1)
	{
		for (u8 Counter = 0; Counter <= 100 ; Counter ++)
    29a4:	1f 86       	std	Y+15, r1	; 0x0f
    29a6:	75 c0       	rjmp	.+234    	; 0x2a92 <_02_TIEMR0_APP+0x112>
    29a8:	80 e0       	ldi	r24, 0x00	; 0
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	aa e7       	ldi	r26, 0x7A	; 122
    29ae:	b4 e4       	ldi	r27, 0x44	; 68
    29b0:	8b 87       	std	Y+11, r24	; 0x0b
    29b2:	9c 87       	std	Y+12, r25	; 0x0c
    29b4:	ad 87       	std	Y+13, r26	; 0x0d
    29b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    29ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    29bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    29be:	9e 85       	ldd	r25, Y+14	; 0x0e
    29c0:	20 e0       	ldi	r18, 0x00	; 0
    29c2:	30 e8       	ldi	r19, 0x80	; 128
    29c4:	4b e3       	ldi	r20, 0x3B	; 59
    29c6:	55 e4       	ldi	r21, 0x45	; 69
    29c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29cc:	dc 01       	movw	r26, r24
    29ce:	cb 01       	movw	r24, r22
    29d0:	8f 83       	std	Y+7, r24	; 0x07
    29d2:	98 87       	std	Y+8, r25	; 0x08
    29d4:	a9 87       	std	Y+9, r26	; 0x09
    29d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29d8:	6f 81       	ldd	r22, Y+7	; 0x07
    29da:	78 85       	ldd	r23, Y+8	; 0x08
    29dc:	89 85       	ldd	r24, Y+9	; 0x09
    29de:	9a 85       	ldd	r25, Y+10	; 0x0a
    29e0:	20 e0       	ldi	r18, 0x00	; 0
    29e2:	30 e0       	ldi	r19, 0x00	; 0
    29e4:	40 e8       	ldi	r20, 0x80	; 128
    29e6:	5f e3       	ldi	r21, 0x3F	; 63
    29e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29ec:	88 23       	and	r24, r24
    29ee:	2c f4       	brge	.+10     	; 0x29fa <_02_TIEMR0_APP+0x7a>
		__ticks = 1;
    29f0:	81 e0       	ldi	r24, 0x01	; 1
    29f2:	90 e0       	ldi	r25, 0x00	; 0
    29f4:	9e 83       	std	Y+6, r25	; 0x06
    29f6:	8d 83       	std	Y+5, r24	; 0x05
    29f8:	3f c0       	rjmp	.+126    	; 0x2a78 <_02_TIEMR0_APP+0xf8>
	else if (__tmp > 65535)
    29fa:	6f 81       	ldd	r22, Y+7	; 0x07
    29fc:	78 85       	ldd	r23, Y+8	; 0x08
    29fe:	89 85       	ldd	r24, Y+9	; 0x09
    2a00:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a02:	20 e0       	ldi	r18, 0x00	; 0
    2a04:	3f ef       	ldi	r19, 0xFF	; 255
    2a06:	4f e7       	ldi	r20, 0x7F	; 127
    2a08:	57 e4       	ldi	r21, 0x47	; 71
    2a0a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a0e:	18 16       	cp	r1, r24
    2a10:	4c f5       	brge	.+82     	; 0x2a64 <_02_TIEMR0_APP+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a12:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a14:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a16:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a18:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a1a:	20 e0       	ldi	r18, 0x00	; 0
    2a1c:	30 e0       	ldi	r19, 0x00	; 0
    2a1e:	40 e2       	ldi	r20, 0x20	; 32
    2a20:	51 e4       	ldi	r21, 0x41	; 65
    2a22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a26:	dc 01       	movw	r26, r24
    2a28:	cb 01       	movw	r24, r22
    2a2a:	bc 01       	movw	r22, r24
    2a2c:	cd 01       	movw	r24, r26
    2a2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a32:	dc 01       	movw	r26, r24
    2a34:	cb 01       	movw	r24, r22
    2a36:	9e 83       	std	Y+6, r25	; 0x06
    2a38:	8d 83       	std	Y+5, r24	; 0x05
    2a3a:	0f c0       	rjmp	.+30     	; 0x2a5a <_02_TIEMR0_APP+0xda>
    2a3c:	8c e2       	ldi	r24, 0x2C	; 44
    2a3e:	91 e0       	ldi	r25, 0x01	; 1
    2a40:	9c 83       	std	Y+4, r25	; 0x04
    2a42:	8b 83       	std	Y+3, r24	; 0x03
    2a44:	8b 81       	ldd	r24, Y+3	; 0x03
    2a46:	9c 81       	ldd	r25, Y+4	; 0x04
    2a48:	01 97       	sbiw	r24, 0x01	; 1
    2a4a:	f1 f7       	brne	.-4      	; 0x2a48 <_02_TIEMR0_APP+0xc8>
    2a4c:	9c 83       	std	Y+4, r25	; 0x04
    2a4e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a50:	8d 81       	ldd	r24, Y+5	; 0x05
    2a52:	9e 81       	ldd	r25, Y+6	; 0x06
    2a54:	01 97       	sbiw	r24, 0x01	; 1
    2a56:	9e 83       	std	Y+6, r25	; 0x06
    2a58:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a5a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a5c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a5e:	00 97       	sbiw	r24, 0x00	; 0
    2a60:	69 f7       	brne	.-38     	; 0x2a3c <_02_TIEMR0_APP+0xbc>
    2a62:	14 c0       	rjmp	.+40     	; 0x2a8c <_02_TIEMR0_APP+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a64:	6f 81       	ldd	r22, Y+7	; 0x07
    2a66:	78 85       	ldd	r23, Y+8	; 0x08
    2a68:	89 85       	ldd	r24, Y+9	; 0x09
    2a6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a70:	dc 01       	movw	r26, r24
    2a72:	cb 01       	movw	r24, r22
    2a74:	9e 83       	std	Y+6, r25	; 0x06
    2a76:	8d 83       	std	Y+5, r24	; 0x05
    2a78:	8d 81       	ldd	r24, Y+5	; 0x05
    2a7a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a7c:	9a 83       	std	Y+2, r25	; 0x02
    2a7e:	89 83       	std	Y+1, r24	; 0x01
    2a80:	89 81       	ldd	r24, Y+1	; 0x01
    2a82:	9a 81       	ldd	r25, Y+2	; 0x02
    2a84:	01 97       	sbiw	r24, 0x01	; 1
    2a86:	f1 f7       	brne	.-4      	; 0x2a84 <_02_TIEMR0_APP+0x104>
    2a88:	9a 83       	std	Y+2, r25	; 0x02
    2a8a:	89 83       	std	Y+1, r24	; 0x01
    2a8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a8e:	8f 5f       	subi	r24, 0xFF	; 255
    2a90:	8f 87       	std	Y+15, r24	; 0x0f
    2a92:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a94:	85 36       	cpi	r24, 0x65	; 101
    2a96:	08 f4       	brcc	.+2      	; 0x2a9a <_02_TIEMR0_APP+0x11a>
    2a98:	87 cf       	rjmp	.-242    	; 0x29a8 <_02_TIEMR0_APP+0x28>
    2a9a:	84 cf       	rjmp	.-248    	; 0x29a4 <_02_TIEMR0_APP+0x24>

00002a9c <TEST_void001test>:
 *      Author: zaynab
 */
#include "IR_withMotors.h"
// OC1A --> 4  OC1B--> 5 PORTD

void TEST_void001test(){
    2a9c:	df 93       	push	r29
    2a9e:	cf 93       	push	r28
    2aa0:	00 d0       	rcall	.+0      	; 0x2aa2 <TEST_void001test+0x6>
    2aa2:	0f 92       	push	r0
    2aa4:	cd b7       	in	r28, 0x3d	; 61
    2aa6:	de b7       	in	r29, 0x3e	; 62
	// initialize IR
	IR_voidInit(PORT_B,Pin_0); // FORWARD IR
    2aa8:	81 e0       	ldi	r24, 0x01	; 1
    2aaa:	60 e0       	ldi	r22, 0x00	; 0
    2aac:	0e 94 bd 12 	call	0x257a	; 0x257a <IR_voidInit>
	IR_voidInit(PORT_B,Pin_1); // RIGHT IR
    2ab0:	81 e0       	ldi	r24, 0x01	; 1
    2ab2:	61 e0       	ldi	r22, 0x01	; 1
    2ab4:	0e 94 bd 12 	call	0x257a	; 0x257a <IR_voidInit>
	IR_voidInit(PORT_B,Pin_2); // LEFT IR
    2ab8:	81 e0       	ldi	r24, 0x01	; 1
    2aba:	62 e0       	ldi	r22, 0x02	; 2
    2abc:	0e 94 bd 12 	call	0x257a	; 0x257a <IR_voidInit>

	// init two motors
	motor1._PIN1=PIN_0;
    2ac0:	10 92 68 00 	sts	0x0068, r1
	motor1._PIN2=PIN_1;  // right
    2ac4:	81 e0       	ldi	r24, 0x01	; 1
    2ac6:	80 93 69 00 	sts	0x0069, r24
	motor1._PORT=PORT_D;
    2aca:	83 e0       	ldi	r24, 0x03	; 3
    2acc:	80 93 6a 00 	sts	0x006A, r24
	motor1._PWMPIN=PIN_4; // OC1A
    2ad0:	84 e0       	ldi	r24, 0x04	; 4
    2ad2:	80 93 6b 00 	sts	0x006B, r24

	motor2._PIN1=PIN_2;
    2ad6:	82 e0       	ldi	r24, 0x02	; 2
    2ad8:	80 93 6c 00 	sts	0x006C, r24
	motor2._PIN2=PIN_3;    // left
    2adc:	83 e0       	ldi	r24, 0x03	; 3
    2ade:	80 93 6d 00 	sts	0x006D, r24
	motor2._PORT=PORT_D;
    2ae2:	83 e0       	ldi	r24, 0x03	; 3
    2ae4:	80 93 6e 00 	sts	0x006E, r24
	motor2._PWMPIN=PIN_5;  // OC1B
    2ae8:	85 e0       	ldi	r24, 0x05	; 5
    2aea:	80 93 6f 00 	sts	0x006F, r24

	MOTOR_voidInit(motor1);
    2aee:	80 91 68 00 	lds	r24, 0x0068
    2af2:	90 91 69 00 	lds	r25, 0x0069
    2af6:	a0 91 6a 00 	lds	r26, 0x006A
    2afa:	b0 91 6b 00 	lds	r27, 0x006B
    2afe:	bc 01       	movw	r22, r24
    2b00:	cd 01       	movw	r24, r26
    2b02:	0e 94 4c 0c 	call	0x1898	; 0x1898 <MOTOR_voidInit>
	MOTOR_voidInit(motor2);
    2b06:	80 91 6c 00 	lds	r24, 0x006C
    2b0a:	90 91 6d 00 	lds	r25, 0x006D
    2b0e:	a0 91 6e 00 	lds	r26, 0x006E
    2b12:	b0 91 6f 00 	lds	r27, 0x006F
    2b16:	bc 01       	movw	r22, r24
    2b18:	cd 01       	movw	r24, r26
    2b1a:	0e 94 4c 0c 	call	0x1898	; 0x1898 <MOTOR_voidInit>
	MOTOR_voidSetSpeed(motor1,200);
    2b1e:	80 91 68 00 	lds	r24, 0x0068
    2b22:	90 91 69 00 	lds	r25, 0x0069
    2b26:	a0 91 6a 00 	lds	r26, 0x006A
    2b2a:	b0 91 6b 00 	lds	r27, 0x006B
    2b2e:	bc 01       	movw	r22, r24
    2b30:	cd 01       	movw	r24, r26
    2b32:	48 ec       	ldi	r20, 0xC8	; 200
    2b34:	50 e0       	ldi	r21, 0x00	; 0
    2b36:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <MOTOR_voidSetSpeed>
	MOTOR_voidSetSpeed(motor2,200);
    2b3a:	80 91 6c 00 	lds	r24, 0x006C
    2b3e:	90 91 6d 00 	lds	r25, 0x006D
    2b42:	a0 91 6e 00 	lds	r26, 0x006E
    2b46:	b0 91 6f 00 	lds	r27, 0x006F
    2b4a:	bc 01       	movw	r22, r24
    2b4c:	cd 01       	movw	r24, r26
    2b4e:	48 ec       	ldi	r20, 0xC8	; 200
    2b50:	50 e0       	ldi	r21, 0x00	; 0
    2b52:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <MOTOR_voidSetSpeed>



	bool obstical_right , obstical_left , obstical_forward;
	while (1){
		MOTOR_voidSetSpeed(motor1,200);
    2b56:	80 91 68 00 	lds	r24, 0x0068
    2b5a:	90 91 69 00 	lds	r25, 0x0069
    2b5e:	a0 91 6a 00 	lds	r26, 0x006A
    2b62:	b0 91 6b 00 	lds	r27, 0x006B
    2b66:	bc 01       	movw	r22, r24
    2b68:	cd 01       	movw	r24, r26
    2b6a:	48 ec       	ldi	r20, 0xC8	; 200
    2b6c:	50 e0       	ldi	r21, 0x00	; 0
    2b6e:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <MOTOR_voidSetSpeed>
			MOTOR_voidSetSpeed(motor2,200);
    2b72:	80 91 6c 00 	lds	r24, 0x006C
    2b76:	90 91 6d 00 	lds	r25, 0x006D
    2b7a:	a0 91 6e 00 	lds	r26, 0x006E
    2b7e:	b0 91 6f 00 	lds	r27, 0x006F
    2b82:	bc 01       	movw	r22, r24
    2b84:	cd 01       	movw	r24, r26
    2b86:	48 ec       	ldi	r20, 0xC8	; 200
    2b88:	50 e0       	ldi	r21, 0x00	; 0
    2b8a:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <MOTOR_voidSetSpeed>
		obstical_forward = IR_boolCheckObstical(PORT_B,Pin_0);
    2b8e:	81 e0       	ldi	r24, 0x01	; 1
    2b90:	60 e0       	ldi	r22, 0x00	; 0
    2b92:	0e 94 ce 12 	call	0x259c	; 0x259c <IR_boolCheckObstical>
    2b96:	89 83       	std	Y+1, r24	; 0x01
		obstical_left    = IR_boolCheckObstical(PORT_B,Pin_2);
    2b98:	81 e0       	ldi	r24, 0x01	; 1
    2b9a:	62 e0       	ldi	r22, 0x02	; 2
    2b9c:	0e 94 ce 12 	call	0x259c	; 0x259c <IR_boolCheckObstical>
    2ba0:	8a 83       	std	Y+2, r24	; 0x02
		obstical_right   = IR_boolCheckObstical(PORT_B,Pin_1);
    2ba2:	81 e0       	ldi	r24, 0x01	; 1
    2ba4:	61 e0       	ldi	r22, 0x01	; 1
    2ba6:	0e 94 ce 12 	call	0x259c	; 0x259c <IR_boolCheckObstical>
    2baa:	8b 83       	std	Y+3, r24	; 0x03

		if (obstical_forward){MOTOR_voidRight(motor1, motor2); }  // trun right
    2bac:	89 81       	ldd	r24, Y+1	; 0x01
    2bae:	88 23       	and	r24, r24
    2bb0:	a1 f0       	breq	.+40     	; 0x2bda <TEST_void001test+0x13e>
    2bb2:	80 91 68 00 	lds	r24, 0x0068
    2bb6:	90 91 69 00 	lds	r25, 0x0069
    2bba:	a0 91 6a 00 	lds	r26, 0x006A
    2bbe:	b0 91 6b 00 	lds	r27, 0x006B
    2bc2:	20 91 6c 00 	lds	r18, 0x006C
    2bc6:	30 91 6d 00 	lds	r19, 0x006D
    2bca:	40 91 6e 00 	lds	r20, 0x006E
    2bce:	50 91 6f 00 	lds	r21, 0x006F
    2bd2:	bc 01       	movw	r22, r24
    2bd4:	cd 01       	movw	r24, r26
    2bd6:	0e 94 b9 0c 	call	0x1972	; 0x1972 <MOTOR_voidRight>
		if (obstical_right) { MOTOR_voidLeft(motor1 , motor2);}  // turn left
    2bda:	8b 81       	ldd	r24, Y+3	; 0x03
    2bdc:	88 23       	and	r24, r24
    2bde:	a9 f0       	breq	.+42     	; 0x2c0a <TEST_void001test+0x16e>
    2be0:	80 91 68 00 	lds	r24, 0x0068
    2be4:	90 91 69 00 	lds	r25, 0x0069
    2be8:	a0 91 6a 00 	lds	r26, 0x006A
    2bec:	b0 91 6b 00 	lds	r27, 0x006B
    2bf0:	20 91 6c 00 	lds	r18, 0x006C
    2bf4:	30 91 6d 00 	lds	r19, 0x006D
    2bf8:	40 91 6e 00 	lds	r20, 0x006E
    2bfc:	50 91 6f 00 	lds	r21, 0x006F
    2c00:	bc 01       	movw	r22, r24
    2c02:	cd 01       	movw	r24, r26
    2c04:	0e 94 8c 0c 	call	0x1918	; 0x1918 <MOTOR_voidLeft>
    2c08:	a6 cf       	rjmp	.-180    	; 0x2b56 <TEST_void001test+0xba>
		else {
			MOTOR_voidForward(motor1);
    2c0a:	80 91 68 00 	lds	r24, 0x0068
    2c0e:	90 91 69 00 	lds	r25, 0x0069
    2c12:	a0 91 6a 00 	lds	r26, 0x006A
    2c16:	b0 91 6b 00 	lds	r27, 0x006B
    2c1a:	bc 01       	movw	r22, r24
    2c1c:	cd 01       	movw	r24, r26
    2c1e:	0e 94 6f 0c 	call	0x18de	; 0x18de <MOTOR_voidForward>
			MOTOR_voidForward(motor2);
    2c22:	80 91 6c 00 	lds	r24, 0x006C
    2c26:	90 91 6d 00 	lds	r25, 0x006D
    2c2a:	a0 91 6e 00 	lds	r26, 0x006E
    2c2e:	b0 91 6f 00 	lds	r27, 0x006F
    2c32:	bc 01       	movw	r22, r24
    2c34:	cd 01       	movw	r24, r26
    2c36:	0e 94 6f 0c 	call	0x18de	; 0x18de <MOTOR_voidForward>
    2c3a:	8d cf       	rjmp	.-230    	; 0x2b56 <TEST_void001test+0xba>

00002c3c <test_dutycycle_for_timer1>:
 */

#include "pwm_test.h"

void test_dutycycle_for_timer1(void)
{
    2c3c:	df 93       	push	r29
    2c3e:	cf 93       	push	r28
    2c40:	cd b7       	in	r28, 0x3d	; 61
    2c42:	de b7       	in	r29, 0x3e	; 62
    2c44:	60 97       	sbiw	r28, 0x10	; 16
    2c46:	0f b6       	in	r0, 0x3f	; 63
    2c48:	f8 94       	cli
    2c4a:	de bf       	out	0x3e, r29	; 62
    2c4c:	0f be       	out	0x3f, r0	; 63
    2c4e:	cd bf       	out	0x3d, r28	; 61
	PWM1_init();
    2c50:	0e 94 48 07 	call	0xe90	; 0xe90 <PWM1_init>


	while(1){
		for (u16 duty=200 ; duty<255;duty--)
    2c54:	88 ec       	ldi	r24, 0xC8	; 200
    2c56:	90 e0       	ldi	r25, 0x00	; 0
    2c58:	98 8b       	std	Y+16, r25	; 0x10
    2c5a:	8f 87       	std	Y+15, r24	; 0x0f
    2c5c:	83 c0       	rjmp	.+262    	; 0x2d64 <test_dutycycle_for_timer1+0x128>
		{
		PWM1_Adutycycle(duty);
    2c5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c60:	98 89       	ldd	r25, Y+16	; 0x10
    2c62:	0e 94 6a 07 	call	0xed4	; 0xed4 <PWM1_Adutycycle>
		PWM1_Bdutycycle(duty);
    2c66:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c68:	98 89       	ldd	r25, Y+16	; 0x10
    2c6a:	0e 94 81 07 	call	0xf02	; 0xf02 <PWM1_Bdutycycle>
		PWM0_dutycycle(duty);
    2c6e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c70:	98 89       	ldd	r25, Y+16	; 0x10
    2c72:	0e 94 38 07 	call	0xe70	; 0xe70 <PWM0_dutycycle>
    2c76:	80 e0       	ldi	r24, 0x00	; 0
    2c78:	90 e0       	ldi	r25, 0x00	; 0
    2c7a:	a0 ea       	ldi	r26, 0xA0	; 160
    2c7c:	b1 e4       	ldi	r27, 0x41	; 65
    2c7e:	8b 87       	std	Y+11, r24	; 0x0b
    2c80:	9c 87       	std	Y+12, r25	; 0x0c
    2c82:	ad 87       	std	Y+13, r26	; 0x0d
    2c84:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c86:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c88:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c8e:	20 e0       	ldi	r18, 0x00	; 0
    2c90:	30 e8       	ldi	r19, 0x80	; 128
    2c92:	4b e3       	ldi	r20, 0x3B	; 59
    2c94:	55 e4       	ldi	r21, 0x45	; 69
    2c96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c9a:	dc 01       	movw	r26, r24
    2c9c:	cb 01       	movw	r24, r22
    2c9e:	8f 83       	std	Y+7, r24	; 0x07
    2ca0:	98 87       	std	Y+8, r25	; 0x08
    2ca2:	a9 87       	std	Y+9, r26	; 0x09
    2ca4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ca6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ca8:	78 85       	ldd	r23, Y+8	; 0x08
    2caa:	89 85       	ldd	r24, Y+9	; 0x09
    2cac:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cae:	20 e0       	ldi	r18, 0x00	; 0
    2cb0:	30 e0       	ldi	r19, 0x00	; 0
    2cb2:	40 e8       	ldi	r20, 0x80	; 128
    2cb4:	5f e3       	ldi	r21, 0x3F	; 63
    2cb6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cba:	88 23       	and	r24, r24
    2cbc:	2c f4       	brge	.+10     	; 0x2cc8 <test_dutycycle_for_timer1+0x8c>
		__ticks = 1;
    2cbe:	81 e0       	ldi	r24, 0x01	; 1
    2cc0:	90 e0       	ldi	r25, 0x00	; 0
    2cc2:	9e 83       	std	Y+6, r25	; 0x06
    2cc4:	8d 83       	std	Y+5, r24	; 0x05
    2cc6:	3f c0       	rjmp	.+126    	; 0x2d46 <test_dutycycle_for_timer1+0x10a>
	else if (__tmp > 65535)
    2cc8:	6f 81       	ldd	r22, Y+7	; 0x07
    2cca:	78 85       	ldd	r23, Y+8	; 0x08
    2ccc:	89 85       	ldd	r24, Y+9	; 0x09
    2cce:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cd0:	20 e0       	ldi	r18, 0x00	; 0
    2cd2:	3f ef       	ldi	r19, 0xFF	; 255
    2cd4:	4f e7       	ldi	r20, 0x7F	; 127
    2cd6:	57 e4       	ldi	r21, 0x47	; 71
    2cd8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cdc:	18 16       	cp	r1, r24
    2cde:	4c f5       	brge	.+82     	; 0x2d32 <test_dutycycle_for_timer1+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ce0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ce2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ce4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ce6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ce8:	20 e0       	ldi	r18, 0x00	; 0
    2cea:	30 e0       	ldi	r19, 0x00	; 0
    2cec:	40 e2       	ldi	r20, 0x20	; 32
    2cee:	51 e4       	ldi	r21, 0x41	; 65
    2cf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cf4:	dc 01       	movw	r26, r24
    2cf6:	cb 01       	movw	r24, r22
    2cf8:	bc 01       	movw	r22, r24
    2cfa:	cd 01       	movw	r24, r26
    2cfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d00:	dc 01       	movw	r26, r24
    2d02:	cb 01       	movw	r24, r22
    2d04:	9e 83       	std	Y+6, r25	; 0x06
    2d06:	8d 83       	std	Y+5, r24	; 0x05
    2d08:	0f c0       	rjmp	.+30     	; 0x2d28 <test_dutycycle_for_timer1+0xec>
    2d0a:	8c e2       	ldi	r24, 0x2C	; 44
    2d0c:	91 e0       	ldi	r25, 0x01	; 1
    2d0e:	9c 83       	std	Y+4, r25	; 0x04
    2d10:	8b 83       	std	Y+3, r24	; 0x03
    2d12:	8b 81       	ldd	r24, Y+3	; 0x03
    2d14:	9c 81       	ldd	r25, Y+4	; 0x04
    2d16:	01 97       	sbiw	r24, 0x01	; 1
    2d18:	f1 f7       	brne	.-4      	; 0x2d16 <test_dutycycle_for_timer1+0xda>
    2d1a:	9c 83       	std	Y+4, r25	; 0x04
    2d1c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d1e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d20:	9e 81       	ldd	r25, Y+6	; 0x06
    2d22:	01 97       	sbiw	r24, 0x01	; 1
    2d24:	9e 83       	std	Y+6, r25	; 0x06
    2d26:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d28:	8d 81       	ldd	r24, Y+5	; 0x05
    2d2a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d2c:	00 97       	sbiw	r24, 0x00	; 0
    2d2e:	69 f7       	brne	.-38     	; 0x2d0a <test_dutycycle_for_timer1+0xce>
    2d30:	14 c0       	rjmp	.+40     	; 0x2d5a <test_dutycycle_for_timer1+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d32:	6f 81       	ldd	r22, Y+7	; 0x07
    2d34:	78 85       	ldd	r23, Y+8	; 0x08
    2d36:	89 85       	ldd	r24, Y+9	; 0x09
    2d38:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d3e:	dc 01       	movw	r26, r24
    2d40:	cb 01       	movw	r24, r22
    2d42:	9e 83       	std	Y+6, r25	; 0x06
    2d44:	8d 83       	std	Y+5, r24	; 0x05
    2d46:	8d 81       	ldd	r24, Y+5	; 0x05
    2d48:	9e 81       	ldd	r25, Y+6	; 0x06
    2d4a:	9a 83       	std	Y+2, r25	; 0x02
    2d4c:	89 83       	std	Y+1, r24	; 0x01
    2d4e:	89 81       	ldd	r24, Y+1	; 0x01
    2d50:	9a 81       	ldd	r25, Y+2	; 0x02
    2d52:	01 97       	sbiw	r24, 0x01	; 1
    2d54:	f1 f7       	brne	.-4      	; 0x2d52 <test_dutycycle_for_timer1+0x116>
    2d56:	9a 83       	std	Y+2, r25	; 0x02
    2d58:	89 83       	std	Y+1, r24	; 0x01
{
	PWM1_init();


	while(1){
		for (u16 duty=200 ; duty<255;duty--)
    2d5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d5c:	98 89       	ldd	r25, Y+16	; 0x10
    2d5e:	01 97       	sbiw	r24, 0x01	; 1
    2d60:	98 8b       	std	Y+16, r25	; 0x10
    2d62:	8f 87       	std	Y+15, r24	; 0x0f
    2d64:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d66:	98 89       	ldd	r25, Y+16	; 0x10
    2d68:	8f 3f       	cpi	r24, 0xFF	; 255
    2d6a:	91 05       	cpc	r25, r1
    2d6c:	08 f4       	brcc	.+2      	; 0x2d70 <test_dutycycle_for_timer1+0x134>
    2d6e:	77 cf       	rjmp	.-274    	; 0x2c5e <test_dutycycle_for_timer1+0x22>
    2d70:	71 cf       	rjmp	.-286    	; 0x2c54 <test_dutycycle_for_timer1+0x18>

00002d72 <test_led>:

}


void test_led()
{
    2d72:	df 93       	push	r29
    2d74:	cf 93       	push	r28
    2d76:	cd b7       	in	r28, 0x3d	; 61
    2d78:	de b7       	in	r29, 0x3e	; 62
    2d7a:	2e 97       	sbiw	r28, 0x0e	; 14
    2d7c:	0f b6       	in	r0, 0x3f	; 63
    2d7e:	f8 94       	cli
    2d80:	de bf       	out	0x3e, r29	; 62
    2d82:	0f be       	out	0x3f, r0	; 63
    2d84:	cd bf       	out	0x3d, r28	; 61
	 LED_voidInit(PORT_B, Pin_3);
    2d86:	81 e0       	ldi	r24, 0x01	; 1
    2d88:	63 e0       	ldi	r22, 0x03	; 3
    2d8a:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <LED_voidInit>

	    while (1)
	    {
	        // Toggle the LED without using PWM
	        LED_voidToggle(PORT_B, Pin_3);
    2d8e:	81 e0       	ldi	r24, 0x01	; 1
    2d90:	63 e0       	ldi	r22, 0x03	; 3
    2d92:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <LED_voidToggle>
    2d96:	80 e0       	ldi	r24, 0x00	; 0
    2d98:	90 e0       	ldi	r25, 0x00	; 0
    2d9a:	aa ef       	ldi	r26, 0xFA	; 250
    2d9c:	b3 e4       	ldi	r27, 0x43	; 67
    2d9e:	8b 87       	std	Y+11, r24	; 0x0b
    2da0:	9c 87       	std	Y+12, r25	; 0x0c
    2da2:	ad 87       	std	Y+13, r26	; 0x0d
    2da4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2da6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2da8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2daa:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dac:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dae:	20 e0       	ldi	r18, 0x00	; 0
    2db0:	30 e8       	ldi	r19, 0x80	; 128
    2db2:	4b e3       	ldi	r20, 0x3B	; 59
    2db4:	55 e4       	ldi	r21, 0x45	; 69
    2db6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dba:	dc 01       	movw	r26, r24
    2dbc:	cb 01       	movw	r24, r22
    2dbe:	8f 83       	std	Y+7, r24	; 0x07
    2dc0:	98 87       	std	Y+8, r25	; 0x08
    2dc2:	a9 87       	std	Y+9, r26	; 0x09
    2dc4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2dc6:	6f 81       	ldd	r22, Y+7	; 0x07
    2dc8:	78 85       	ldd	r23, Y+8	; 0x08
    2dca:	89 85       	ldd	r24, Y+9	; 0x09
    2dcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dce:	20 e0       	ldi	r18, 0x00	; 0
    2dd0:	30 e0       	ldi	r19, 0x00	; 0
    2dd2:	40 e8       	ldi	r20, 0x80	; 128
    2dd4:	5f e3       	ldi	r21, 0x3F	; 63
    2dd6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dda:	88 23       	and	r24, r24
    2ddc:	2c f4       	brge	.+10     	; 0x2de8 <test_led+0x76>
		__ticks = 1;
    2dde:	81 e0       	ldi	r24, 0x01	; 1
    2de0:	90 e0       	ldi	r25, 0x00	; 0
    2de2:	9e 83       	std	Y+6, r25	; 0x06
    2de4:	8d 83       	std	Y+5, r24	; 0x05
    2de6:	3f c0       	rjmp	.+126    	; 0x2e66 <test_led+0xf4>
	else if (__tmp > 65535)
    2de8:	6f 81       	ldd	r22, Y+7	; 0x07
    2dea:	78 85       	ldd	r23, Y+8	; 0x08
    2dec:	89 85       	ldd	r24, Y+9	; 0x09
    2dee:	9a 85       	ldd	r25, Y+10	; 0x0a
    2df0:	20 e0       	ldi	r18, 0x00	; 0
    2df2:	3f ef       	ldi	r19, 0xFF	; 255
    2df4:	4f e7       	ldi	r20, 0x7F	; 127
    2df6:	57 e4       	ldi	r21, 0x47	; 71
    2df8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2dfc:	18 16       	cp	r1, r24
    2dfe:	4c f5       	brge	.+82     	; 0x2e52 <test_led+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e00:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e02:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e04:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e06:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e08:	20 e0       	ldi	r18, 0x00	; 0
    2e0a:	30 e0       	ldi	r19, 0x00	; 0
    2e0c:	40 e2       	ldi	r20, 0x20	; 32
    2e0e:	51 e4       	ldi	r21, 0x41	; 65
    2e10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e14:	dc 01       	movw	r26, r24
    2e16:	cb 01       	movw	r24, r22
    2e18:	bc 01       	movw	r22, r24
    2e1a:	cd 01       	movw	r24, r26
    2e1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e20:	dc 01       	movw	r26, r24
    2e22:	cb 01       	movw	r24, r22
    2e24:	9e 83       	std	Y+6, r25	; 0x06
    2e26:	8d 83       	std	Y+5, r24	; 0x05
    2e28:	0f c0       	rjmp	.+30     	; 0x2e48 <test_led+0xd6>
    2e2a:	8c e2       	ldi	r24, 0x2C	; 44
    2e2c:	91 e0       	ldi	r25, 0x01	; 1
    2e2e:	9c 83       	std	Y+4, r25	; 0x04
    2e30:	8b 83       	std	Y+3, r24	; 0x03
    2e32:	8b 81       	ldd	r24, Y+3	; 0x03
    2e34:	9c 81       	ldd	r25, Y+4	; 0x04
    2e36:	01 97       	sbiw	r24, 0x01	; 1
    2e38:	f1 f7       	brne	.-4      	; 0x2e36 <test_led+0xc4>
    2e3a:	9c 83       	std	Y+4, r25	; 0x04
    2e3c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e3e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e40:	9e 81       	ldd	r25, Y+6	; 0x06
    2e42:	01 97       	sbiw	r24, 0x01	; 1
    2e44:	9e 83       	std	Y+6, r25	; 0x06
    2e46:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e48:	8d 81       	ldd	r24, Y+5	; 0x05
    2e4a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e4c:	00 97       	sbiw	r24, 0x00	; 0
    2e4e:	69 f7       	brne	.-38     	; 0x2e2a <test_led+0xb8>
    2e50:	9e cf       	rjmp	.-196    	; 0x2d8e <test_led+0x1c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e52:	6f 81       	ldd	r22, Y+7	; 0x07
    2e54:	78 85       	ldd	r23, Y+8	; 0x08
    2e56:	89 85       	ldd	r24, Y+9	; 0x09
    2e58:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e5e:	dc 01       	movw	r26, r24
    2e60:	cb 01       	movw	r24, r22
    2e62:	9e 83       	std	Y+6, r25	; 0x06
    2e64:	8d 83       	std	Y+5, r24	; 0x05
    2e66:	8d 81       	ldd	r24, Y+5	; 0x05
    2e68:	9e 81       	ldd	r25, Y+6	; 0x06
    2e6a:	9a 83       	std	Y+2, r25	; 0x02
    2e6c:	89 83       	std	Y+1, r24	; 0x01
    2e6e:	89 81       	ldd	r24, Y+1	; 0x01
    2e70:	9a 81       	ldd	r25, Y+2	; 0x02
    2e72:	01 97       	sbiw	r24, 0x01	; 1
    2e74:	f1 f7       	brne	.-4      	; 0x2e72 <test_led+0x100>
    2e76:	9a 83       	std	Y+2, r25	; 0x02
    2e78:	89 83       	std	Y+1, r24	; 0x01
    2e7a:	89 cf       	rjmp	.-238    	; 0x2d8e <test_led+0x1c>

00002e7c <MOTOR_TESTvoidSINGLE>:
#include "MOTOR_TEST.h"
#include "avr/delay.h"


void MOTOR_TESTvoidSINGLE ()
{
    2e7c:	df 93       	push	r29
    2e7e:	cf 93       	push	r28
    2e80:	cd b7       	in	r28, 0x3d	; 61
    2e82:	de b7       	in	r29, 0x3e	; 62
	// pwm is not work even if jsut i get on it high

	TIMER0_voidInit();
    2e84:	0e 94 ee 06 	call	0xddc	; 0xddc <TIMER0_voidInit>

	test_motor1._PIN1=PIN_0;
    2e88:	10 92 a0 00 	sts	0x00A0, r1
	test_motor1._PIN2=PIN_1;
    2e8c:	81 e0       	ldi	r24, 0x01	; 1
    2e8e:	80 93 a1 00 	sts	0x00A1, r24
	test_motor1._PORT=PORT_B;
    2e92:	81 e0       	ldi	r24, 0x01	; 1
    2e94:	80 93 a2 00 	sts	0x00A2, r24
	test_motor1._PWMPIN=PIN_3;
    2e98:	83 e0       	ldi	r24, 0x03	; 3
    2e9a:	80 93 a3 00 	sts	0x00A3, r24

	MOTOR_voidInit(test_motor1);
    2e9e:	80 91 a0 00 	lds	r24, 0x00A0
    2ea2:	90 91 a1 00 	lds	r25, 0x00A1
    2ea6:	a0 91 a2 00 	lds	r26, 0x00A2
    2eaa:	b0 91 a3 00 	lds	r27, 0x00A3
    2eae:	bc 01       	movw	r22, r24
    2eb0:	cd 01       	movw	r24, r26
    2eb2:	0e 94 4c 0c 	call	0x1898	; 0x1898 <MOTOR_voidInit>
	MOTOR_voidInit(test_motor2);
    2eb6:	80 91 9c 00 	lds	r24, 0x009C
    2eba:	90 91 9d 00 	lds	r25, 0x009D
    2ebe:	a0 91 9e 00 	lds	r26, 0x009E
    2ec2:	b0 91 9f 00 	lds	r27, 0x009F
    2ec6:	bc 01       	movw	r22, r24
    2ec8:	cd 01       	movw	r24, r26
    2eca:	0e 94 4c 0c 	call	0x1898	; 0x1898 <MOTOR_voidInit>


	while(1)
	{
			//MOTOR_voidSetSpeed(test_motor1,200);
		DIO_voidSetPinValue(test_motor1._PORT,test_motor1._PWMPIN,HIGH);
    2ece:	80 91 a2 00 	lds	r24, 0x00A2
    2ed2:	90 91 a3 00 	lds	r25, 0x00A3
    2ed6:	69 2f       	mov	r22, r25
    2ed8:	40 e0       	ldi	r20, 0x00	; 0
    2eda:	0e 94 e5 08 	call	0x11ca	; 0x11ca <DIO_voidSetPinValue>

			MOTOR_voidForward(test_motor1);
    2ede:	80 91 a0 00 	lds	r24, 0x00A0
    2ee2:	90 91 a1 00 	lds	r25, 0x00A1
    2ee6:	a0 91 a2 00 	lds	r26, 0x00A2
    2eea:	b0 91 a3 00 	lds	r27, 0x00A3
    2eee:	bc 01       	movw	r22, r24
    2ef0:	cd 01       	movw	r24, r26
    2ef2:	0e 94 6f 0c 	call	0x18de	; 0x18de <MOTOR_voidForward>
    2ef6:	eb cf       	rjmp	.-42     	; 0x2ece <MOTOR_TESTvoidSINGLE+0x52>

00002ef8 <MINE_ROBOTvoidFullApp>:
#include "../../Services/STD_LIB.h"



void MINE_ROBOTvoidFullApp()
{
    2ef8:	df 93       	push	r29
    2efa:	cf 93       	push	r28
    2efc:	cd b7       	in	r28, 0x3d	; 61
    2efe:	de b7       	in	r29, 0x3e	; 62
	// first init the sensors and actuators  (ultrasonic , mine detector)
	MINE_ROBOTvoidSensorsInit();
    2f00:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <MINE_ROBOTvoidSensorsInit>
	MINE_ROBOTvoidActuatorsInit();
    2f04:	0e 94 8c 17 	call	0x2f18	; 0x2f18 <MINE_ROBOTvoidActuatorsInit>
    2f08:	ff cf       	rjmp	.-2      	; 0x2f08 <MINE_ROBOTvoidFullApp+0x10>

00002f0a <MINE_ROBOTvoidSensorsInit>:
	}

}


void MINE_ROBOTvoidSensorsInit(){
    2f0a:	df 93       	push	r29
    2f0c:	cf 93       	push	r28
    2f0e:	cd b7       	in	r28, 0x3d	; 61
    2f10:	de b7       	in	r29, 0x3e	; 62

	// init the ultrasonic

	// init the minedetector

}
    2f12:	cf 91       	pop	r28
    2f14:	df 91       	pop	r29
    2f16:	08 95       	ret

00002f18 <MINE_ROBOTvoidActuatorsInit>:

void MINE_ROBOTvoidActuatorsInit(){
    2f18:	df 93       	push	r29
    2f1a:	cf 93       	push	r28
    2f1c:	cd b7       	in	r28, 0x3d	; 61
    2f1e:	de b7       	in	r29, 0x3e	; 62

	// init the motors
	MOTOR_voidInit(motor1);
    2f20:	80 91 68 00 	lds	r24, 0x0068
    2f24:	90 91 69 00 	lds	r25, 0x0069
    2f28:	a0 91 6a 00 	lds	r26, 0x006A
    2f2c:	b0 91 6b 00 	lds	r27, 0x006B
    2f30:	bc 01       	movw	r22, r24
    2f32:	cd 01       	movw	r24, r26
    2f34:	0e 94 4c 0c 	call	0x1898	; 0x1898 <MOTOR_voidInit>
	MOTOR_voidInit(motor2);
    2f38:	80 91 6c 00 	lds	r24, 0x006C
    2f3c:	90 91 6d 00 	lds	r25, 0x006D
    2f40:	a0 91 6e 00 	lds	r26, 0x006E
    2f44:	b0 91 6f 00 	lds	r27, 0x006F
    2f48:	bc 01       	movw	r22, r24
    2f4a:	cd 01       	movw	r24, r26
    2f4c:	0e 94 4c 0c 	call	0x1898	; 0x1898 <MOTOR_voidInit>

}
    2f50:	cf 91       	pop	r28
    2f52:	df 91       	pop	r29
    2f54:	08 95       	ret

00002f56 <MINE_ROBTOvoidReadUltrasonic>:

u16 MINE_ROBTOvoidReadUltrasonic()
{
    2f56:	df 93       	push	r29
    2f58:	cf 93       	push	r28
    2f5a:	00 d0       	rcall	.+0      	; 0x2f5c <MINE_ROBTOvoidReadUltrasonic+0x6>
    2f5c:	cd b7       	in	r28, 0x3d	; 61
    2f5e:	de b7       	in	r29, 0x3e	; 62

}
    2f60:	0f 90       	pop	r0
    2f62:	0f 90       	pop	r0
    2f64:	cf 91       	pop	r28
    2f66:	df 91       	pop	r29
    2f68:	08 95       	ret

00002f6a <_09_UART_APP>:

#include "09_APP_USART.h"
#include "../../MCAL/USART/USART_Interface.h"
#include "../../HAL/LCD/LCD_Interface.h"
void _09_UART_APP(void)
{
    2f6a:	df 93       	push	r29
    2f6c:	cf 93       	push	r28
    2f6e:	0f 92       	push	r0
    2f70:	cd b7       	in	r28, 0x3d	; 61
    2f72:	de b7       	in	r29, 0x3e	; 62
	USART_voidInit();
    2f74:	0e 94 4f 06 	call	0xc9e	; 0xc9e <USART_voidInit>

	LCD_voidSWInit();
    2f78:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <LCD_voidSWInit>
	LCD_voidHWInit();
    2f7c:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <LCD_voidHWInit>

	while (1)
	{
		u8 DATA = USART_u8RreceiveData();
    2f80:	0e 94 c3 06 	call	0xd86	; 0xd86 <USART_u8RreceiveData>
    2f84:	89 83       	std	Y+1, r24	; 0x01
		LCD_voidSendData(0X80);
    2f86:	80 e8       	ldi	r24, 0x80	; 128
    2f88:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <LCD_voidSendData>
		LCD_voidSendNumber(DATA);
    2f8c:	89 81       	ldd	r24, Y+1	; 0x01
    2f8e:	88 2f       	mov	r24, r24
    2f90:	90 e0       	ldi	r25, 0x00	; 0
    2f92:	0e 94 1f 11 	call	0x223e	; 0x223e <LCD_voidSendNumber>
    2f96:	f4 cf       	rjmp	.-24     	; 0x2f80 <_09_UART_APP+0x16>

00002f98 <_05_EXT_APP>:
#include <avr/delay.h>
#include "../../MCAL/DIO/DIO_Interface.h"


void _05_EXT_APP(void)
{
    2f98:	df 93       	push	r29
    2f9a:	cf 93       	push	r28
    2f9c:	cd b7       	in	r28, 0x3d	; 61
    2f9e:	de b7       	in	r29, 0x3e	; 62
    2fa0:	ff cf       	rjmp	.-2      	; 0x2fa0 <_05_EXT_APP+0x8>

00002fa2 <__vector_1>:
	}
}


void __vector_1(void)
{
    2fa2:	1f 92       	push	r1
    2fa4:	0f 92       	push	r0
    2fa6:	0f b6       	in	r0, 0x3f	; 63
    2fa8:	0f 92       	push	r0
    2faa:	11 24       	eor	r1, r1
    2fac:	df 93       	push	r29
    2fae:	cf 93       	push	r28
    2fb0:	cd b7       	in	r28, 0x3d	; 61
    2fb2:	de b7       	in	r29, 0x3e	; 62

}
    2fb4:	cf 91       	pop	r28
    2fb6:	df 91       	pop	r29
    2fb8:	0f 90       	pop	r0
    2fba:	0f be       	out	0x3f, r0	; 63
    2fbc:	0f 90       	pop	r0
    2fbe:	1f 90       	pop	r1
    2fc0:	18 95       	reti

00002fc2 <__vector_2>:
 * {
 * }
 * */

void __vector_2(void)
{
    2fc2:	1f 92       	push	r1
    2fc4:	0f 92       	push	r0
    2fc6:	0f b6       	in	r0, 0x3f	; 63
    2fc8:	0f 92       	push	r0
    2fca:	11 24       	eor	r1, r1
    2fcc:	df 93       	push	r29
    2fce:	cf 93       	push	r28
    2fd0:	cd b7       	in	r28, 0x3d	; 61
    2fd2:	de b7       	in	r29, 0x3e	; 62

}
    2fd4:	cf 91       	pop	r28
    2fd6:	df 91       	pop	r29
    2fd8:	0f 90       	pop	r0
    2fda:	0f be       	out	0x3f, r0	; 63
    2fdc:	0f 90       	pop	r0
    2fde:	1f 90       	pop	r1
    2fe0:	18 95       	reti

00002fe2 <__vector_3>:
void __vector_3(void)
{
    2fe2:	1f 92       	push	r1
    2fe4:	0f 92       	push	r0
    2fe6:	0f b6       	in	r0, 0x3f	; 63
    2fe8:	0f 92       	push	r0
    2fea:	11 24       	eor	r1, r1
    2fec:	df 93       	push	r29
    2fee:	cf 93       	push	r28
    2ff0:	cd b7       	in	r28, 0x3d	; 61
    2ff2:	de b7       	in	r29, 0x3e	; 62

}
    2ff4:	cf 91       	pop	r28
    2ff6:	df 91       	pop	r29
    2ff8:	0f 90       	pop	r0
    2ffa:	0f be       	out	0x3f, r0	; 63
    2ffc:	0f 90       	pop	r0
    2ffe:	1f 90       	pop	r1
    3000:	18 95       	reti

00003002 <_04_KEYBAD_APP>:
#include <avr/delay.h>
#include "../../MCAL/DIO/DIO_Interface.h"


void _04_KEYBAD_APP(void)
{
    3002:	df 93       	push	r29
    3004:	cf 93       	push	r28
    3006:	0f 92       	push	r0
    3008:	cd b7       	in	r28, 0x3d	; 61
    300a:	de b7       	in	r29, 0x3e	; 62
	Keybad_voidInit(PORT_C);
    300c:	82 e0       	ldi	r24, 0x02	; 2
    300e:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <Keybad_voidInit>
	LCD_voidHWInit();
    3012:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <LCD_voidHWInit>
	LCD_voidSWInit();
    3016:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <LCD_voidSWInit>
	LCD_voidSendCommand(CLEAR);
    301a:	81 e0       	ldi	r24, 0x01	; 1
    301c:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <LCD_voidSendCommand>
	while(1)
	{
		u8 Keybad_Value = Keybad_u8ReturnData();
    3020:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <Keybad_u8ReturnData>
    3024:	89 83       	std	Y+1, r24	; 0x01
		LCD_voidSendCommand(0x80);
    3026:	80 e8       	ldi	r24, 0x80	; 128
    3028:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <LCD_voidSendCommand>
		LCD_voidSendData(Keybad_Value);
    302c:	89 81       	ldd	r24, Y+1	; 0x01
    302e:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <LCD_voidSendData>
    3032:	f6 cf       	rjmp	.-20     	; 0x3020 <_04_KEYBAD_APP+0x1e>

00003034 <_03_LCD_APP>:
#include <avr/delay.h>
#include "../../MCAL/DIO/DIO_Interface.h"


void _03_LCD_APP(void)
{
    3034:	df 93       	push	r29
    3036:	cf 93       	push	r28
    3038:	0f 92       	push	r0
    303a:	cd b7       	in	r28, 0x3d	; 61
    303c:	de b7       	in	r29, 0x3e	; 62
	LCD_voidHWInit();
    303e:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <LCD_voidHWInit>
	LCD_voidSWInit();
    3042:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <LCD_voidSWInit>
	LCD_voidSendCommand(CLEAR);
    3046:	81 e0       	ldi	r24, 0x01	; 1
    3048:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <LCD_voidSendCommand>
	while(1)
	{
		LCD_voidSendCommand(0x80);
    304c:	80 e8       	ldi	r24, 0x80	; 128
    304e:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <LCD_voidSendCommand>
		for(u8 Number = 0 ; Number < 10 ; Number++)
    3052:	19 82       	std	Y+1, r1	; 0x01
    3054:	0b c0       	rjmp	.+22     	; 0x306c <_03_LCD_APP+0x38>
		{
			LCD_voidSendData('Z');
    3056:	8a e5       	ldi	r24, 0x5A	; 90
    3058:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <LCD_voidSendData>
			LCD_voidSendNumber(Number);
    305c:	89 81       	ldd	r24, Y+1	; 0x01
    305e:	88 2f       	mov	r24, r24
    3060:	90 e0       	ldi	r25, 0x00	; 0
    3062:	0e 94 1f 11 	call	0x223e	; 0x223e <LCD_voidSendNumber>
	LCD_voidSWInit();
	LCD_voidSendCommand(CLEAR);
	while(1)
	{
		LCD_voidSendCommand(0x80);
		for(u8 Number = 0 ; Number < 10 ; Number++)
    3066:	89 81       	ldd	r24, Y+1	; 0x01
    3068:	8f 5f       	subi	r24, 0xFF	; 255
    306a:	89 83       	std	Y+1, r24	; 0x01
    306c:	89 81       	ldd	r24, Y+1	; 0x01
    306e:	8a 30       	cpi	r24, 0x0A	; 10
    3070:	90 f3       	brcs	.-28     	; 0x3056 <_03_LCD_APP+0x22>
    3072:	ec cf       	rjmp	.-40     	; 0x304c <_03_LCD_APP+0x18>

00003074 <_02_7SEGMENT_APP>:
#include "../../HAL/_7Segment/_7_Interface.h"
#include <avr/delay.h>
#include "../../MCAL/DIO/DIO_Interface.h"

void _02_7SEGMENT_APP(void)
{
    3074:	df 93       	push	r29
    3076:	cf 93       	push	r28
    3078:	cd b7       	in	r28, 0x3d	; 61
    307a:	de b7       	in	r29, 0x3e	; 62
    307c:	2f 97       	sbiw	r28, 0x0f	; 15
    307e:	0f b6       	in	r0, 0x3f	; 63
    3080:	f8 94       	cli
    3082:	de bf       	out	0x3e, r29	; 62
    3084:	0f be       	out	0x3f, r0	; 63
    3086:	cd bf       	out	0x3d, r28	; 61
	_7Segment_voidInit();
    3088:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <_7Segment_voidInit>
	_7Segment_Status(ON);
    308c:	80 e0       	ldi	r24, 0x00	; 0
    308e:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <_7Segment_Status>
	while(1)
	{
		for(u8 Number = 0 ; Number<10 ; Number++)
    3092:	1f 86       	std	Y+15, r1	; 0x0f
    3094:	78 c0       	rjmp	.+240    	; 0x3186 <_02_7SEGMENT_APP+0x112>
		{
			_7Segment_SpecificNumber(Number);
    3096:	8f 85       	ldd	r24, Y+15	; 0x0f
    3098:	0e 94 83 0b 	call	0x1706	; 0x1706 <_7Segment_SpecificNumber>
    309c:	80 e0       	ldi	r24, 0x00	; 0
    309e:	90 e0       	ldi	r25, 0x00	; 0
    30a0:	aa e7       	ldi	r26, 0x7A	; 122
    30a2:	b4 e4       	ldi	r27, 0x44	; 68
    30a4:	8b 87       	std	Y+11, r24	; 0x0b
    30a6:	9c 87       	std	Y+12, r25	; 0x0c
    30a8:	ad 87       	std	Y+13, r26	; 0x0d
    30aa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    30ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    30b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    30b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    30b4:	20 e0       	ldi	r18, 0x00	; 0
    30b6:	30 e8       	ldi	r19, 0x80	; 128
    30b8:	4b e3       	ldi	r20, 0x3B	; 59
    30ba:	55 e4       	ldi	r21, 0x45	; 69
    30bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30c0:	dc 01       	movw	r26, r24
    30c2:	cb 01       	movw	r24, r22
    30c4:	8f 83       	std	Y+7, r24	; 0x07
    30c6:	98 87       	std	Y+8, r25	; 0x08
    30c8:	a9 87       	std	Y+9, r26	; 0x09
    30ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30cc:	6f 81       	ldd	r22, Y+7	; 0x07
    30ce:	78 85       	ldd	r23, Y+8	; 0x08
    30d0:	89 85       	ldd	r24, Y+9	; 0x09
    30d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    30d4:	20 e0       	ldi	r18, 0x00	; 0
    30d6:	30 e0       	ldi	r19, 0x00	; 0
    30d8:	40 e8       	ldi	r20, 0x80	; 128
    30da:	5f e3       	ldi	r21, 0x3F	; 63
    30dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30e0:	88 23       	and	r24, r24
    30e2:	2c f4       	brge	.+10     	; 0x30ee <_02_7SEGMENT_APP+0x7a>
		__ticks = 1;
    30e4:	81 e0       	ldi	r24, 0x01	; 1
    30e6:	90 e0       	ldi	r25, 0x00	; 0
    30e8:	9e 83       	std	Y+6, r25	; 0x06
    30ea:	8d 83       	std	Y+5, r24	; 0x05
    30ec:	3f c0       	rjmp	.+126    	; 0x316c <_02_7SEGMENT_APP+0xf8>
	else if (__tmp > 65535)
    30ee:	6f 81       	ldd	r22, Y+7	; 0x07
    30f0:	78 85       	ldd	r23, Y+8	; 0x08
    30f2:	89 85       	ldd	r24, Y+9	; 0x09
    30f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    30f6:	20 e0       	ldi	r18, 0x00	; 0
    30f8:	3f ef       	ldi	r19, 0xFF	; 255
    30fa:	4f e7       	ldi	r20, 0x7F	; 127
    30fc:	57 e4       	ldi	r21, 0x47	; 71
    30fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3102:	18 16       	cp	r1, r24
    3104:	4c f5       	brge	.+82     	; 0x3158 <_02_7SEGMENT_APP+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3106:	6b 85       	ldd	r22, Y+11	; 0x0b
    3108:	7c 85       	ldd	r23, Y+12	; 0x0c
    310a:	8d 85       	ldd	r24, Y+13	; 0x0d
    310c:	9e 85       	ldd	r25, Y+14	; 0x0e
    310e:	20 e0       	ldi	r18, 0x00	; 0
    3110:	30 e0       	ldi	r19, 0x00	; 0
    3112:	40 e2       	ldi	r20, 0x20	; 32
    3114:	51 e4       	ldi	r21, 0x41	; 65
    3116:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    311a:	dc 01       	movw	r26, r24
    311c:	cb 01       	movw	r24, r22
    311e:	bc 01       	movw	r22, r24
    3120:	cd 01       	movw	r24, r26
    3122:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3126:	dc 01       	movw	r26, r24
    3128:	cb 01       	movw	r24, r22
    312a:	9e 83       	std	Y+6, r25	; 0x06
    312c:	8d 83       	std	Y+5, r24	; 0x05
    312e:	0f c0       	rjmp	.+30     	; 0x314e <_02_7SEGMENT_APP+0xda>
    3130:	8c e2       	ldi	r24, 0x2C	; 44
    3132:	91 e0       	ldi	r25, 0x01	; 1
    3134:	9c 83       	std	Y+4, r25	; 0x04
    3136:	8b 83       	std	Y+3, r24	; 0x03
    3138:	8b 81       	ldd	r24, Y+3	; 0x03
    313a:	9c 81       	ldd	r25, Y+4	; 0x04
    313c:	01 97       	sbiw	r24, 0x01	; 1
    313e:	f1 f7       	brne	.-4      	; 0x313c <_02_7SEGMENT_APP+0xc8>
    3140:	9c 83       	std	Y+4, r25	; 0x04
    3142:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3144:	8d 81       	ldd	r24, Y+5	; 0x05
    3146:	9e 81       	ldd	r25, Y+6	; 0x06
    3148:	01 97       	sbiw	r24, 0x01	; 1
    314a:	9e 83       	std	Y+6, r25	; 0x06
    314c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    314e:	8d 81       	ldd	r24, Y+5	; 0x05
    3150:	9e 81       	ldd	r25, Y+6	; 0x06
    3152:	00 97       	sbiw	r24, 0x00	; 0
    3154:	69 f7       	brne	.-38     	; 0x3130 <_02_7SEGMENT_APP+0xbc>
    3156:	14 c0       	rjmp	.+40     	; 0x3180 <_02_7SEGMENT_APP+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3158:	6f 81       	ldd	r22, Y+7	; 0x07
    315a:	78 85       	ldd	r23, Y+8	; 0x08
    315c:	89 85       	ldd	r24, Y+9	; 0x09
    315e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3160:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3164:	dc 01       	movw	r26, r24
    3166:	cb 01       	movw	r24, r22
    3168:	9e 83       	std	Y+6, r25	; 0x06
    316a:	8d 83       	std	Y+5, r24	; 0x05
    316c:	8d 81       	ldd	r24, Y+5	; 0x05
    316e:	9e 81       	ldd	r25, Y+6	; 0x06
    3170:	9a 83       	std	Y+2, r25	; 0x02
    3172:	89 83       	std	Y+1, r24	; 0x01
    3174:	89 81       	ldd	r24, Y+1	; 0x01
    3176:	9a 81       	ldd	r25, Y+2	; 0x02
    3178:	01 97       	sbiw	r24, 0x01	; 1
    317a:	f1 f7       	brne	.-4      	; 0x3178 <_02_7SEGMENT_APP+0x104>
    317c:	9a 83       	std	Y+2, r25	; 0x02
    317e:	89 83       	std	Y+1, r24	; 0x01
{
	_7Segment_voidInit();
	_7Segment_Status(ON);
	while(1)
	{
		for(u8 Number = 0 ; Number<10 ; Number++)
    3180:	8f 85       	ldd	r24, Y+15	; 0x0f
    3182:	8f 5f       	subi	r24, 0xFF	; 255
    3184:	8f 87       	std	Y+15, r24	; 0x0f
    3186:	8f 85       	ldd	r24, Y+15	; 0x0f
    3188:	8a 30       	cpi	r24, 0x0A	; 10
    318a:	08 f4       	brcc	.+2      	; 0x318e <_02_7SEGMENT_APP+0x11a>
    318c:	84 cf       	rjmp	.-248    	; 0x3096 <_02_7SEGMENT_APP+0x22>
    318e:	81 cf       	rjmp	.-254    	; 0x3092 <_02_7SEGMENT_APP+0x1e>

00003190 <_01_BUTTON_APP>:

#include "../../HAL/LED/LED_Interface.h"
#include "../../MCAL/DIO/DIO_Interface.h"

void _01_BUTTON_APP(void)
{
    3190:	df 93       	push	r29
    3192:	cf 93       	push	r28
    3194:	0f 92       	push	r0
    3196:	cd b7       	in	r28, 0x3d	; 61
    3198:	de b7       	in	r29, 0x3e	; 62
    Button_voidInit(PORT_B,Pin_0);
    319a:	81 e0       	ldi	r24, 0x01	; 1
    319c:	60 e0       	ldi	r22, 0x00	; 0
    319e:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <Button_voidInit>
    LED_voidInit(PORT_A,Pin_0);
    31a2:	80 e0       	ldi	r24, 0x00	; 0
    31a4:	60 e0       	ldi	r22, 0x00	; 0
    31a6:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <LED_voidInit>
	while(1)
	{
		u8 Button_Value = Button_voidPullUp(PORT_B,Pin_0);
    31aa:	81 e0       	ldi	r24, 0x01	; 1
    31ac:	60 e0       	ldi	r22, 0x00	; 0
    31ae:	0e 94 00 13 	call	0x2600	; 0x2600 <Button_voidPullUp>
    31b2:	89 83       	std	Y+1, r24	; 0x01
		if(Button_Value == BUTTON_OPEN) // 1
    31b4:	89 81       	ldd	r24, Y+1	; 0x01
    31b6:	81 30       	cpi	r24, 0x01	; 1
    31b8:	29 f4       	brne	.+10     	; 0x31c4 <_01_BUTTON_APP+0x34>
		{
			LED_voidOff(PORT_A,Pin_0);
    31ba:	80 e0       	ldi	r24, 0x00	; 0
    31bc:	60 e0       	ldi	r22, 0x00	; 0
    31be:	0e 94 75 0d 	call	0x1aea	; 0x1aea <LED_voidOff>
    31c2:	f3 cf       	rjmp	.-26     	; 0x31aa <_01_BUTTON_APP+0x1a>
		}
		else if(Button_Value == BUTTON_CLOSE) //0
    31c4:	89 81       	ldd	r24, Y+1	; 0x01
    31c6:	88 23       	and	r24, r24
    31c8:	81 f7       	brne	.-32     	; 0x31aa <_01_BUTTON_APP+0x1a>
		{
			LED_voidOn(PORT_A,Pin_0);
    31ca:	80 e0       	ldi	r24, 0x00	; 0
    31cc:	60 e0       	ldi	r22, 0x00	; 0
    31ce:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <LED_voidOn>
    31d2:	eb cf       	rjmp	.-42     	; 0x31aa <_01_BUTTON_APP+0x1a>

000031d4 <_02_BUTTON_APP>:
		}
	}
}

void _02_BUTTON_APP(void) // buttons for three diffreent leds(homework)
{
    31d4:	df 93       	push	r29
    31d6:	cf 93       	push	r28
    31d8:	0f 92       	push	r0
    31da:	cd b7       	in	r28, 0x3d	; 61
    31dc:	de b7       	in	r29, 0x3e	; 62
	Button_voidInit(PORT_B,Pin_0);
    31de:	81 e0       	ldi	r24, 0x01	; 1
    31e0:	60 e0       	ldi	r22, 0x00	; 0
    31e2:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <Button_voidInit>
	LED_voidInit(PORT_A,Pin_0);
    31e6:	80 e0       	ldi	r24, 0x00	; 0
    31e8:	60 e0       	ldi	r22, 0x00	; 0
    31ea:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <LED_voidInit>

	Button_voidInit(PORT_B,Pin_0);
    31ee:	81 e0       	ldi	r24, 0x01	; 1
    31f0:	60 e0       	ldi	r22, 0x00	; 0
    31f2:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <Button_voidInit>
	LED_voidInit(PORT_A,Pin_0);
    31f6:	80 e0       	ldi	r24, 0x00	; 0
    31f8:	60 e0       	ldi	r22, 0x00	; 0
    31fa:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <LED_voidInit>

	Button_voidInit(PORT_B,Pin_0);
    31fe:	81 e0       	ldi	r24, 0x01	; 1
    3200:	60 e0       	ldi	r22, 0x00	; 0
    3202:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <Button_voidInit>
	LED_voidInit(PORT_A,Pin_0);
    3206:	80 e0       	ldi	r24, 0x00	; 0
    3208:	60 e0       	ldi	r22, 0x00	; 0
    320a:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <LED_voidInit>
		while(1)
		{
			u8 Button_Value = Button_voidPullUp(PORT_B,Pin_0);
    320e:	81 e0       	ldi	r24, 0x01	; 1
    3210:	60 e0       	ldi	r22, 0x00	; 0
    3212:	0e 94 00 13 	call	0x2600	; 0x2600 <Button_voidPullUp>
    3216:	89 83       	std	Y+1, r24	; 0x01
			if(Button_Value == BUTTON_OPEN) // 1
    3218:	89 81       	ldd	r24, Y+1	; 0x01
    321a:	81 30       	cpi	r24, 0x01	; 1
    321c:	29 f4       	brne	.+10     	; 0x3228 <_02_BUTTON_APP+0x54>
			{
				LED_voidOff(PORT_A,Pin_0);
    321e:	80 e0       	ldi	r24, 0x00	; 0
    3220:	60 e0       	ldi	r22, 0x00	; 0
    3222:	0e 94 75 0d 	call	0x1aea	; 0x1aea <LED_voidOff>
    3226:	f3 cf       	rjmp	.-26     	; 0x320e <_02_BUTTON_APP+0x3a>
			}
			else if(Button_Value == BUTTON_CLOSE) //0
    3228:	89 81       	ldd	r24, Y+1	; 0x01
    322a:	88 23       	and	r24, r24
    322c:	81 f7       	brne	.-32     	; 0x320e <_02_BUTTON_APP+0x3a>
			{
				LED_voidOn(PORT_A,Pin_0);
    322e:	80 e0       	ldi	r24, 0x00	; 0
    3230:	60 e0       	ldi	r22, 0x00	; 0
    3232:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <LED_voidOn>
    3236:	eb cf       	rjmp	.-42     	; 0x320e <_02_BUTTON_APP+0x3a>

00003238 <_00_LED_APP1>:

#include "../../HAL/LED/LED_Interface.h"
#include "../../MCAL/DIO/DIO_Interface.h"

void _00_LED_APP1(void)
{
    3238:	df 93       	push	r29
    323a:	cf 93       	push	r28
    323c:	cd b7       	in	r28, 0x3d	; 61
    323e:	de b7       	in	r29, 0x3e	; 62
    3240:	6c 97       	sbiw	r28, 0x1c	; 28
    3242:	0f b6       	in	r0, 0x3f	; 63
    3244:	f8 94       	cli
    3246:	de bf       	out	0x3e, r29	; 62
    3248:	0f be       	out	0x3f, r0	; 63
    324a:	cd bf       	out	0x3d, r28	; 61
	LED_voidInit(PORT_A,Pin_0);
    324c:	80 e0       	ldi	r24, 0x00	; 0
    324e:	60 e0       	ldi	r22, 0x00	; 0
    3250:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <LED_voidInit>
	while(1)
	{
		LED_voidOn(PORT_A,Pin_0);
    3254:	80 e0       	ldi	r24, 0x00	; 0
    3256:	60 e0       	ldi	r22, 0x00	; 0
    3258:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <LED_voidOn>
    325c:	80 e0       	ldi	r24, 0x00	; 0
    325e:	90 e0       	ldi	r25, 0x00	; 0
    3260:	aa e7       	ldi	r26, 0x7A	; 122
    3262:	b4 e4       	ldi	r27, 0x44	; 68
    3264:	89 8f       	std	Y+25, r24	; 0x19
    3266:	9a 8f       	std	Y+26, r25	; 0x1a
    3268:	ab 8f       	std	Y+27, r26	; 0x1b
    326a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    326c:	69 8d       	ldd	r22, Y+25	; 0x19
    326e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3270:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3272:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3274:	20 e0       	ldi	r18, 0x00	; 0
    3276:	30 e8       	ldi	r19, 0x80	; 128
    3278:	4b e3       	ldi	r20, 0x3B	; 59
    327a:	55 e4       	ldi	r21, 0x45	; 69
    327c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3280:	dc 01       	movw	r26, r24
    3282:	cb 01       	movw	r24, r22
    3284:	8d 8b       	std	Y+21, r24	; 0x15
    3286:	9e 8b       	std	Y+22, r25	; 0x16
    3288:	af 8b       	std	Y+23, r26	; 0x17
    328a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    328c:	6d 89       	ldd	r22, Y+21	; 0x15
    328e:	7e 89       	ldd	r23, Y+22	; 0x16
    3290:	8f 89       	ldd	r24, Y+23	; 0x17
    3292:	98 8d       	ldd	r25, Y+24	; 0x18
    3294:	20 e0       	ldi	r18, 0x00	; 0
    3296:	30 e0       	ldi	r19, 0x00	; 0
    3298:	40 e8       	ldi	r20, 0x80	; 128
    329a:	5f e3       	ldi	r21, 0x3F	; 63
    329c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32a0:	88 23       	and	r24, r24
    32a2:	2c f4       	brge	.+10     	; 0x32ae <_00_LED_APP1+0x76>
		__ticks = 1;
    32a4:	81 e0       	ldi	r24, 0x01	; 1
    32a6:	90 e0       	ldi	r25, 0x00	; 0
    32a8:	9c 8b       	std	Y+20, r25	; 0x14
    32aa:	8b 8b       	std	Y+19, r24	; 0x13
    32ac:	3f c0       	rjmp	.+126    	; 0x332c <_00_LED_APP1+0xf4>
	else if (__tmp > 65535)
    32ae:	6d 89       	ldd	r22, Y+21	; 0x15
    32b0:	7e 89       	ldd	r23, Y+22	; 0x16
    32b2:	8f 89       	ldd	r24, Y+23	; 0x17
    32b4:	98 8d       	ldd	r25, Y+24	; 0x18
    32b6:	20 e0       	ldi	r18, 0x00	; 0
    32b8:	3f ef       	ldi	r19, 0xFF	; 255
    32ba:	4f e7       	ldi	r20, 0x7F	; 127
    32bc:	57 e4       	ldi	r21, 0x47	; 71
    32be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32c2:	18 16       	cp	r1, r24
    32c4:	4c f5       	brge	.+82     	; 0x3318 <_00_LED_APP1+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32c6:	69 8d       	ldd	r22, Y+25	; 0x19
    32c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32ce:	20 e0       	ldi	r18, 0x00	; 0
    32d0:	30 e0       	ldi	r19, 0x00	; 0
    32d2:	40 e2       	ldi	r20, 0x20	; 32
    32d4:	51 e4       	ldi	r21, 0x41	; 65
    32d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32da:	dc 01       	movw	r26, r24
    32dc:	cb 01       	movw	r24, r22
    32de:	bc 01       	movw	r22, r24
    32e0:	cd 01       	movw	r24, r26
    32e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32e6:	dc 01       	movw	r26, r24
    32e8:	cb 01       	movw	r24, r22
    32ea:	9c 8b       	std	Y+20, r25	; 0x14
    32ec:	8b 8b       	std	Y+19, r24	; 0x13
    32ee:	0f c0       	rjmp	.+30     	; 0x330e <_00_LED_APP1+0xd6>
    32f0:	8c e2       	ldi	r24, 0x2C	; 44
    32f2:	91 e0       	ldi	r25, 0x01	; 1
    32f4:	9a 8b       	std	Y+18, r25	; 0x12
    32f6:	89 8b       	std	Y+17, r24	; 0x11
    32f8:	89 89       	ldd	r24, Y+17	; 0x11
    32fa:	9a 89       	ldd	r25, Y+18	; 0x12
    32fc:	01 97       	sbiw	r24, 0x01	; 1
    32fe:	f1 f7       	brne	.-4      	; 0x32fc <_00_LED_APP1+0xc4>
    3300:	9a 8b       	std	Y+18, r25	; 0x12
    3302:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3304:	8b 89       	ldd	r24, Y+19	; 0x13
    3306:	9c 89       	ldd	r25, Y+20	; 0x14
    3308:	01 97       	sbiw	r24, 0x01	; 1
    330a:	9c 8b       	std	Y+20, r25	; 0x14
    330c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    330e:	8b 89       	ldd	r24, Y+19	; 0x13
    3310:	9c 89       	ldd	r25, Y+20	; 0x14
    3312:	00 97       	sbiw	r24, 0x00	; 0
    3314:	69 f7       	brne	.-38     	; 0x32f0 <_00_LED_APP1+0xb8>
    3316:	14 c0       	rjmp	.+40     	; 0x3340 <_00_LED_APP1+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3318:	6d 89       	ldd	r22, Y+21	; 0x15
    331a:	7e 89       	ldd	r23, Y+22	; 0x16
    331c:	8f 89       	ldd	r24, Y+23	; 0x17
    331e:	98 8d       	ldd	r25, Y+24	; 0x18
    3320:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3324:	dc 01       	movw	r26, r24
    3326:	cb 01       	movw	r24, r22
    3328:	9c 8b       	std	Y+20, r25	; 0x14
    332a:	8b 8b       	std	Y+19, r24	; 0x13
    332c:	8b 89       	ldd	r24, Y+19	; 0x13
    332e:	9c 89       	ldd	r25, Y+20	; 0x14
    3330:	98 8b       	std	Y+16, r25	; 0x10
    3332:	8f 87       	std	Y+15, r24	; 0x0f
    3334:	8f 85       	ldd	r24, Y+15	; 0x0f
    3336:	98 89       	ldd	r25, Y+16	; 0x10
    3338:	01 97       	sbiw	r24, 0x01	; 1
    333a:	f1 f7       	brne	.-4      	; 0x3338 <_00_LED_APP1+0x100>
    333c:	98 8b       	std	Y+16, r25	; 0x10
    333e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		LED_voidOff(PORT_A,Pin_0);
    3340:	80 e0       	ldi	r24, 0x00	; 0
    3342:	60 e0       	ldi	r22, 0x00	; 0
    3344:	0e 94 75 0d 	call	0x1aea	; 0x1aea <LED_voidOff>
    3348:	80 e0       	ldi	r24, 0x00	; 0
    334a:	90 e0       	ldi	r25, 0x00	; 0
    334c:	aa e7       	ldi	r26, 0x7A	; 122
    334e:	b4 e4       	ldi	r27, 0x44	; 68
    3350:	8b 87       	std	Y+11, r24	; 0x0b
    3352:	9c 87       	std	Y+12, r25	; 0x0c
    3354:	ad 87       	std	Y+13, r26	; 0x0d
    3356:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3358:	6b 85       	ldd	r22, Y+11	; 0x0b
    335a:	7c 85       	ldd	r23, Y+12	; 0x0c
    335c:	8d 85       	ldd	r24, Y+13	; 0x0d
    335e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3360:	20 e0       	ldi	r18, 0x00	; 0
    3362:	30 e8       	ldi	r19, 0x80	; 128
    3364:	4b e3       	ldi	r20, 0x3B	; 59
    3366:	55 e4       	ldi	r21, 0x45	; 69
    3368:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    336c:	dc 01       	movw	r26, r24
    336e:	cb 01       	movw	r24, r22
    3370:	8f 83       	std	Y+7, r24	; 0x07
    3372:	98 87       	std	Y+8, r25	; 0x08
    3374:	a9 87       	std	Y+9, r26	; 0x09
    3376:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3378:	6f 81       	ldd	r22, Y+7	; 0x07
    337a:	78 85       	ldd	r23, Y+8	; 0x08
    337c:	89 85       	ldd	r24, Y+9	; 0x09
    337e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3380:	20 e0       	ldi	r18, 0x00	; 0
    3382:	30 e0       	ldi	r19, 0x00	; 0
    3384:	40 e8       	ldi	r20, 0x80	; 128
    3386:	5f e3       	ldi	r21, 0x3F	; 63
    3388:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    338c:	88 23       	and	r24, r24
    338e:	2c f4       	brge	.+10     	; 0x339a <_00_LED_APP1+0x162>
		__ticks = 1;
    3390:	81 e0       	ldi	r24, 0x01	; 1
    3392:	90 e0       	ldi	r25, 0x00	; 0
    3394:	9e 83       	std	Y+6, r25	; 0x06
    3396:	8d 83       	std	Y+5, r24	; 0x05
    3398:	3f c0       	rjmp	.+126    	; 0x3418 <_00_LED_APP1+0x1e0>
	else if (__tmp > 65535)
    339a:	6f 81       	ldd	r22, Y+7	; 0x07
    339c:	78 85       	ldd	r23, Y+8	; 0x08
    339e:	89 85       	ldd	r24, Y+9	; 0x09
    33a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    33a2:	20 e0       	ldi	r18, 0x00	; 0
    33a4:	3f ef       	ldi	r19, 0xFF	; 255
    33a6:	4f e7       	ldi	r20, 0x7F	; 127
    33a8:	57 e4       	ldi	r21, 0x47	; 71
    33aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33ae:	18 16       	cp	r1, r24
    33b0:	4c f5       	brge	.+82     	; 0x3404 <_00_LED_APP1+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    33b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    33b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    33b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    33ba:	20 e0       	ldi	r18, 0x00	; 0
    33bc:	30 e0       	ldi	r19, 0x00	; 0
    33be:	40 e2       	ldi	r20, 0x20	; 32
    33c0:	51 e4       	ldi	r21, 0x41	; 65
    33c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33c6:	dc 01       	movw	r26, r24
    33c8:	cb 01       	movw	r24, r22
    33ca:	bc 01       	movw	r22, r24
    33cc:	cd 01       	movw	r24, r26
    33ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33d2:	dc 01       	movw	r26, r24
    33d4:	cb 01       	movw	r24, r22
    33d6:	9e 83       	std	Y+6, r25	; 0x06
    33d8:	8d 83       	std	Y+5, r24	; 0x05
    33da:	0f c0       	rjmp	.+30     	; 0x33fa <_00_LED_APP1+0x1c2>
    33dc:	8c e2       	ldi	r24, 0x2C	; 44
    33de:	91 e0       	ldi	r25, 0x01	; 1
    33e0:	9c 83       	std	Y+4, r25	; 0x04
    33e2:	8b 83       	std	Y+3, r24	; 0x03
    33e4:	8b 81       	ldd	r24, Y+3	; 0x03
    33e6:	9c 81       	ldd	r25, Y+4	; 0x04
    33e8:	01 97       	sbiw	r24, 0x01	; 1
    33ea:	f1 f7       	brne	.-4      	; 0x33e8 <_00_LED_APP1+0x1b0>
    33ec:	9c 83       	std	Y+4, r25	; 0x04
    33ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33f0:	8d 81       	ldd	r24, Y+5	; 0x05
    33f2:	9e 81       	ldd	r25, Y+6	; 0x06
    33f4:	01 97       	sbiw	r24, 0x01	; 1
    33f6:	9e 83       	std	Y+6, r25	; 0x06
    33f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33fa:	8d 81       	ldd	r24, Y+5	; 0x05
    33fc:	9e 81       	ldd	r25, Y+6	; 0x06
    33fe:	00 97       	sbiw	r24, 0x00	; 0
    3400:	69 f7       	brne	.-38     	; 0x33dc <_00_LED_APP1+0x1a4>
    3402:	28 cf       	rjmp	.-432    	; 0x3254 <_00_LED_APP1+0x1c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3404:	6f 81       	ldd	r22, Y+7	; 0x07
    3406:	78 85       	ldd	r23, Y+8	; 0x08
    3408:	89 85       	ldd	r24, Y+9	; 0x09
    340a:	9a 85       	ldd	r25, Y+10	; 0x0a
    340c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3410:	dc 01       	movw	r26, r24
    3412:	cb 01       	movw	r24, r22
    3414:	9e 83       	std	Y+6, r25	; 0x06
    3416:	8d 83       	std	Y+5, r24	; 0x05
    3418:	8d 81       	ldd	r24, Y+5	; 0x05
    341a:	9e 81       	ldd	r25, Y+6	; 0x06
    341c:	9a 83       	std	Y+2, r25	; 0x02
    341e:	89 83       	std	Y+1, r24	; 0x01
    3420:	89 81       	ldd	r24, Y+1	; 0x01
    3422:	9a 81       	ldd	r25, Y+2	; 0x02
    3424:	01 97       	sbiw	r24, 0x01	; 1
    3426:	f1 f7       	brne	.-4      	; 0x3424 <_00_LED_APP1+0x1ec>
    3428:	9a 83       	std	Y+2, r25	; 0x02
    342a:	89 83       	std	Y+1, r24	; 0x01
    342c:	13 cf       	rjmp	.-474    	; 0x3254 <_00_LED_APP1+0x1c>

0000342e <_00_LED_APP2>:
	}
}


void _00_LED_APP2(void)
{
    342e:	df 93       	push	r29
    3430:	cf 93       	push	r28
    3432:	cd b7       	in	r28, 0x3d	; 61
    3434:	de b7       	in	r29, 0x3e	; 62
    3436:	6e 97       	sbiw	r28, 0x1e	; 30
    3438:	0f b6       	in	r0, 0x3f	; 63
    343a:	f8 94       	cli
    343c:	de bf       	out	0x3e, r29	; 62
    343e:	0f be       	out	0x3f, r0	; 63
    3440:	cd bf       	out	0x3d, r28	; 61
	LED_voidInit(PORT_A,Pin_0);
    3442:	80 e0       	ldi	r24, 0x00	; 0
    3444:	60 e0       	ldi	r22, 0x00	; 0
    3446:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <LED_voidInit>
	LED_voidInit(PORT_A,Pin_1);
    344a:	80 e0       	ldi	r24, 0x00	; 0
    344c:	61 e0       	ldi	r22, 0x01	; 1
    344e:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <LED_voidInit>
	LED_voidInit(PORT_A,Pin_2);
    3452:	80 e0       	ldi	r24, 0x00	; 0
    3454:	62 e0       	ldi	r22, 0x02	; 2
    3456:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <LED_voidInit>
	LED_voidInit(PORT_A,Pin_3);
    345a:	80 e0       	ldi	r24, 0x00	; 0
    345c:	63 e0       	ldi	r22, 0x03	; 3
    345e:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <LED_voidInit>
	LED_voidInit(PORT_A,Pin_4);
    3462:	80 e0       	ldi	r24, 0x00	; 0
    3464:	64 e0       	ldi	r22, 0x04	; 4
    3466:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <LED_voidInit>
	LED_voidInit(PORT_A,Pin_5);
    346a:	80 e0       	ldi	r24, 0x00	; 0
    346c:	65 e0       	ldi	r22, 0x05	; 5
    346e:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <LED_voidInit>
	LED_voidInit(PORT_A,Pin_6);
    3472:	80 e0       	ldi	r24, 0x00	; 0
    3474:	66 e0       	ldi	r22, 0x06	; 6
    3476:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <LED_voidInit>
	LED_voidInit(PORT_A,Pin_7);
    347a:	80 e0       	ldi	r24, 0x00	; 0
    347c:	67 e0       	ldi	r22, 0x07	; 7
    347e:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <LED_voidInit>
	while(1){
	for (u8 Local_u8PinNumber =0 ; Local_u8PinNumber<8 ; Local_u8PinNumber++)
    3482:	1e 8e       	std	Y+30, r1	; 0x1e
    3484:	79 c0       	rjmp	.+242    	; 0x3578 <_00_LED_APP2+0x14a>
		{
			LED_voidOn(PORT_A,Local_u8PinNumber);
    3486:	80 e0       	ldi	r24, 0x00	; 0
    3488:	6e 8d       	ldd	r22, Y+30	; 0x1e
    348a:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <LED_voidOn>
    348e:	80 e0       	ldi	r24, 0x00	; 0
    3490:	90 e0       	ldi	r25, 0x00	; 0
    3492:	aa e7       	ldi	r26, 0x7A	; 122
    3494:	b4 e4       	ldi	r27, 0x44	; 68
    3496:	89 8f       	std	Y+25, r24	; 0x19
    3498:	9a 8f       	std	Y+26, r25	; 0x1a
    349a:	ab 8f       	std	Y+27, r26	; 0x1b
    349c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    349e:	69 8d       	ldd	r22, Y+25	; 0x19
    34a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34a6:	20 e0       	ldi	r18, 0x00	; 0
    34a8:	30 e8       	ldi	r19, 0x80	; 128
    34aa:	4b e3       	ldi	r20, 0x3B	; 59
    34ac:	55 e4       	ldi	r21, 0x45	; 69
    34ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34b2:	dc 01       	movw	r26, r24
    34b4:	cb 01       	movw	r24, r22
    34b6:	8d 8b       	std	Y+21, r24	; 0x15
    34b8:	9e 8b       	std	Y+22, r25	; 0x16
    34ba:	af 8b       	std	Y+23, r26	; 0x17
    34bc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    34be:	6d 89       	ldd	r22, Y+21	; 0x15
    34c0:	7e 89       	ldd	r23, Y+22	; 0x16
    34c2:	8f 89       	ldd	r24, Y+23	; 0x17
    34c4:	98 8d       	ldd	r25, Y+24	; 0x18
    34c6:	20 e0       	ldi	r18, 0x00	; 0
    34c8:	30 e0       	ldi	r19, 0x00	; 0
    34ca:	40 e8       	ldi	r20, 0x80	; 128
    34cc:	5f e3       	ldi	r21, 0x3F	; 63
    34ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34d2:	88 23       	and	r24, r24
    34d4:	2c f4       	brge	.+10     	; 0x34e0 <_00_LED_APP2+0xb2>
		__ticks = 1;
    34d6:	81 e0       	ldi	r24, 0x01	; 1
    34d8:	90 e0       	ldi	r25, 0x00	; 0
    34da:	9c 8b       	std	Y+20, r25	; 0x14
    34dc:	8b 8b       	std	Y+19, r24	; 0x13
    34de:	3f c0       	rjmp	.+126    	; 0x355e <_00_LED_APP2+0x130>
	else if (__tmp > 65535)
    34e0:	6d 89       	ldd	r22, Y+21	; 0x15
    34e2:	7e 89       	ldd	r23, Y+22	; 0x16
    34e4:	8f 89       	ldd	r24, Y+23	; 0x17
    34e6:	98 8d       	ldd	r25, Y+24	; 0x18
    34e8:	20 e0       	ldi	r18, 0x00	; 0
    34ea:	3f ef       	ldi	r19, 0xFF	; 255
    34ec:	4f e7       	ldi	r20, 0x7F	; 127
    34ee:	57 e4       	ldi	r21, 0x47	; 71
    34f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34f4:	18 16       	cp	r1, r24
    34f6:	4c f5       	brge	.+82     	; 0x354a <_00_LED_APP2+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34f8:	69 8d       	ldd	r22, Y+25	; 0x19
    34fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3500:	20 e0       	ldi	r18, 0x00	; 0
    3502:	30 e0       	ldi	r19, 0x00	; 0
    3504:	40 e2       	ldi	r20, 0x20	; 32
    3506:	51 e4       	ldi	r21, 0x41	; 65
    3508:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    350c:	dc 01       	movw	r26, r24
    350e:	cb 01       	movw	r24, r22
    3510:	bc 01       	movw	r22, r24
    3512:	cd 01       	movw	r24, r26
    3514:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3518:	dc 01       	movw	r26, r24
    351a:	cb 01       	movw	r24, r22
    351c:	9c 8b       	std	Y+20, r25	; 0x14
    351e:	8b 8b       	std	Y+19, r24	; 0x13
    3520:	0f c0       	rjmp	.+30     	; 0x3540 <_00_LED_APP2+0x112>
    3522:	8c e2       	ldi	r24, 0x2C	; 44
    3524:	91 e0       	ldi	r25, 0x01	; 1
    3526:	9a 8b       	std	Y+18, r25	; 0x12
    3528:	89 8b       	std	Y+17, r24	; 0x11
    352a:	89 89       	ldd	r24, Y+17	; 0x11
    352c:	9a 89       	ldd	r25, Y+18	; 0x12
    352e:	01 97       	sbiw	r24, 0x01	; 1
    3530:	f1 f7       	brne	.-4      	; 0x352e <_00_LED_APP2+0x100>
    3532:	9a 8b       	std	Y+18, r25	; 0x12
    3534:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3536:	8b 89       	ldd	r24, Y+19	; 0x13
    3538:	9c 89       	ldd	r25, Y+20	; 0x14
    353a:	01 97       	sbiw	r24, 0x01	; 1
    353c:	9c 8b       	std	Y+20, r25	; 0x14
    353e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3540:	8b 89       	ldd	r24, Y+19	; 0x13
    3542:	9c 89       	ldd	r25, Y+20	; 0x14
    3544:	00 97       	sbiw	r24, 0x00	; 0
    3546:	69 f7       	brne	.-38     	; 0x3522 <_00_LED_APP2+0xf4>
    3548:	14 c0       	rjmp	.+40     	; 0x3572 <_00_LED_APP2+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    354a:	6d 89       	ldd	r22, Y+21	; 0x15
    354c:	7e 89       	ldd	r23, Y+22	; 0x16
    354e:	8f 89       	ldd	r24, Y+23	; 0x17
    3550:	98 8d       	ldd	r25, Y+24	; 0x18
    3552:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3556:	dc 01       	movw	r26, r24
    3558:	cb 01       	movw	r24, r22
    355a:	9c 8b       	std	Y+20, r25	; 0x14
    355c:	8b 8b       	std	Y+19, r24	; 0x13
    355e:	8b 89       	ldd	r24, Y+19	; 0x13
    3560:	9c 89       	ldd	r25, Y+20	; 0x14
    3562:	98 8b       	std	Y+16, r25	; 0x10
    3564:	8f 87       	std	Y+15, r24	; 0x0f
    3566:	8f 85       	ldd	r24, Y+15	; 0x0f
    3568:	98 89       	ldd	r25, Y+16	; 0x10
    356a:	01 97       	sbiw	r24, 0x01	; 1
    356c:	f1 f7       	brne	.-4      	; 0x356a <_00_LED_APP2+0x13c>
    356e:	98 8b       	std	Y+16, r25	; 0x10
    3570:	8f 87       	std	Y+15, r24	; 0x0f
	LED_voidInit(PORT_A,Pin_4);
	LED_voidInit(PORT_A,Pin_5);
	LED_voidInit(PORT_A,Pin_6);
	LED_voidInit(PORT_A,Pin_7);
	while(1){
	for (u8 Local_u8PinNumber =0 ; Local_u8PinNumber<8 ; Local_u8PinNumber++)
    3572:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3574:	8f 5f       	subi	r24, 0xFF	; 255
    3576:	8e 8f       	std	Y+30, r24	; 0x1e
    3578:	8e 8d       	ldd	r24, Y+30	; 0x1e
    357a:	88 30       	cpi	r24, 0x08	; 8
    357c:	08 f4       	brcc	.+2      	; 0x3580 <_00_LED_APP2+0x152>
    357e:	83 cf       	rjmp	.-250    	; 0x3486 <_00_LED_APP2+0x58>
		{
			LED_voidOn(PORT_A,Local_u8PinNumber);
			_delay_ms(1000);

		}
	for (u8 Local_u8PinNumber =7 ; Local_u8PinNumber>=0 ; Local_u8PinNumber--)
    3580:	87 e0       	ldi	r24, 0x07	; 7
    3582:	8d 8f       	std	Y+29, r24	; 0x1d
		{
			LED_voidOff(PORT_A,Local_u8PinNumber);
    3584:	80 e0       	ldi	r24, 0x00	; 0
    3586:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3588:	0e 94 75 0d 	call	0x1aea	; 0x1aea <LED_voidOff>
    358c:	80 e0       	ldi	r24, 0x00	; 0
    358e:	90 e0       	ldi	r25, 0x00	; 0
    3590:	aa e7       	ldi	r26, 0x7A	; 122
    3592:	b4 e4       	ldi	r27, 0x44	; 68
    3594:	8b 87       	std	Y+11, r24	; 0x0b
    3596:	9c 87       	std	Y+12, r25	; 0x0c
    3598:	ad 87       	std	Y+13, r26	; 0x0d
    359a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    359c:	6b 85       	ldd	r22, Y+11	; 0x0b
    359e:	7c 85       	ldd	r23, Y+12	; 0x0c
    35a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    35a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    35a4:	20 e0       	ldi	r18, 0x00	; 0
    35a6:	30 e8       	ldi	r19, 0x80	; 128
    35a8:	4b e3       	ldi	r20, 0x3B	; 59
    35aa:	55 e4       	ldi	r21, 0x45	; 69
    35ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35b0:	dc 01       	movw	r26, r24
    35b2:	cb 01       	movw	r24, r22
    35b4:	8f 83       	std	Y+7, r24	; 0x07
    35b6:	98 87       	std	Y+8, r25	; 0x08
    35b8:	a9 87       	std	Y+9, r26	; 0x09
    35ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35bc:	6f 81       	ldd	r22, Y+7	; 0x07
    35be:	78 85       	ldd	r23, Y+8	; 0x08
    35c0:	89 85       	ldd	r24, Y+9	; 0x09
    35c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    35c4:	20 e0       	ldi	r18, 0x00	; 0
    35c6:	30 e0       	ldi	r19, 0x00	; 0
    35c8:	40 e8       	ldi	r20, 0x80	; 128
    35ca:	5f e3       	ldi	r21, 0x3F	; 63
    35cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35d0:	88 23       	and	r24, r24
    35d2:	2c f4       	brge	.+10     	; 0x35de <_00_LED_APP2+0x1b0>
		__ticks = 1;
    35d4:	81 e0       	ldi	r24, 0x01	; 1
    35d6:	90 e0       	ldi	r25, 0x00	; 0
    35d8:	9e 83       	std	Y+6, r25	; 0x06
    35da:	8d 83       	std	Y+5, r24	; 0x05
    35dc:	3f c0       	rjmp	.+126    	; 0x365c <_00_LED_APP2+0x22e>
	else if (__tmp > 65535)
    35de:	6f 81       	ldd	r22, Y+7	; 0x07
    35e0:	78 85       	ldd	r23, Y+8	; 0x08
    35e2:	89 85       	ldd	r24, Y+9	; 0x09
    35e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    35e6:	20 e0       	ldi	r18, 0x00	; 0
    35e8:	3f ef       	ldi	r19, 0xFF	; 255
    35ea:	4f e7       	ldi	r20, 0x7F	; 127
    35ec:	57 e4       	ldi	r21, 0x47	; 71
    35ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35f2:	18 16       	cp	r1, r24
    35f4:	4c f5       	brge	.+82     	; 0x3648 <_00_LED_APP2+0x21a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    35f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    35fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    35fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    35fe:	20 e0       	ldi	r18, 0x00	; 0
    3600:	30 e0       	ldi	r19, 0x00	; 0
    3602:	40 e2       	ldi	r20, 0x20	; 32
    3604:	51 e4       	ldi	r21, 0x41	; 65
    3606:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    360a:	dc 01       	movw	r26, r24
    360c:	cb 01       	movw	r24, r22
    360e:	bc 01       	movw	r22, r24
    3610:	cd 01       	movw	r24, r26
    3612:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3616:	dc 01       	movw	r26, r24
    3618:	cb 01       	movw	r24, r22
    361a:	9e 83       	std	Y+6, r25	; 0x06
    361c:	8d 83       	std	Y+5, r24	; 0x05
    361e:	0f c0       	rjmp	.+30     	; 0x363e <_00_LED_APP2+0x210>
    3620:	8c e2       	ldi	r24, 0x2C	; 44
    3622:	91 e0       	ldi	r25, 0x01	; 1
    3624:	9c 83       	std	Y+4, r25	; 0x04
    3626:	8b 83       	std	Y+3, r24	; 0x03
    3628:	8b 81       	ldd	r24, Y+3	; 0x03
    362a:	9c 81       	ldd	r25, Y+4	; 0x04
    362c:	01 97       	sbiw	r24, 0x01	; 1
    362e:	f1 f7       	brne	.-4      	; 0x362c <_00_LED_APP2+0x1fe>
    3630:	9c 83       	std	Y+4, r25	; 0x04
    3632:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3634:	8d 81       	ldd	r24, Y+5	; 0x05
    3636:	9e 81       	ldd	r25, Y+6	; 0x06
    3638:	01 97       	sbiw	r24, 0x01	; 1
    363a:	9e 83       	std	Y+6, r25	; 0x06
    363c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    363e:	8d 81       	ldd	r24, Y+5	; 0x05
    3640:	9e 81       	ldd	r25, Y+6	; 0x06
    3642:	00 97       	sbiw	r24, 0x00	; 0
    3644:	69 f7       	brne	.-38     	; 0x3620 <_00_LED_APP2+0x1f2>
    3646:	14 c0       	rjmp	.+40     	; 0x3670 <_00_LED_APP2+0x242>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3648:	6f 81       	ldd	r22, Y+7	; 0x07
    364a:	78 85       	ldd	r23, Y+8	; 0x08
    364c:	89 85       	ldd	r24, Y+9	; 0x09
    364e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3650:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3654:	dc 01       	movw	r26, r24
    3656:	cb 01       	movw	r24, r22
    3658:	9e 83       	std	Y+6, r25	; 0x06
    365a:	8d 83       	std	Y+5, r24	; 0x05
    365c:	8d 81       	ldd	r24, Y+5	; 0x05
    365e:	9e 81       	ldd	r25, Y+6	; 0x06
    3660:	9a 83       	std	Y+2, r25	; 0x02
    3662:	89 83       	std	Y+1, r24	; 0x01
    3664:	89 81       	ldd	r24, Y+1	; 0x01
    3666:	9a 81       	ldd	r25, Y+2	; 0x02
    3668:	01 97       	sbiw	r24, 0x01	; 1
    366a:	f1 f7       	brne	.-4      	; 0x3668 <_00_LED_APP2+0x23a>
    366c:	9a 83       	std	Y+2, r25	; 0x02
    366e:	89 83       	std	Y+1, r24	; 0x01
		{
			LED_voidOn(PORT_A,Local_u8PinNumber);
			_delay_ms(1000);

		}
	for (u8 Local_u8PinNumber =7 ; Local_u8PinNumber>=0 ; Local_u8PinNumber--)
    3670:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3672:	81 50       	subi	r24, 0x01	; 1
    3674:	8d 8f       	std	Y+29, r24	; 0x1d
    3676:	86 cf       	rjmp	.-244    	; 0x3584 <_00_LED_APP2+0x156>

00003678 <main>:
#include "../HAL/LED/LED_Interface.h"
#include "../APP/00APP_LED/00APP_LED.h"
#include "../MCAL/DIO/DIO_Interface.h"
#include "../APP/TEST/IR_withMotors.h"
int main(void)
{
    3678:	df 93       	push	r29
    367a:	cf 93       	push	r28
    367c:	00 d0       	rcall	.+0      	; 0x367e <main+0x6>
    367e:	0f 92       	push	r0
    3680:	cd b7       	in	r28, 0x3d	; 61
    3682:	de b7       	in	r29, 0x3e	; 62

	// initialize IR
		IR_voidInit(PORT_B,Pin_0); // FORWARD IR
    3684:	81 e0       	ldi	r24, 0x01	; 1
    3686:	60 e0       	ldi	r22, 0x00	; 0
    3688:	0e 94 bd 12 	call	0x257a	; 0x257a <IR_voidInit>
		IR_voidInit(PORT_B,Pin_1); // RIGHT IR
    368c:	81 e0       	ldi	r24, 0x01	; 1
    368e:	61 e0       	ldi	r22, 0x01	; 1
    3690:	0e 94 bd 12 	call	0x257a	; 0x257a <IR_voidInit>
		IR_voidInit(PORT_B,Pin_2); // LEFT IR
    3694:	81 e0       	ldi	r24, 0x01	; 1
    3696:	62 e0       	ldi	r22, 0x02	; 2
    3698:	0e 94 bd 12 	call	0x257a	; 0x257a <IR_voidInit>

		// init two motors
		motor1._PIN1=PIN_0;
    369c:	10 92 68 00 	sts	0x0068, r1
		motor1._PIN2=PIN_1;  // right
    36a0:	81 e0       	ldi	r24, 0x01	; 1
    36a2:	80 93 69 00 	sts	0x0069, r24
		motor1._PORT=PORT_D;
    36a6:	83 e0       	ldi	r24, 0x03	; 3
    36a8:	80 93 6a 00 	sts	0x006A, r24
		motor1._PWMPIN=PIN_4; // OC1A
    36ac:	84 e0       	ldi	r24, 0x04	; 4
    36ae:	80 93 6b 00 	sts	0x006B, r24

		motor2._PIN1=PIN_2;
    36b2:	82 e0       	ldi	r24, 0x02	; 2
    36b4:	80 93 6c 00 	sts	0x006C, r24
		motor2._PIN2=PIN_3;    // left
    36b8:	83 e0       	ldi	r24, 0x03	; 3
    36ba:	80 93 6d 00 	sts	0x006D, r24
		motor2._PORT=PORT_D;
    36be:	83 e0       	ldi	r24, 0x03	; 3
    36c0:	80 93 6e 00 	sts	0x006E, r24
		motor2._PWMPIN=PIN_5;  // OC1B
    36c4:	85 e0       	ldi	r24, 0x05	; 5
    36c6:	80 93 6f 00 	sts	0x006F, r24

		MOTOR_voidInit(motor1);
    36ca:	80 91 68 00 	lds	r24, 0x0068
    36ce:	90 91 69 00 	lds	r25, 0x0069
    36d2:	a0 91 6a 00 	lds	r26, 0x006A
    36d6:	b0 91 6b 00 	lds	r27, 0x006B
    36da:	bc 01       	movw	r22, r24
    36dc:	cd 01       	movw	r24, r26
    36de:	0e 94 4c 0c 	call	0x1898	; 0x1898 <MOTOR_voidInit>
		MOTOR_voidInit(motor2);
    36e2:	80 91 6c 00 	lds	r24, 0x006C
    36e6:	90 91 6d 00 	lds	r25, 0x006D
    36ea:	a0 91 6e 00 	lds	r26, 0x006E
    36ee:	b0 91 6f 00 	lds	r27, 0x006F
    36f2:	bc 01       	movw	r22, r24
    36f4:	cd 01       	movw	r24, r26
    36f6:	0e 94 4c 0c 	call	0x1898	; 0x1898 <MOTOR_voidInit>



		bool obstical_right , obstical_left , obstical_forward;
			while (1){
				MOTOR_voidSetSpeed(motor1,200);
    36fa:	80 91 68 00 	lds	r24, 0x0068
    36fe:	90 91 69 00 	lds	r25, 0x0069
    3702:	a0 91 6a 00 	lds	r26, 0x006A
    3706:	b0 91 6b 00 	lds	r27, 0x006B
    370a:	bc 01       	movw	r22, r24
    370c:	cd 01       	movw	r24, r26
    370e:	48 ec       	ldi	r20, 0xC8	; 200
    3710:	50 e0       	ldi	r21, 0x00	; 0
    3712:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <MOTOR_voidSetSpeed>
					MOTOR_voidSetSpeed(motor2,200);
    3716:	80 91 6c 00 	lds	r24, 0x006C
    371a:	90 91 6d 00 	lds	r25, 0x006D
    371e:	a0 91 6e 00 	lds	r26, 0x006E
    3722:	b0 91 6f 00 	lds	r27, 0x006F
    3726:	bc 01       	movw	r22, r24
    3728:	cd 01       	movw	r24, r26
    372a:	48 ec       	ldi	r20, 0xC8	; 200
    372c:	50 e0       	ldi	r21, 0x00	; 0
    372e:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <MOTOR_voidSetSpeed>
				obstical_forward = IR_boolCheckObstical(PORT_B,Pin_0);
    3732:	81 e0       	ldi	r24, 0x01	; 1
    3734:	60 e0       	ldi	r22, 0x00	; 0
    3736:	0e 94 ce 12 	call	0x259c	; 0x259c <IR_boolCheckObstical>
    373a:	89 83       	std	Y+1, r24	; 0x01
				obstical_left    = IR_boolCheckObstical(PORT_B,Pin_2);
    373c:	81 e0       	ldi	r24, 0x01	; 1
    373e:	62 e0       	ldi	r22, 0x02	; 2
    3740:	0e 94 ce 12 	call	0x259c	; 0x259c <IR_boolCheckObstical>
    3744:	8a 83       	std	Y+2, r24	; 0x02
				obstical_right   = IR_boolCheckObstical(PORT_B,Pin_1);
    3746:	81 e0       	ldi	r24, 0x01	; 1
    3748:	61 e0       	ldi	r22, 0x01	; 1
    374a:	0e 94 ce 12 	call	0x259c	; 0x259c <IR_boolCheckObstical>
    374e:	8b 83       	std	Y+3, r24	; 0x03

				// the state machine for the move of the robot

				if (obstical_forward)
    3750:	89 81       	ldd	r24, Y+1	; 0x01
    3752:	88 23       	and	r24, r24
    3754:	61 f1       	breq	.+88     	; 0x37ae <main+0x136>
				{
					MOTOR_voidBackword(motor1);
    3756:	80 91 68 00 	lds	r24, 0x0068
    375a:	90 91 69 00 	lds	r25, 0x0069
    375e:	a0 91 6a 00 	lds	r26, 0x006A
    3762:	b0 91 6b 00 	lds	r27, 0x006B
    3766:	bc 01       	movw	r22, r24
    3768:	cd 01       	movw	r24, r26
    376a:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MOTOR_voidBackword>
					MOTOR_voidBackword(motor2);
    376e:	80 91 6c 00 	lds	r24, 0x006C
    3772:	90 91 6d 00 	lds	r25, 0x006D
    3776:	a0 91 6e 00 	lds	r26, 0x006E
    377a:	b0 91 6f 00 	lds	r27, 0x006F
    377e:	bc 01       	movw	r22, r24
    3780:	cd 01       	movw	r24, r26
    3782:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MOTOR_voidBackword>

					MOTOR_voidRight(motor1, motor2);
    3786:	80 91 68 00 	lds	r24, 0x0068
    378a:	90 91 69 00 	lds	r25, 0x0069
    378e:	a0 91 6a 00 	lds	r26, 0x006A
    3792:	b0 91 6b 00 	lds	r27, 0x006B
    3796:	20 91 6c 00 	lds	r18, 0x006C
    379a:	30 91 6d 00 	lds	r19, 0x006D
    379e:	40 91 6e 00 	lds	r20, 0x006E
    37a2:	50 91 6f 00 	lds	r21, 0x006F
    37a6:	bc 01       	movw	r22, r24
    37a8:	cd 01       	movw	r24, r26
    37aa:	0e 94 b9 0c 	call	0x1972	; 0x1972 <MOTOR_voidRight>
				}  // trun right

				if (obstical_right) {
    37ae:	8b 81       	ldd	r24, Y+3	; 0x03
    37b0:	88 23       	and	r24, r24
    37b2:	69 f1       	breq	.+90     	; 0x380e <main+0x196>
					MOTOR_voidBackword(motor1);
    37b4:	80 91 68 00 	lds	r24, 0x0068
    37b8:	90 91 69 00 	lds	r25, 0x0069
    37bc:	a0 91 6a 00 	lds	r26, 0x006A
    37c0:	b0 91 6b 00 	lds	r27, 0x006B
    37c4:	bc 01       	movw	r22, r24
    37c6:	cd 01       	movw	r24, r26
    37c8:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MOTOR_voidBackword>
					MOTOR_voidBackword(motor2);
    37cc:	80 91 6c 00 	lds	r24, 0x006C
    37d0:	90 91 6d 00 	lds	r25, 0x006D
    37d4:	a0 91 6e 00 	lds	r26, 0x006E
    37d8:	b0 91 6f 00 	lds	r27, 0x006F
    37dc:	bc 01       	movw	r22, r24
    37de:	cd 01       	movw	r24, r26
    37e0:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <MOTOR_voidBackword>
					MOTOR_voidLeft(motor1 , motor2);
    37e4:	80 91 68 00 	lds	r24, 0x0068
    37e8:	90 91 69 00 	lds	r25, 0x0069
    37ec:	a0 91 6a 00 	lds	r26, 0x006A
    37f0:	b0 91 6b 00 	lds	r27, 0x006B
    37f4:	20 91 6c 00 	lds	r18, 0x006C
    37f8:	30 91 6d 00 	lds	r19, 0x006D
    37fc:	40 91 6e 00 	lds	r20, 0x006E
    3800:	50 91 6f 00 	lds	r21, 0x006F
    3804:	bc 01       	movw	r22, r24
    3806:	cd 01       	movw	r24, r26
    3808:	0e 94 8c 0c 	call	0x1918	; 0x1918 <MOTOR_voidLeft>
    380c:	76 cf       	rjmp	.-276    	; 0x36fa <main+0x82>
				}  // turn left
				else {
					MOTOR_voidForward(motor1);
    380e:	80 91 68 00 	lds	r24, 0x0068
    3812:	90 91 69 00 	lds	r25, 0x0069
    3816:	a0 91 6a 00 	lds	r26, 0x006A
    381a:	b0 91 6b 00 	lds	r27, 0x006B
    381e:	bc 01       	movw	r22, r24
    3820:	cd 01       	movw	r24, r26
    3822:	0e 94 6f 0c 	call	0x18de	; 0x18de <MOTOR_voidForward>
					MOTOR_voidForward(motor2);
    3826:	80 91 6c 00 	lds	r24, 0x006C
    382a:	90 91 6d 00 	lds	r25, 0x006D
    382e:	a0 91 6e 00 	lds	r26, 0x006E
    3832:	b0 91 6f 00 	lds	r27, 0x006F
    3836:	bc 01       	movw	r22, r24
    3838:	cd 01       	movw	r24, r26
    383a:	0e 94 6f 0c 	call	0x18de	; 0x18de <MOTOR_voidForward>
    383e:	5d cf       	rjmp	.-326    	; 0x36fa <main+0x82>

00003840 <__prologue_saves__>:
    3840:	2f 92       	push	r2
    3842:	3f 92       	push	r3
    3844:	4f 92       	push	r4
    3846:	5f 92       	push	r5
    3848:	6f 92       	push	r6
    384a:	7f 92       	push	r7
    384c:	8f 92       	push	r8
    384e:	9f 92       	push	r9
    3850:	af 92       	push	r10
    3852:	bf 92       	push	r11
    3854:	cf 92       	push	r12
    3856:	df 92       	push	r13
    3858:	ef 92       	push	r14
    385a:	ff 92       	push	r15
    385c:	0f 93       	push	r16
    385e:	1f 93       	push	r17
    3860:	cf 93       	push	r28
    3862:	df 93       	push	r29
    3864:	cd b7       	in	r28, 0x3d	; 61
    3866:	de b7       	in	r29, 0x3e	; 62
    3868:	ca 1b       	sub	r28, r26
    386a:	db 0b       	sbc	r29, r27
    386c:	0f b6       	in	r0, 0x3f	; 63
    386e:	f8 94       	cli
    3870:	de bf       	out	0x3e, r29	; 62
    3872:	0f be       	out	0x3f, r0	; 63
    3874:	cd bf       	out	0x3d, r28	; 61
    3876:	09 94       	ijmp

00003878 <__epilogue_restores__>:
    3878:	2a 88       	ldd	r2, Y+18	; 0x12
    387a:	39 88       	ldd	r3, Y+17	; 0x11
    387c:	48 88       	ldd	r4, Y+16	; 0x10
    387e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3880:	6e 84       	ldd	r6, Y+14	; 0x0e
    3882:	7d 84       	ldd	r7, Y+13	; 0x0d
    3884:	8c 84       	ldd	r8, Y+12	; 0x0c
    3886:	9b 84       	ldd	r9, Y+11	; 0x0b
    3888:	aa 84       	ldd	r10, Y+10	; 0x0a
    388a:	b9 84       	ldd	r11, Y+9	; 0x09
    388c:	c8 84       	ldd	r12, Y+8	; 0x08
    388e:	df 80       	ldd	r13, Y+7	; 0x07
    3890:	ee 80       	ldd	r14, Y+6	; 0x06
    3892:	fd 80       	ldd	r15, Y+5	; 0x05
    3894:	0c 81       	ldd	r16, Y+4	; 0x04
    3896:	1b 81       	ldd	r17, Y+3	; 0x03
    3898:	aa 81       	ldd	r26, Y+2	; 0x02
    389a:	b9 81       	ldd	r27, Y+1	; 0x01
    389c:	ce 0f       	add	r28, r30
    389e:	d1 1d       	adc	r29, r1
    38a0:	0f b6       	in	r0, 0x3f	; 63
    38a2:	f8 94       	cli
    38a4:	de bf       	out	0x3e, r29	; 62
    38a6:	0f be       	out	0x3f, r0	; 63
    38a8:	cd bf       	out	0x3d, r28	; 61
    38aa:	ed 01       	movw	r28, r26
    38ac:	08 95       	ret

000038ae <itoa>:
    38ae:	fb 01       	movw	r30, r22
    38b0:	9f 01       	movw	r18, r30
    38b2:	e8 94       	clt
    38b4:	42 30       	cpi	r20, 0x02	; 2
    38b6:	c4 f0       	brlt	.+48     	; 0x38e8 <itoa+0x3a>
    38b8:	45 32       	cpi	r20, 0x25	; 37
    38ba:	b4 f4       	brge	.+44     	; 0x38e8 <itoa+0x3a>
    38bc:	4a 30       	cpi	r20, 0x0A	; 10
    38be:	29 f4       	brne	.+10     	; 0x38ca <itoa+0x1c>
    38c0:	97 fb       	bst	r25, 7
    38c2:	1e f4       	brtc	.+6      	; 0x38ca <itoa+0x1c>
    38c4:	90 95       	com	r25
    38c6:	81 95       	neg	r24
    38c8:	9f 4f       	sbci	r25, 0xFF	; 255
    38ca:	64 2f       	mov	r22, r20
    38cc:	77 27       	eor	r23, r23
    38ce:	0e 94 88 1c 	call	0x3910	; 0x3910 <__udivmodhi4>
    38d2:	80 5d       	subi	r24, 0xD0	; 208
    38d4:	8a 33       	cpi	r24, 0x3A	; 58
    38d6:	0c f0       	brlt	.+2      	; 0x38da <itoa+0x2c>
    38d8:	89 5d       	subi	r24, 0xD9	; 217
    38da:	81 93       	st	Z+, r24
    38dc:	cb 01       	movw	r24, r22
    38de:	00 97       	sbiw	r24, 0x00	; 0
    38e0:	a1 f7       	brne	.-24     	; 0x38ca <itoa+0x1c>
    38e2:	16 f4       	brtc	.+4      	; 0x38e8 <itoa+0x3a>
    38e4:	5d e2       	ldi	r21, 0x2D	; 45
    38e6:	51 93       	st	Z+, r21
    38e8:	10 82       	st	Z, r1
    38ea:	c9 01       	movw	r24, r18
    38ec:	0c 94 78 1c 	jmp	0x38f0	; 0x38f0 <strrev>

000038f0 <strrev>:
    38f0:	dc 01       	movw	r26, r24
    38f2:	fc 01       	movw	r30, r24
    38f4:	67 2f       	mov	r22, r23
    38f6:	71 91       	ld	r23, Z+
    38f8:	77 23       	and	r23, r23
    38fa:	e1 f7       	brne	.-8      	; 0x38f4 <strrev+0x4>
    38fc:	32 97       	sbiw	r30, 0x02	; 2
    38fe:	04 c0       	rjmp	.+8      	; 0x3908 <strrev+0x18>
    3900:	7c 91       	ld	r23, X
    3902:	6d 93       	st	X+, r22
    3904:	70 83       	st	Z, r23
    3906:	62 91       	ld	r22, -Z
    3908:	ae 17       	cp	r26, r30
    390a:	bf 07       	cpc	r27, r31
    390c:	c8 f3       	brcs	.-14     	; 0x3900 <strrev+0x10>
    390e:	08 95       	ret

00003910 <__udivmodhi4>:
    3910:	aa 1b       	sub	r26, r26
    3912:	bb 1b       	sub	r27, r27
    3914:	51 e1       	ldi	r21, 0x11	; 17
    3916:	07 c0       	rjmp	.+14     	; 0x3926 <__udivmodhi4_ep>

00003918 <__udivmodhi4_loop>:
    3918:	aa 1f       	adc	r26, r26
    391a:	bb 1f       	adc	r27, r27
    391c:	a6 17       	cp	r26, r22
    391e:	b7 07       	cpc	r27, r23
    3920:	10 f0       	brcs	.+4      	; 0x3926 <__udivmodhi4_ep>
    3922:	a6 1b       	sub	r26, r22
    3924:	b7 0b       	sbc	r27, r23

00003926 <__udivmodhi4_ep>:
    3926:	88 1f       	adc	r24, r24
    3928:	99 1f       	adc	r25, r25
    392a:	5a 95       	dec	r21
    392c:	a9 f7       	brne	.-22     	; 0x3918 <__udivmodhi4_loop>
    392e:	80 95       	com	r24
    3930:	90 95       	com	r25
    3932:	bc 01       	movw	r22, r24
    3934:	cd 01       	movw	r24, r26
    3936:	08 95       	ret

00003938 <_exit>:
    3938:	f8 94       	cli

0000393a <__stop_program>:
    393a:	ff cf       	rjmp	.-2      	; 0x393a <__stop_program>
